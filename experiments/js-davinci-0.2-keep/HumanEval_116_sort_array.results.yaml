name: HumanEval_116_sort_array
language: javascript
results:
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('1').length - 1;\n    var bOnes = b.toString(2).split('1').length\
    \ - 1;\n    if(aOnes > bOnes){\n      return 1;\n    }\n    else if(aOnes < bOnes){\n\
    \      return -1;\n    }\n    else{\n      return a - b;\n    }\n  });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(n){return n === '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(n){return n === '1'}).length;\n\
    \    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if(a.toString(2).split('').filter(function(x){return x === '1'}).length ===\
    \ b.toString(2).split('').filter(function(x){return x === '1'}).length){\n   \
    \   return a - b;\n    }\n    return a.toString(2).split('').filter(function(x){return\
    \ x === '1'}).length - b.toString(2).split('').filter(function(x){return x ===\
    \ '1'}).length;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(val){\n      return val === '1';\n    }).length;\n\
    \    var bOnes = bBin.split('').filter(function(val){\n      return val === '1';\n\
    \    }).length;\n    if(aOnes === bOnes){\n      return a - b;\n    }\n    return\
    \ aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(x){return x === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(x){return x === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        const aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        const bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('1').length - 1;\n    var bOnes = b.toString(2).split('1').length\
    \ - 1;\n    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes\
    \ - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.slice();\n  \
    \  arr1.sort((a, b) => {\n        let a1 = a.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        let b1 = b.toString(2).split('').filter(x => x ===\
    \ '1').length;\n        if (a1 === b1) {\n            return a - b;\n        }\
    \ else {\n            return a1 - b1;\n        }\n    });\n    return arr1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2));\n\
    \    let arr2 = arr1.map(x => x.split('').filter(y => y === '1').length);\n  \
    \  let arr3 = arr2.map((x, i) => [x, arr[i]]);\n    let arr4 = arr3.sort((a, b)\
    \ => a[0] - b[0]);\n    let arr5 = arr4.map(x => x[1]);\n    return arr5;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpj7safjqt.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7safjqt.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let ones = [];\n    let zeros\
    \ = [];\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] < 0) {\n            result.push(arr[i]);\n        } else {\n\
    \            let binary = arr[i].toString(2);\n            let count = 0;\n  \
    \          for (let j = 0; j < binary.length; j++) {\n                if (binary[j]\
    \ === '1') {\n                    count++;\n                }\n            }\n\
    \            if (count === 0) {\n                zeros.push(arr[i]);\n       \
    \     } else {\n                ones.push({\n                    count: count,\n\
    \                    value: arr[i]\n                });\n            }\n     \
    \   }\n    }\n    ones.sort((a, b) => {\n        if (a.count === b.count) {\n\
    \            return a.value - b.value;\n        } else {\n            return a.count\
    \ - b.count;\n        }\n    });\n    for (let i = 0; i < ones.length; i++) {\n\
    \        result.push(ones[i].value);\n    }\n    result = result.concat(zeros);\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -2, -3, -4, -5, -6 ]\n\nshould equal\n\
    \n[ -4, -2, -6, -5, -3 ]\n    at test (/tmp/tmpbxb7gze1.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxb7gze1.js:62:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -2, -3,\
    \ -4, -5, -6 ],\n  expected: [ -4, -2, -6, -5, -3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2));\n\
    \    let arr2 = arr1.map(x => x.split('').filter(y => y === '1').length);\n  \
    \  let arr3 = arr2.map((x, i) => [x, arr[i]]);\n    let arr4 = arr3.sort((a, b)\
    \ => a[0] - b[0]);\n    let arr5 = arr4.map(x => x[1]);\n    return arr5;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmptv3p81qq.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptv3p81qq.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \   let bBin = b.toString(2).split('').filter(x => x === '1').length;\n    if\
    \ (aBin === bBin) {\n      return a - b;\n    } else {\n      return aBin - bBin;\n\
    \    }\n  });\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var arr1 = arr.slice();\n  \
    \  var arr2 = arr.slice();\n    var arr3 = arr.slice();\n    var arr4 = arr.slice();\n\
    \    var arr5 = arr.slice();\n    var arr6 = arr.slice();\n    var arr7 = arr.slice();\n\
    \    var arr8 = arr.slice();\n    var arr9 = arr.slice();\n    var arr10 = arr.slice();\n\
    \    var arr11 = arr.slice();\n    var arr12 = arr.slice();\n    var arr13 = arr.slice();\n\
    \    var arr14 = arr.slice();\n    var arr15 = arr.slice();\n    var arr16 = arr.slice();\n\
    \    var arr17 = arr.slice();\n    var arr18 = arr.slice();\n    var arr19 = arr.slice();\n\
    \    var arr20 = arr.slice();\n    var arr21 = arr.slice();\n    var arr22 = arr.slice();\n\
    \    var arr23 = arr.slice();\n    var arr24 = arr.slice();\n    var arr25 = arr.slice();\n\
    \    var arr26 = arr.slice();\n    var arr27 = arr.slice();\n    var arr28 = arr.slice();\n\
    \    var arr29 = arr.slice();\n    var arr30 = arr.slice();\n    var arr31 = arr.slice();\n\
    \    var arr32 = arr.slice();\n    var arr33 = arr.slice();\n    var arr34 = arr.slice();\n\
    \    var arr35 = arr.slice();\n    var arr36 = arr.slice();\n    var arr37 = arr.slice();\n\
    \    var arr38 = arr.slice();\n    var arr39 = arr.slice();\n    var arr40 = arr.slice();\n\
    \    var arr41 = arr.slice();\n    var arr42 = arr.slice();\n    var arr43 = arr.slice();\n\
    \    var arr44 = arr.slice();\n    var arr45 = arr.slice();\n    var arr46 = arr.slice();\n\
    \    var arr47 = arr.slice();\n    var arr48 = arr.slice();\n    var arr49 = arr.slice();\n\
    \    var arr50 = arr.slice();\n    var arr51 = arr.slice();\n   \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4e_o3qhu.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let binA = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let binB = b.toString(2).split('').filter(x => x === '1').length;\n \
    \       if (binA === binB) {\n            return a - b;\n        } else {\n  \
    \          return binA - binB;\n        }\n    });\n    return sorted;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(n){return n === '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(n){return n === '1'}).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return a.toString(2).split('').filter(function(x){return x==1}).length -\
    \ b.toString(2).split('').filter(function(x){return x==1}).length || a - b;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0ctj4wp9.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmp0ctj4wp9.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmp0ctj4wp9.js:9:14)\n    at test (/tmp/tmp0ctj4wp9.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp0ctj4wp9.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = (a >>> 0).toString(2).split('1').length - 1;\n    var bOnes =\
    \ (b >>> 0).toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n \
    \     return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -6, -4, -5, -3, -2 ]\n\nshould equal\n\
    \n[ -4, -2, -6, -5, -3 ]\n    at test (/tmp/tmpftybgtwp.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpftybgtwp.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -6, -4,\
    \ -5, -3, -2 ],\n  expected: [ -4, -2, -6, -5, -3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr3 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr4 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr5 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr6 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr7 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr8 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr9 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr10 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr11 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr12 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr13 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr14 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr15 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n   \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_1ce_u4h.js:40\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(function(x){\n\
    \        return x.toString(2);\n    });\n    let arr2 = arr1.map(function(x){\n\
    \        return x.split('').filter(function(y){\n            return y === '1';\n\
    \        }).length;\n    });\n    let arr3 = arr.map(function(x, i){\n       \
    \ return [x, arr2[i]];\n    });\n    arr3.sort(function(a, b){\n        if(a[1]\
    \ === b[1]){\n            return a[0] - b[0];\n        }\n        return a[1]\
    \ - b[1];\n    });\n    return arr3.map(function(x){\n        return x[0];\n \
    \   });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(x\
    \ => x === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(x\
    \ => x === '1').length);\n    let arr3 = arr.map(x => x.toString(2).split('').filter(x\
    \ => x === '1').length);\n    arr1.sort((a, b) => a - b);\n    arr2.sort((a, b)\
    \ => b - a);\n    let arr4 = [];\n    for (let i = 0; i < arr1.length; i++) {\n\
    \        arr4.push(arr[arr2.indexOf(arr1[i])]);\n        arr2[arr2.indexOf(arr1[i])]\
    \ = -1;\n    }\n    return arr4;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4, 1, 5 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpyfx8x5vu.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyfx8x5vu.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 1, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a_ones = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var b_ones = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(a_ones === b_ones){\n      return a - b;\n    }\n    return a_ones - b_ones;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(e => e === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(e => e === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        } else {\n            return aOnes - bOnes;\n\
    \        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  //your code here\n  return arr.sort(function(a,\
    \ b){\n    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes\
    \ = aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(x){return x === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(x){return x === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('1').length - 1;\n    var b1 = b.toString(2).split('1').length\
    \ - 1;\n    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(val){\n      return val === '1';\n    }).length;\n\
    \    var bOnes = bBin.split('').filter(function(val){\n      return val === '1';\n\
    \    }).length;\n    if(aOnes === bOnes){\n      return a - b;\n    } else {\n\
    \      return aOnes - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        return aOnes - bOnes\
    \ || a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    if(a1 == b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(num){\n      return num\
    \ === '1';\n    }).length;\n    var bOnes = b.toString(2).split('').filter(function(num){\n\
    \      return num === '1';\n    }).length;\n    if(aOnes === bOnes){\n      return\
    \ a - b;\n    }\n    return aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n    var bOnes = bBin.match(/1/g)\
    \ ? bBin.match(/1/g).length : 0;\n    if(aOnes === bOnes){\n      return a - b;\n\
    \    }\n    return aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr3 = [];\n    for (let\
    \ i = 0; i < arr2.length; i++) {\n        for (let j = 0; j < arr1.length; j++)\
    \ {\n            if (arr2[i] === arr1[j]) {\n                arr3.push(arr[j]);\n\
    \                arr1[j] = -1;\n            }\n        }\n    }\n    return arr3;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpc0jtslbg.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc0jtslbg.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  //your code here\n  return arr.sort(function(a,\
    \ b){\n    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes\
    \ = aBin.split('').filter(function(x){ return x === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(x){ return x === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n\
    \    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('1').length - 1;\n        let bOnes = bBin.split('1').length\
    \ - 1;\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n\
    \        return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).split('').filter(function(x){return x=='1'}).length\
    \ - b.toString(2).split('').filter(function(x){return x=='1'}).length) || (a -\
    \ b);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('1').length - 1;\n    var b1 = b.toString(2).split('1').length\
    \ - 1;\n    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('1').length - 1;\n    var b1 = b.toString(2).split('1').length\
    \ - 1;\n    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.slice();\n  \
    \  arr1.sort((a, b) => {\n        let a1 = a.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        let b1 = b.toString(2).split('').filter(x => x ===\
    \ '1').length;\n        if (a1 === b1) {\n            return a - b;\n        }\
    \ else {\n            return a1 - b1;\n        }\n    });\n    return arr1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    var bBin = b.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    if(aBin == bBin){\n      return a - b;\n    } else {\n      return aBin -\
    \ bBin;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a_ones = count_ones(a);\n    var b_ones = count_ones(b);\n    if(a_ones\
    \ === b_ones){\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpco71t4oj.js:10\n    var a_ones = count_ones(a);\n             \
    \    ^\n\nReferenceError: count_ones is not defined\n    at /tmp/tmpco71t4oj.js:10:18\n\
    \    at Array.sort (<anonymous>)\n    at sort_array (/tmp/tmpco71t4oj.js:9:14)\n\
    \    at test (/tmp/tmpco71t4oj.js:24:20)\n    at Object.<anonymous> (/tmp/tmpco71t4oj.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n    var bOnes = bBin.match(/1/g)\
    \ ? bBin.match(/1/g).length : 0;\n    if(aOnes === bOnes){\n      return a - b;\n\
    \    }\n    return aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(x){return x === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(x){return x === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    arr1.sort((a, b) => a - b);\n    let result = [];\n\
    \    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; j < arr2.length;\
    \ j++) {\n            if (arr1[i] === arr2[j]) {\n                result.push(arr[j]);\n\
    \                arr2[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpl6dhvmdp.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6dhvmdp.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null)\
    \ {\n      return a - b;\n    } else if (a.toString(2).match(/1/g) === null) {\n\
    \      return -1;\n    } else if (b.toString(2).match(/1/g) === null) {\n    \
    \  return 1;\n    } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length)\
    \ {\n      return a - b;\n    } else {\n      return a.toString(2).match(/1/g).length\
    \ - b.toString(2).match(/1/g).length;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let binaryA = a.toString(2);\n        let binaryB = b.toString(2);\n\
    \        let countA = binaryA.split('1').length - 1;\n        let countB = binaryB.split('1').length\
    \ - 1;\n        if (countA === countB) {\n            return a - b;\n        }\
    \ else {\n            return countA - countB;\n        }\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let aBin = a.toString(2);\n    let bBin = b.toString(2);\n    let aOnes\
    \ = aBin.split('').filter(x => x === '1').length;\n    let bOnes = bBin.split('').filter(x\
    \ => x === '1').length;\n    if (aOnes === bOnes) {\n      return a - b;\n   \
    \ } else {\n      return aOnes - bOnes;\n    }\n  });\n  return sorted;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if(a.toString(2).split('').filter(function(x){return x == 1}).length > b.toString(2).split('').filter(function(x){return\
    \ x == 1}).length){\n      return 1;\n    }\n    else if(a.toString(2).split('').filter(function(x){return\
    \ x == 1}).length < b.toString(2).split('').filter(function(x){return x == 1}).length){\n\
    \      return -1;\n    }\n    else{\n      return a - b;\n    }\n  });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if (aOnes === null)\
    \ {\n      aOnes = 0;\n    } else {\n      aOnes = aOnes.length;\n    }\n    if\
    \ (bOnes === null) {\n      bOnes = 0;\n    } else {\n      bOnes = bOnes.length;\n\
    \    }\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return\
    \ aOnes - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2).split('').filter(function(num){\n      return num\
    \ === '1';\n    }).length;\n    var bBin = b.toString(2).split('').filter(function(num){\n\
    \      return num === '1';\n    }).length;\n    if(aBin === bBin){\n      return\
    \ a - b;\n    }\n    return aBin - bBin;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \   let bBin = b.toString(2).split('').filter(x => x === '1').length;\n    if\
    \ (aBin === bBin) {\n      return a - b;\n    } else {\n      return aBin - bBin;\n\
    \    }\n  });\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a_ones = a.toString(2).match(/1/g).length;\n    var b_ones = b.toString(2).match(/1/g).length;\n\
    \    if (a_ones === b_ones) {\n      return a - b;\n    } else {\n      return\
    \ a_ones - b_ones;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfmqe_fx3.js:10\n    var a_ones = a.toString(2).match(/1/g).length;\n\
    \                                          ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpfmqe_fx3.js:10:43\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpfmqe_fx3.js:9:14)\n    at test (/tmp/tmpfmqe_fx3.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfmqe_fx3.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) || [];\n    var bOnes = bBin.match(/1/g) || [];\n    if (aOnes.length\
    \ === bOnes.length) {\n      return a - b;\n    } else {\n      return aOnes.length\
    \ - bOnes.length;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var arr1 = [];\n    var arr2\
    \ = [];\n    var arr3 = [];\n    for(var i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] < 0){\n            arr1.push(arr[i]);\n        }else if(arr[i] ==\
    \ 0){\n            arr2.push(arr[i]);\n        }else{\n            arr3.push(arr[i]);\n\
    \        }\n    }\n    arr1.sort(function(a, b){return a - b});\n    arr2.sort(function(a,\
    \ b){return a - b});\n    arr3.sort(function(a, b){return a - b});\n    return\
    \ arr1.concat(arr2).concat(arr3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 3, 4, 5 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmp2d_qb794.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2d_qb794.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let result = [];\n    let temp\
    \ = [];\n    let temp2 = [];\n    let temp3 = [];\n    let temp4 = [];\n    let\
    \ temp5 = [];\n    let temp6 = [];\n    let temp7 = [];\n    let temp8 = [];\n\
    \    let temp9 = [];\n    let temp10 = [];\n    let temp11 = [];\n    let temp12\
    \ = [];\n    let temp13 = [];\n    let temp14 = [];\n    let temp15 = [];\n  \
    \  let temp16 = [];\n    let temp17 = [];\n    let temp18 = [];\n    let temp19\
    \ = [];\n    let temp20 = [];\n    let temp21 = [];\n    let temp22 = [];\n  \
    \  let temp23 = [];\n    let temp24 = [];\n    let temp25 = [];\n    let temp26\
    \ = [];\n    let temp27 = [];\n    let temp28 = [];\n    let temp29 = [];\n  \
    \  let temp30 = [];\n    let temp31 = [];\n    let temp32 = [];\n    let temp33\
    \ = [];\n    let temp34 = [];\n    let temp35 = [];\n    let temp36 = [];\n  \
    \  let temp37 = [];\n    let temp38 = [];\n    let temp39 = [];\n    let temp40\
    \ = [];\n    let temp41 = [];\n    let temp42 = [];\n    let temp43 = [];\n  \
    \  let temp44 = [];\n    let temp45 = [];\n    let temp46 = [];\n    let temp47\
    \ = [];\n    let temp48 = [];\n    let temp49 = [];\n    let temp50 = [];\n  \
    \  let temp51 = [];\n    let temp52 = [];\n    let temp53 = [];\n    let temp54\
    \ = [];\n    let temp55 = [];\n    let temp56 = [];\n    let temp57 = [];\n  \
    \  let temp58 = [];\n    let temp59 = [];\n    let temp60 = [];\n    let temp61\
    \ = [];\n    let temp62 = [];\n    let temp63 = [];\n    let temp64 = [];\n  \
    \  let temp65 = [];\n    let temp66 = [];\n    let temp67 = [];\n    let temp68\
    \ = [];\n    let temp69 = [];\n    let temp70 = [];\n    let temp71 = [];\n  \
    \  let temp72 = [];\n    let\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj18_63p5.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g);\n    var bOnes = b.toString(2).match(/1/g);\n\
    \    if (aOnes && bOnes) {\n      if (aOnes.length === bOnes.length) {\n     \
    \   return a - b;\n      } else {\n        return aOnes.length - bOnes.length;\n\
    \      }\n    } else if (aOnes) {\n      return -1;\n    } else if (bOnes) {\n\
    \      return 1;\n    } else {\n      return a - b;\n    }\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmprjmrhk7d.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprjmrhk7d.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    return a1 - b1 || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let a1 = a.toString(2).split('').filter(x => x === '1').length;\n   \
    \     let b1 = b.toString(2).split('').filter(x => x === '1').length;\n      \
    \  if (a1 === b1) {\n            return a - b;\n        }\n        return a1 -\
    \ b1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu14lej7y.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpu14lej7y.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpu14lej7y.js:9:14)\n    at test (/tmp/tmpu14lej7y.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpu14lej7y.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) || [];\n    var bOnes = bBin.match(/1/g) || [];\n    if (aOnes.length\
    \ === bOnes.length) {\n      return a - b;\n    } else {\n      return aOnes.length\
    \ - bOnes.length;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let ones = [];\n    let zeros\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        let binary = arr[i].toString(2);\n\
    \        let count = 0;\n        for(let j = 0; j < binary.length; j++){\n   \
    \         if(binary[j] === '1'){\n                count++;\n            }\n  \
    \      }\n        if(count === 0){\n            zeros.push(arr[i]);\n        }\n\
    \        else{\n            ones.push([arr[i], count]);\n        }\n    }\n  \
    \  ones.sort(function(a, b){\n        if(a[1] === b[1]){\n            return a[0]\
    \ - b[0];\n        }\n        else{\n            return a[1] - b[1];\n       \
    \ }\n    });\n    let result = [];\n    for(let i = 0; i < ones.length; i++){\n\
    \        result.push(ones[i][0]);\n    }\n    for(let i = 0; i < zeros.length;\
    \ i++){\n        result.push(zeros[i]);\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmpauf83vcc.js:50:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpauf83vcc.js:58:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x == '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x == '1'}).length;\n\
    \    if(a1 == b1){\n      return a - b;\n    }else{\n      return a1 - b1;\n \
    \   }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \   let bBin = b.toString(2).split('').filter(x => x === '1').length;\n    if\
    \ (aBin === bBin) {\n      return a - b;\n    } else {\n      return aBin - bBin;\n\
    \    }\n  });\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_ofr7l77.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmp_ofr7l77.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmp_ofr7l77.js:9:14)\n    at test (/tmp/tmp_ofr7l77.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_ofr7l77.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    arr1.sort((a, b) => a - b);\n    let arr3 = [];\n\
    \    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; j < arr2.length;\
    \ j++) {\n            if (arr1[i] === arr2[j]) {\n                arr3.push(arr[j]);\n\
    \                arr2[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return arr3;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmp6fm6fu63.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6fm6fu63.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if (aOnes === null\
    \ && bOnes === null) {\n      return a - b;\n    } else if (aOnes === null) {\n\
    \      return -1;\n    } else if (bOnes === null) {\n      return 1;\n    } else\
    \ if (aOnes.length === bOnes.length) {\n      return a - b;\n    } else {\n  \
    \    return aOnes.length - bOnes.length;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpixd2sd4_.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpixd2sd4_.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpixd2sd4_.js:9:14)\n    at test (/tmp/tmpixd2sd4_.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpixd2sd4_.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bBin = b.toString(2).split('').filter(x => x === '1').length;\n \
    \       if (aBin === bBin) {\n            return a - b;\n        } else {\n  \
    \          return aBin - bBin;\n        }\n    });\n    return sorted;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(val){\n      return val\
    \ === '1';\n    }).length;\n    var bOnes = b.toString(2).split('').filter(function(val){\n\
    \      return val === '1';\n    }).length;\n    if(aOnes === bOnes){\n      return\
    \ a - b;\n    }\n    return aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var binA = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var binB = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(binA === binB){\n      return a - b;\n    }\n    return binA - binB;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(x\
    \ => x === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(x\
    \ => x === '1').length);\n    arr1.sort((a, b) => a - b);\n    let arr3 = [];\n\
    \    for (let i = 0; i < arr1.length; i++) {\n        arr3.push(arr[arr2.indexOf(arr1[i])]);\n\
    \        arr2[arr2.indexOf(arr1[i])] = -1;\n    }\n    return arr3;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpyzxsh205.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyzxsh205.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let a1 = a.toString(2).split('').filter(x => x === '1').length;\n   \
    \     let b1 = b.toString(2).split('').filter(x => x === '1').length;\n      \
    \  if (a1 === b1) {\n            return a - b;\n        }\n        return a1 -\
    \ b1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var bBin = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(aBin === bBin){\n      return a - b;\n    }\n    return aBin - bBin;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    return a1 === b1 ? a - b : a1 - b1;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg8du5q3r.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpg8du5q3r.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpg8du5q3r.js:9:14)\n    at test (/tmp/tmpg8du5q3r.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpg8du5q3r.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('1').length - 1;\n    var b1 = b.toString(2).split('1').length\
    \ - 1;\n    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = (a >>> 0).toString(2).split('1').length - 1;\n    var bOnes =\
    \ (b >>> 0).toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n \
    \     return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -6, -4, -5, -3, -2 ]\n\nshould equal\n\
    \n[ -4, -2, -6, -5, -3 ]\n    at test (/tmp/tmpwibmkdus.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwibmkdus.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -6, -4,\
    \ -5, -3, -2 ],\n  expected: [ -4, -2, -6, -5, -3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).match(/1/g).length;\n    var b1 = b.toString(2).match(/1/g).length;\n\
    \    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq8uo2nmj.js:10\n    var a1 = a.toString(2).match(/1/g).length;\n\
    \                                      ^\n\nTypeError: Cannot read property 'length'\
    \ of null\n    at /tmp/tmpq8uo2nmj.js:10:39\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpq8uo2nmj.js:9:14)\n    at test (/tmp/tmpq8uo2nmj.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpq8uo2nmj.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if(a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null){\n\
    \      return a - b;\n    }\n    if(a.toString(2).match(/1/g) === null){\n   \
    \   return -1;\n    }\n    if(b.toString(2).match(/1/g) === null){\n      return\
    \ 1;\n    }\n    if(a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length){\n\
    \      return a - b;\n    }\n    return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n\
    \        let aOnes = aBinary.split('').filter(char => char === '1').length;\n\
    \        let bOnes = bBinary.split('').filter(char => char === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        } else {\n\
    \            return aOnes - bOnes;\n        }\n    });\n    return sorted;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('1').length - 1;\n    var bOnes = b.toString(2).split('1').length\
    \ - 1;\n    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes\
    \ - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        return a.toString(2).split('').filter(x => x == 1).length - b.toString(2).split('').filter(x\
    \ => x == 1).length || a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(x){return x === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(x){return x === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpthjph74j.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpthjph74j.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpthjph74j.js:9:14)\n    at test (/tmp/tmpthjph74j.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpthjph74j.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n        let bOnes\
    \ = bBin.match(/1/g) ? bBin.match(/1/g).length : 0;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        const aBin = a.toString(2);\n        const bBin = b.toString(2);\n  \
    \      const aOnes = aBin.split('').filter(x => x === '1').length;\n        const\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppydh1ov_.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmppydh1ov_.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmppydh1ov_.js:9:14)\n    at test (/tmp/tmppydh1ov_.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmppydh1ov_.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(e => e === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(e => e === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        } else {\n            return aOnes - bOnes;\n\
    \        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        if (a.toString(2).split('').filter(x => x === '1').length === b.toString(2).split('').filter(x\
    \ => x === '1').length) {\n            return a - b;\n        } else {\n     \
    \       return a.toString(2).split('').filter(x => x === '1').length - b.toString(2).split('').filter(x\
    \ => x === '1').length;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(e){return e === '1'}).length;\n    var bOnes\
    \ = bBin.split('').filter(function(e){return e === '1'}).length;\n    if(aOnes\
    \ === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return countOnes(a) - countOnes(b) || a - b;\n  });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnpu2t1uw.js:10\n    return countOnes(a) - countOnes(b) || a - b;\n\
    \    ^\n\nReferenceError: countOnes is not defined\n    at /tmp/tmpnpu2t1uw.js:10:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_array (/tmp/tmpnpu2t1uw.js:9:14)\n\
    \    at test (/tmp/tmpnpu2t1uw.js:19:20)\n    at Object.<anonymous> (/tmp/tmpnpu2t1uw.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        const aBin = a.toString(2);\n        const bBin = b.toString(2);\n  \
    \      const aOnes = aBin.split('1').length - 1;\n        const bOnes = bBin.split('1').length\
    \ - 1;\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n\
    \        return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = (a >>> 0).toString(2).split('1').length - 1;\n    var bOnes =\
    \ (b >>> 0).toString(2).split('1').length - 1;\n    if (aOnes > bOnes) {\n   \
    \   return 1;\n    } else if (aOnes < bOnes) {\n      return -1;\n    } else {\n\
    \      return a - b;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -6, -4, -5, -3, -2 ]\n\nshould equal\n\
    \n[ -4, -2, -6, -5, -3 ]\n    at test (/tmp/tmp7bm__qxl.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7bm__qxl.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -6, -4,\
    \ -5, -3, -2 ],\n  expected: [ -4, -2, -6, -5, -3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let aBin = a.toString(2);\n    let bBin = b.toString(2);\n    let aOnes\
    \ = aBin.match(/1/g) || [];\n    let bOnes = bBin.match(/1/g) || [];\n    if (aOnes.length\
    \ === bOnes.length) {\n      return a - b;\n    } else {\n      return aOnes.length\
    \ - bOnes.length;\n    }\n  });\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr1 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length);\n    let arr2 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr3 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => b - a);\n    let arr4 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr5 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => b - a);\n    let arr6 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr7 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => b - a);\n    let arr8 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr9 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => b - a);\n    let arr10 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => a - b);\n    let arr11 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y === '1').length).sort((a, b) => b - a);\n    let arr12 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpze884lal.js:20\n    let arr12 = arr.map(x => x.toString(2).split('').filter(y\
    \ => y\n                                                                 ^\n\n\
    SyntaxError: missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwr_e5aju.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpwr_e5aju.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpwr_e5aju.js:9:14)\n    at test (/tmp/tmpwr_e5aju.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwr_e5aju.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g) || [];\n    var bOnes = b.toString(2).match(/1/g)\
    \ || [];\n    if (aOnes.length === bOnes.length) {\n      return a - b;\n    }\
    \ else {\n      return aOnes.length - bOnes.length;\n    }\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var arr1 = [];\n    var arr2\
    \ = [];\n    var arr3 = [];\n    for(var i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] < 0){\n            arr1.push(arr[i]);\n        }else if(arr[i] >\
    \ 0){\n            arr2.push(arr[i]);\n        }else{\n            arr3.push(arr[i]);\n\
    \        }\n    }\n    arr1.sort(function(a, b){\n        return a - b;\n    });\n\
    \    arr2.sort(function(a, b){\n        var a1 = a.toString(2).split('').filter(function(item){\n\
    \            return item == 1;\n        }).length;\n        var b1 = b.toString(2).split('').filter(function(item){\n\
    \            return item == 1;\n        }).length;\n        if(a1 == b1){\n  \
    \          return a - b;\n        }else{\n            return a1 - b1;\n      \
    \  }\n    });\n    return arr1.concat(arr2).concat(arr3);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -6, -5, -4, -3, -2 ]\n\nshould equal\n\
    \n[ -4, -2, -6, -5, -3 ]\n    at test (/tmp/tmp479rikrw.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp479rikrw.js:55:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -6, -5,\
    \ -4, -3, -2 ],\n  expected: [ -4, -2, -6, -5, -3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').reduce((acc, curr) => curr === '1' ? acc + 1 : acc,\
    \ 0);\n        let bOnes = bBin.split('').reduce((acc, curr) => curr === '1' ?\
    \ acc + 1 : acc, 0);\n        return aOnes === bOnes ? a - b : aOnes - bOnes;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBinary = a.toString(2);\n    var bBinary = b.toString(2);\n    var aOnes\
    \ = aBinary.match(/1/g);\n    var bOnes = bBinary.match(/1/g);\n    if (aOnes\
    \ && bOnes) {\n      if (aOnes.length === bOnes.length) {\n        return a -\
    \ b;\n      } else {\n        return aOnes.length - bOnes.length;\n      }\n \
    \   } else if (aOnes) {\n      return -1;\n    } else if (bOnes) {\n      return\
    \ 1;\n    } else {\n      return a - b;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmpk9w_m667.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk9w_m667.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(x){ return x === '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(x){ return x === '1'}).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(e){return e == 1}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(e){return e == 1}).length;\n\
    \    if(a1 == b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        const aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        const bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a_ones = a.toString(2).split('').filter(function(e){return e === '1'}).length;\n\
    \    var b_ones = b.toString(2).split('').filter(function(e){return e === '1'}).length;\n\
    \    if(a_ones === b_ones){\n      return a - b;\n    }\n    return a_ones - b_ones;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if(aOnes === null){\n\
    \      aOnes = 0;\n    } else {\n      aOnes = aOnes.length;\n    }\n    if(bOnes\
    \ === null){\n      bOnes = 0;\n    } else {\n      bOnes = bOnes.length;\n  \
    \  }\n    if(aOnes === bOnes){\n      return a - b;\n    } else {\n      return\
    \ aOnes - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5fxnl11m.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmp5fxnl11m.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmp5fxnl11m.js:9:14)\n    at test (/tmp/tmp5fxnl11m.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5fxnl11m.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let arr2 = [];\n    let arr3\
    \ = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7\
    \ = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let\
    \ arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n\
    \    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18\
    \ = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let\
    \ arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n\
    \    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29\
    \ = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let\
    \ arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n\
    \    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40\
    \ = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let\
    \ arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n\
    \    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51\
    \ = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let\
    \ arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n\
    \    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62\
    \ = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let\
    \ arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n\
    \    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73\
    \ = [];\n    let arr74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdgrbfgc5.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n    var bOnes = bBin.match(/1/g)\
    \ ? bBin.match(/1/g).length : 0;\n    if(aOnes > bOnes){\n      return 1;\n  \
    \  } else if(aOnes < bOnes){\n      return -1;\n    } else {\n      return a -\
    \ b;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2).split('').filter(function(n){ return n === '1'}).length;\n\
    \    var bBin = b.toString(2).split('').filter(function(n){ return n === '1'}).length;\n\
    \    if(aBin === bBin){\n      return a - b;\n    }\n    return aBin - bBin;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if(aOnes === null){\n\
    \      aOnes = 0;\n    } else {\n      aOnes = aOnes.length;\n    }\n    if(bOnes\
    \ === null){\n      bOnes = 0;\n    } else {\n      bOnes = bOnes.length;\n  \
    \  }\n    if(aOnes === bOnes){\n      return a - b;\n    } else {\n      return\
    \ aOnes - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n\
    \        let aOnes = aBinary.split('').filter(x => x === '1').length;\n      \
    \  let bOnes = bBinary.split('').filter(x => x === '1').length;\n        if (aOnes\
    \ === bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n        let bOnes\
    \ = bBin.match(/1/g) ? bBin.match(/1/g).length : 0;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var bBin = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(aBin === bBin){\n      return a - b;\n    }\n    return aBin - bBin;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8vs9snbb.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmp8vs9snbb.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmp8vs9snbb.js:9:14)\n    at test (/tmp/tmp8vs9snbb.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8vs9snbb.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x === '1'}).length;\n\
    \    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(el => el === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(el => el === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        } else {\n            return aOnes - bOnes;\n\
    \        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    var b1 = b.toString(2).split('').filter(function(x){return x == 1}).length;\n\
    \    if(a1 > b1){\n      return 1;\n    }\n    else if(a1 < b1){\n      return\
    \ -1;\n    }\n    else{\n      return a - b;\n    }\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null)\
    \ {\n      return a - b;\n    } else if (a.toString(2).match(/1/g) === null) {\n\
    \      return -1;\n    } else if (b.toString(2).match(/1/g) === null) {\n    \
    \  return 1;\n    } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length)\
    \ {\n      return a - b;\n    } else {\n      return a.toString(2).match(/1/g).length\
    \ - b.toString(2).match(/1/g).length;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        let bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sorted = arr.sort(function(a,\
    \ b){\n    let aBinary = a.toString(2);\n    let bBinary = b.toString(2);\n  \
    \  let aOnes = aBinary.split('').filter(function(x){return x == 1}).length;\n\
    \    let bOnes = bBinary.split('').filter(function(x){return x == 1}).length;\n\
    \    if(aOnes == bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('1').length - 1;\n        let bOnes = bBin.split('1').length\
    \ - 1;\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n\
    \        return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var arr1 = arr.slice();\n  \
    \  var arr2 = arr.slice();\n    arr1.sort(function(a, b){\n        return a -\
    \ b;\n    });\n    arr2.sort(function(a, b){\n        return (a.toString(2).match(/1/g)\
    \ || []).length - (b.toString(2).match(/1/g) || []).length;\n    });\n    return\
    \ arr2.map(function(a){\n        return arr1.indexOf(a);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 3, 4, 2 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpwtkliqvz.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwtkliqvz.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 3,\
    \ 4, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBinary = a.toString(2);\n    var bBinary = b.toString(2);\n    var aOnes\
    \ = aBinary.match(/1/g);\n    var bOnes = bBinary.match(/1/g);\n    if(aOnes &&\
    \ bOnes){\n      if(aOnes.length === bOnes.length){\n        return a - b;\n \
    \     }\n      return aOnes.length - bOnes.length;\n    }\n    if(aOnes){\n  \
    \    return -1;\n    }\n    if(bOnes){\n      return 1;\n    }\n    return a -\
    \ b;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmpj7tao6a3.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7tao6a3.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let sorted = arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        } else {\n            return aOnes\
    \ - bOnes;\n        }\n    });\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n        let bOnes\
    \ = bBin.match(/1/g) ? bBin.match(/1/g).length : 0;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(x => x === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        }\n        return aOnes - bOnes;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi3yvqg9q.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpi3yvqg9q.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpi3yvqg9q.js:9:14)\n    at test (/tmp/tmpi3yvqg9q.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpi3yvqg9q.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).match(/1/g).length;\n    var bOnes = b.toString(2).match(/1/g).length;\n\
    \    if(aOnes === bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr8sdfc9y.js:10\n    var aOnes = a.toString(2).match(/1/g).length;\n\
    \                                         ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpr8sdfc9y.js:10:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpr8sdfc9y.js:9:14)\n    at test (/tmp/tmpr8sdfc9y.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpr8sdfc9y.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('1').length - 1;\n    var bOnes = bBin.split('1').length - 1;\n \
    \   if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes\
    \ - bOnes;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        const aOnes = a.toString(2).split('').filter(x => x === '1').length;\n\
    \        const bOnes = b.toString(2).split('').filter(x => x === '1').length;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        }\n      \
    \  return aOnes - bOnes;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    if (a.toString(2).match(/1/g) === null){\n      a = 0;\n    } else {\n  \
    \    a = a.toString(2).match(/1/g).length;\n    }\n    if (b.toString(2).match(/1/g)\
    \ === null){\n      b = 0;\n    } else {\n      b = b.toString(2).match(/1/g).length;\n\
    \    }\n    if (a === b){\n      return a - b;\n    } else {\n      return a -\
    \ b;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 5, 3 ]\n\nshould equal\n\n[ 1,\
    \ 2, 4, 3, 5 ]\n    at test (/tmp/tmpcv8u7ovz.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcv8u7ovz.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    return (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length || a - b;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.split('').filter(function(num){\n      return num === '1';\n    }).length;\n\
    \    var bOnes = bBin.split('').filter(function(num){\n      return num === '1';\n\
    \    }).length;\n    if(aOnes === bOnes){\n      return a - b;\n    }\n    return\
    \ aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2).split('').filter(x => x === '1').length;\n \
    \       let bBin = b.toString(2).split('').filter(x => x === '1').length;\n  \
    \      if (aBin === bBin) {\n            return a - b;\n        } else {\n   \
    \         return aBin - bBin;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a1 = a.toString(2).split('1').length - 1;\n    var b1 = b.toString(2).split('1').length\
    \ - 1;\n    if(a1 === b1){\n      return a - b;\n    }\n    return a1 - b1;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var arr1 = [];\n  var arr2 = [];\n\
    \  var arr3 = [];\n  var arr4 = [];\n  var arr5 = [];\n  var arr6 = [];\n  var\
    \ arr7 = [];\n  var arr8 = [];\n  var arr9 = [];\n  var arr10 = [];\n  var arr11\
    \ = [];\n  var arr12 = [];\n  var arr13 = [];\n  var arr14 = [];\n  var arr15\
    \ = [];\n  var arr16 = [];\n  var arr17 = [];\n  var arr18 = [];\n  var arr19\
    \ = [];\n  var arr20 = [];\n  var arr21 = [];\n  var arr22 = [];\n  var arr23\
    \ = [];\n  var arr24 = [];\n  var arr25 = [];\n  var arr26 = [];\n  var arr27\
    \ = [];\n  var arr28 = [];\n  var arr29 = [];\n  var arr30 = [];\n  var arr31\
    \ = [];\n  var arr32 = [];\n  var arr33 = [];\n  var arr34 = [];\n  var arr35\
    \ = [];\n  var arr36 = [];\n  var arr37 = [];\n  var arr38 = [];\n  var arr39\
    \ = [];\n  var arr40 = [];\n  var arr41 = [];\n  var arr42 = [];\n  var arr43\
    \ = [];\n  var arr44 = [];\n  var arr45 = [];\n  var arr46 = [];\n  var arr47\
    \ = [];\n  var arr48 = [];\n  var arr49 = [];\n  var arr50 = [];\n  var arr51\
    \ = [];\n  var arr52 = [];\n  var arr53 = [];\n  var arr54 = [];\n  var arr55\
    \ = [];\n  var arr56 = [];\n  var arr57 = [];\n  var arr58 = [];\n  var arr59\
    \ = [];\n  var arr60 = [];\n  var arr61 = [];\n  var arr62 = [];\n  var arr63\
    \ = [];\n  var arr64 = [];\n  var arr65 = [];\n  var arr66 = [];\n  var arr67\
    \ = [];\n  var arr68 = [];\n  var arr69 = [];\n  var arr70 = [];\n  var arr71\
    \ = [];\n  var arr72 = [];\n  var arr73 = [];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbtdri1_c.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var arr1 = arr.slice();\n  var\
    \ arr2 = arr.slice();\n  var arr3 = arr.slice();\n  var arr4 = arr.slice();\n\
    \  var arr5 = arr.slice();\n  var arr6 = arr.slice();\n  var arr7 = arr.slice();\n\
    \  var arr8 = arr.slice();\n  var arr9 = arr.slice();\n  var arr10 = arr.slice();\n\
    \  var arr11 = arr.slice();\n  var arr12 = arr.slice();\n  var arr13 = arr.slice();\n\
    \  var arr14 = arr.slice();\n  var arr15 = arr.slice();\n  var arr16 = arr.slice();\n\
    \  var arr17 = arr.slice();\n  var arr18 = arr.slice();\n  var arr19 = arr.slice();\n\
    \  var arr20 = arr.slice();\n  var arr21 = arr.slice();\n  var arr22 = arr.slice();\n\
    \  var arr23 = arr.slice();\n  var arr24 = arr.slice();\n  var arr25 = arr.slice();\n\
    \  var arr26 = arr.slice();\n  var arr27 = arr.slice();\n  var arr28 = arr.slice();\n\
    \  var arr29 = arr.slice();\n  var arr30 = arr.slice();\n  var arr31 = arr.slice();\n\
    \  var arr32 = arr.slice();\n  var arr33 = arr.slice();\n  var arr34 = arr.slice();\n\
    \  var arr35 = arr.slice();\n  var arr36 = arr.slice();\n  var arr37 = arr.slice();\n\
    \  var arr38 = arr.slice();\n  var arr39 = arr.slice();\n  var arr40 = arr.slice();\n\
    \  var arr41 = arr.slice();\n  var arr42 = arr.slice();\n  var arr43 = arr.slice();\n\
    \  var arr44 = arr.slice();\n  var arr45 = arr.slice();\n  var arr46 = arr.slice();\n\
    \  var arr47 = arr.slice();\n  var arr48 = arr.slice();\n  var arr49 = arr.slice();\n\
    \  var arr50 = arr.slice();\n  var arr51 = arr.slice();\n \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpakknytzs.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if(aOnes && bOnes){\n\
    \      if(aOnes.length === bOnes.length){\n        return a - b;\n      }\n  \
    \    return aOnes.length - bOnes.length;\n    }\n    if(aOnes){\n      return\
    \ -1;\n    }\n    if(bOnes){\n      return 1;\n    }\n    return a - b;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmp7ndru6l4.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7ndru6l4.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let a_ones = a.toString(2).split('').filter(x => x == '1').length;\n\
    \        let b_ones = b.toString(2).split('').filter(x => x == '1').length;\n\
    \        if (a_ones == b_ones) {\n            return a - b;\n        }\n     \
    \   return a_ones - b_ones;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n\
    \        let aOnes = aBinary.split('').filter(x => x === '1').length;\n      \
    \  let bOnes = bBinary.split('').filter(x => x === '1').length;\n        if (aOnes\
    \ === bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let arr1 = arr.map(function(x){\n\
    \    return x.toString(2);\n  });\n  let arr2 = arr1.map(function(x){\n    return\
    \ x.split('').filter(function(y){\n      return y == 1;\n    }).length;\n  });\n\
    \  let arr3 = arr2.map(function(x,i){\n    return [x,arr[i]];\n  });\n  let arr4\
    \ = arr3.sort(function(a,b){\n    if(a[0] == b[0]){\n      return a[1] - b[1];\n\
    \    }\n    return a[0] - b[0];\n  });\n  return arr4.map(function(x){\n    return\
    \ x[1];\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var a_ones = a.toString(2).match(/1/g).length;\n    var b_ones = b.toString(2).match(/1/g).length;\n\
    \    if (a_ones === b_ones) {\n      return a - b;\n    } else {\n      return\
    \ a_ones - b_ones;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgq2gvwxz.js:10\n    var a_ones = a.toString(2).match(/1/g).length;\n\
    \                                          ^\n\nTypeError: Cannot read property\
    \ 'length' of null\n    at /tmp/tmpgq2gvwxz.js:10:43\n    at Array.sort (<anonymous>)\n\
    \    at sort_array (/tmp/tmpgq2gvwxz.js:9:14)\n    at test (/tmp/tmpgq2gvwxz.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpgq2gvwxz.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n\
    \        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n      \
    \  let aOnes = aBin.split('').filter(e => e === '1').length;\n        let bOnes\
    \ = bBin.split('').filter(e => e === '1').length;\n        if (aOnes === bOnes)\
    \ {\n            return a - b;\n        } else {\n            return aOnes - bOnes;\n\
    \        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let ones = [];\n    let zeros\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        let binary = arr[i].toString(2);\n\
    \        let count = 0;\n        for(let j = 0; j < binary.length; j++){\n   \
    \         if(binary[j] === '1'){\n                count++;\n            }\n  \
    \      }\n        if(count === 0){\n            zeros.push(arr[i]);\n        }\n\
    \        else{\n            ones.push([arr[i], count]);\n        }\n    }\n  \
    \  ones.sort(function(a, b){\n        if(a[1] === b[1]){\n            return a[0]\
    \ - b[0];\n        }\n        else{\n            return a[1] - b[1];\n       \
    \ }\n    });\n    let result = [];\n    for(let i = 0; i < ones.length; i++){\n\
    \        result.push(ones[i][0]);\n    }\n    for(let i = 0; i < zeros.length;\
    \ i++){\n        result.push(zeros[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 4, 3, 0 ]\n\nshould equal\n\n[ 0,\
    \ 1, 2, 4, 3 ]\n    at test (/tmp/tmpd8bw5jem.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd8bw5jem.js:59:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 0 ],\n  expected: [ 0, 1, 2, 4, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g);\n    var bOnes = bBin.match(/1/g);\n    if (aOnes && bOnes)\
    \ {\n      if (aOnes.length === bOnes.length) {\n        return a - b;\n     \
    \ } else {\n        return aOnes.length - bOnes.length;\n      }\n    } else if\
    \ (aOnes) {\n      return 1;\n    } else if (bOnes) {\n      return -1;\n    }\
    \ else {\n      return a - b;\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aBin = a.toString(2);\n    var bBin = b.toString(2);\n    var aOnes =\
    \ aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n    var bOnes = bBin.match(/1/g)\
    \ ? bBin.match(/1/g).length : 0;\n    if(aOnes === bOnes){\n      return a - b;\n\
    \    }\n    return aOnes - bOnes;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b){\n\
    \    var aOnes = a.toString(2).split('').filter(function(x){return x == '1'}).length;\n\
    \    var bOnes = b.toString(2).split('').filter(function(x){return x == '1'}).length;\n\
    \    if(aOnes == bOnes){\n      return a - b;\n    }\n    return aOnes - bOnes;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
