{
  "name": "mbpp_229_re_arrange_array",
  "language": "r",
  "prompt": "# Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nre_arrange_array <- function(arr, n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- re_arrange_array\n    if(!identical(candidate(c(-1, 2, -3, 4, 5, 6, -7, 8, 9), 9), list(-1, -3, -7, 4, 5, 6, 2, 8, 9))){quit('no', 1)}\n    if(!identical(candidate(c(12, -14, -26, 13, 15), 5), list(-14, -26, 12, 13, 15))){quit('no', 1)}\n    if(!identical(candidate(c(10, 24, 36, -42, -39, -78, 85), 7), list(-42, -39, -78, 10, 24, 36, 85))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  # Write your code here\n  if (n < 1) {\n    return(arr)\n  }\n  if (n > length(arr)) {\n    n <- length(arr)\n  }\n  neg <- arr[1:n][arr[1:n] < 0]\n  pos <- arr[1:n][arr[1:n] >= 0]\n  return(c(neg, pos))\n}\n",
    "\n  # Write your code here\n  negative_index <- which(arr[1:n] < 0)\n  positive_index <- which(arr[1:n] >= 0)\n  arr[negative_index] <- arr[negative_index][order(negative_index)]\n  arr[positive_index] <- arr[positive_index][order(positive_index)]\n  return(arr)\n}\n",
    "\n  # Write your code here\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr > 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  if (n > length(arr)) {\n    return(arr)\n  }\n  else {\n    neg_arr <- arr[1:n][arr[1:n] < 0]\n    pos_arr <- arr[1:n][arr[1:n] >= 0]\n    return(c(neg_arr, pos_arr, arr[(n+1):length(arr)]))\n  }\n}\n",
    "\n  # Write your code here\n  # Return the re-arranged vector\n  # Return the re-arranged vector\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  if (n < 1 || n > length(arr)) {\n    return(arr)\n  }\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  if (length(neg_arr) > n) {\n    neg_arr <- neg_arr[1:n]\n  }\n  if (length(pos_arr) > n) {\n    pos_arr <- pos_arr[1:n]\n  }\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  # Write your code here\n  neg <- arr[arr < 0]\n  pos <- arr[arr >= 0]\n  c(neg, pos)\n}\n",
    "\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr > 0]\n  neg_arr <- neg_arr[1:n]\n  pos_arr <- pos_arr[1:n]\n  return(c(neg_arr, pos_arr))\n}\n\nre_arrange_array(c(-1, 2, -3, 4, -5, 6, -7, 8), 4)\n",
    "\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  c(neg_arr, pos_arr)\n}\n",
    "\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  if (n < 1) {\n    return(arr)\n  }\n  if (n > length(arr)) {\n    n <- length(arr)\n  }\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  neg_arr <- neg_arr[1:n]\n  pos_arr <- pos_arr[1:n]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n\nre_arrange_array(c(-1, -2, -3, 4, 5, 6), 3)\n",
    "\n  # Write your code here\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  # Write your code here\n  neg_arr <- arr[1:n][arr[1:n] < 0]\n  pos_arr <- arr[1:n][arr[1:n] >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  # Write your code here\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  # Write your code here\n  # arr[1:n] <- arr[order(arr[1:n])]\n  # return(arr)\n  # arr[1:n] <- arr[order(arr[1:n], decreasing = TRUE)]\n  # return(arr)\n  arr[1:n] <- arr[order(arr[1:n], decreasing = TRUE, na.last = NA)]\n  return(arr)\n}\n",
    "\n  neg_arr <- arr[arr < 0]\n  pos_arr <- arr[arr >= 0]\n  return(c(neg_arr, pos_arr))\n}\n",
    "\n  if (n > length(arr)) {\n    stop(\"n is greater than length of array\")\n  }\n  arr[1:n][arr[1:n] < 0] <- arr[1:n][arr[1:n] < 0]\n  arr[1:n][arr[1:n] > 0] <- arr[1:n][arr[1:n] > 0]\n  return(arr)\n}\n",
    "\n  if (n > length(arr)) {\n    stop(\"n is greater than the length of the array\")\n  }\n  if (n < 0) {\n    stop(\"n is negative\")\n  }\n  if (n == 0) {\n    return(arr)\n  }\n  if (n == 1) {\n    if (arr[1] < 0) {\n      return(arr)\n    } else {\n      return(c(arr[2], arr[1]))\n    }\n  }\n  if (arr[n] < 0) {\n    return(c(arr[1:n], arr[(n+1):length(arr)]))\n  } else {\n    return(c(re_arrange_array(arr[1:(n-1)], n-1), arr[n], arr[(n+1):length(arr)]))\n  }\n}\n\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 5)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 6)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 2)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 1)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 0)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), -1)\nre_arrange_array(c(-1, 2, -3, 4, -5, 6), 7)\n"
  ]
}