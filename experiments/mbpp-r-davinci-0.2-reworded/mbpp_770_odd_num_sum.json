{
  "name": "mbpp_770_odd_num_sum",
  "language": "r",
  "prompt": "# Write a rthon function to find the sum of fourth power of first n odd natural numbers.\nodd_num_sum <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- odd_num_sum\n    if(!identical(candidate(2), 82)){quit('no', 1)}\n    if(!identical(candidate(3), 707)){quit('no', 1)}\n    if(!identical(candidate(4), 3108)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2 * i - 1) ^ 4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    if (i %% 2 == 1) {\n      sum <- sum + i^4\n    }\n  }\n  return(sum)\n}\n\nodd_num_sum(10)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    if (i %% 2 == 1) {\n      sum <- sum + i^4\n    }\n  }\n  return(sum)\n}\n\nodd_num_sum(10)\n",
    "\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + (2*i-1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n    sum <- 0\n    for (i in 1:n) {\n        if (i %% 2 != 0) {\n            sum <- sum + i^4\n        }\n    }\n    return(sum)\n}\n\nodd_num_sum(10)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + (2*i - 1)^4\n    }\n    return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    if (i %% 2 != 0) {\n      sum <- sum + i^4\n    }\n  }\n  return(sum)\n}\n",
    "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + (2*i-1)^4\n    }\n    return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum = 0\n  for(i in 1:n) {\n    sum = sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum <- 0\n  for (i in seq(1, n, by = 2)) {\n    sum <- sum + i^4\n  }\n  return(sum)\n}\n\nodd_num_sum(10)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i - 1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n",
    "\n  sum = 0\n  for (i in seq(1, n, by = 2)) {\n    sum = sum + i^4\n  }\n  return(sum)\n}\n\nodd_num_sum(10)\n",
    "\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + (2*i-1)^4\n  }\n  return(sum)\n}\n\nodd_num_sum(5)\n"
  ]
}