{
  "name": "mbpp_442_positive_count",
  "language": "r",
  "prompt": "# Write a function to find the ration of positive numbers in a vector of integers.\npositive_count <- function(nums) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- positive_count\n    if(!identical(candidate(c(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)), 0.54)){quit('no', 1)}\n    if(!identical(candidate(c(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)), 0.69)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, -6, -9, 11, -12, 14, -5, 17)), 0.56)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n",
    "\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  # Write your code here\n  positive_count <- sum(nums > 0)\n  return(positive_count / length(nums))\n}\n",
    "\n    pos_count <- 0\n    for (num in nums) {\n        if (num > 0) {\n            pos_count <- pos_count + 1\n        }\n    }\n    return(pos_count / length(nums))\n}\n",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n\npositive_count(c(1, 2, 3, 4, 5))\npositive_count(c(1, -2, 3, -4, 5))\npositive_count(c(-1, -2, -3, -4, -5))\n",
    "\n  sum(nums > 0) / length(nums)\n}\n",
    "\n  sum(nums > 0) / length(nums)\n}\n",
    "\n  # Write your code here\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  pos_count <- sum(nums > 0)\n  pos_ratio <- pos_count / length(nums)\n  return(pos_ratio)\n}\n",
    "\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  # Count the number of positive numbers.\n  positives <- sum(nums > 0)\n  # Count the number of negative numbers.\n  negatives <- sum(nums < 0)\n  # Return the ratio of positive numbers to negative numbers.\n  return(positives / negatives)\n}\n",
    "\n  nums <- as.numeric(nums)\n  positive_count <- sum(nums > 0)\n  total_count <- length(nums)\n  return(positive_count / total_count)\n}\n",
    "\n  # Write your code here\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  count <- 0\n  for (i in nums) {\n    if (i > 0) {\n      count <- count + 1\n    }\n  }\n  return(count / length(nums))\n}\n\npositive_count(c(1, 2, 3, 4, 5))\n",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n",
    "\n  pos_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      pos_count <- pos_count + 1\n    }\n  }\n  return(pos_count / length(nums))\n}\n",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n",
    "\n  count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      count <- count + 1\n    }\n  }\n  return(count / length(nums))\n}\n",
    "\n    count <- 0\n    for (num in nums) {\n        if (num > 0) {\n            count <- count + 1\n        }\n    }\n    return(count / length(nums))\n}\n",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n"
  ]
}