{
  "name": "mbpp_279_is_num_decagonal",
  "language": "r",
  "prompt": "# Write a function to find the nth decagonal number.\nis_num_decagonal <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- is_num_decagonal\n    if(!identical(candidate(3), 27)){quit('no', 1)}\n    if(!identical(candidate(7), 175)){quit('no', 1)}\n    if(!identical(candidate(10), 370)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # n = (3 * x^2 - x) / 2\n  # 3 * x^2 - x - 2 * n = 0\n  # x = (1 + sqrt(1 + 24 * n)) / 6\n  x <- (1 + sqrt(1 + 24 * n)) / 6\n  if (x == trunc(x)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (n %% 10 == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\nnth_decagonal <- function(n) {\n    if (n == 1) {\n        return(10)\n    } else {\n        return(10 + (n - 1) * 10)\n    }\n}\n",
    "\n  # Find the nearest root of the decagonal equation\n  # x = (sqrt(4*n^2 + 4*n + 1) + 1)/2\n  # The equation is quadratic, so we can use the quadratic formula.\n  # x = (-b +- sqrt(b^2 - 4ac))/2a\n  # x = (-1 +- sqrt(1 - 4*1*(1-n)))/2\n  # x = (-1 +- sqrt(1 - 4 + 4n))/2\n  # x = (-1 +- sqrt(4n - 3))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n-3/4)))/2\n  # x = (-1 +- sqrt(4(n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  is_num_decagonal(n - 10)\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  is_num_decagonal(n - 10)\n}\n",
    "\n  is_num_triangular(n) && is_num_pentagonal(n)\n}\n",
    "\n  # Check if n is a decagonal number\n  # A decagonal number is a figurate number that extends the concept of\n  # triangular and square numbers to the decagon (a ten-sided polygon).\n  # The nth decagonal number is given by the formula:\n  # Dn = 4n^2 - 3n\n  # https://en.wikipedia.org/wiki/Decagonal_number\n  #\n  # Args:\n  #   n: The number to check\n  #\n  # Returns:\n  #   True if n is a decagonal number, False otherwise\n  #\n  # Examples:\n  #   is_num_decagonal(1) -> True\n  #   is_num_decagonal(2) -> False\n  #   is_num_decagonal(6) -> True\n  #   is_num_decagonal(10) -> False\n  #   is_num_decagonal(15) -> True\n  #   is_num_decagonal(16) -> False\n  #   is_num_decagonal(21) -> True\n  #   is_num_decagonal(22) -> False\n  #   is_num_decagonal(26) -> True\n  #   is_num_decagonal(30) -> False\n  #   is_num_decagonal(35) -> True\n  #   is_num_decagonal(36) -> False\n  #   is_num_decagonal(40) -> True\n  #   is_num_decagonal(41) -> False\n  #   is_num_decagonal(45) -> True\n  #   is_num_decagonal(46) -> False\n  #   is_num_decagonal(50) -> True\n  #   is_num_decagonal(51) -> False\n  #   is_num_decagonal(55) -> True\n  #   is_num_decagonal(56) -> False\n  #   is_num_decagonal(60) -> True\n  #   is_num_decagonal(61) -> False\n  #   is_num_decagonal(65) -> True\n  #   is_num_decagonal(66) -> False\n  #   is_num_dec",
    "\n  x <- sqrt(1 + 4 * 2 * n)\n  return(x == floor(x) && x %% 4 == 1)\n}\n\nnth_decagonal <- function(n) {\n  return(n * (3 * n - 1) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  if (is_num_decagonal(n - 1)) {\n    return(TRUE)\n  }\n  if (is_num_decagonal(n - 10)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  if (is_num_decagonal(n - 1)) {\n    return(TRUE)\n  }\n  if (is_num_decagonal(n - 10)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n    # Check if n is a decagonal number\n    # Return TRUE if n is a decagonal number, FALSE otherwise\n    # A decagonal number is a figurate number that extends the concept of\n    # triangular and square numbers to the decagon (a ten-sided polygon).\n    # The nth decagonal number is given by the formula:\n    # Dn = 4n^2 - 3n\n    # https://en.wikipedia.org/wiki/Decagonal_number\n    #\n    # Example:\n    # is_num_decagonal(10)\n    # [1] TRUE\n    #\n    # is_num_decagonal(11)\n    # [1] FALSE\n    #\n    # is_num_decagonal(12)\n    # [1] TRUE\n    #\n    # is_num_decagonal(13)\n    # [1] FALSE\n    #\n    # is_num_decagonal(14)\n    # [1] FALSE\n    #\n    # is_num_decagonal(15)\n    # [1] TRUE\n    #\n    # is_num_decagonal(16)\n    # [1] FALSE\n    #\n    # is_num_decagonal(17)\n    # [1] FALSE\n    #\n    # is_num_decagonal(18)\n    # [1] TRUE\n    #\n    # is_num_decagonal(19)\n    # [1] FALSE\n    #\n    # is_num_decagonal(20)\n    # [1] FALSE\n    #\n    # is_num_decagonal(21)\n    # [1] TRUE\n    #\n    # is_num_decagonal(22)\n    # [1] FALSE\n    #\n    # is_num_decagonal(23)\n    # [1] FALSE\n    #\n    # is_num_decagonal(24)\n    # [1] TRUE\n    #\n    # is_num_decagonal(25)\n    # [1] FALSE\n    #\n    # is_num_decagonal(26)\n    # [1] FALSE\n    #\n    # is_num_decagonal(27)\n    # [1] TRUE\n    #",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  return(is_num_decagonal(n - 10))\n}\n",
    "\n  is_num_triangular(n) && is_num_pentagonal(n)\n}\n",
    "\n  return(is_num_pentagonal(n) && is_num_triangular(n))\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  is_num_triangular(n)\n}\n",
    "\n  return(is_num_pentagonal(n) && is_num_triangular(n))\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  is_num_triangular(n)\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  nth_decagonal <- function(n) {\n    return(n * (3 * n - 2))\n  }\n  nth_decagonal(n)\n}\n\nis_num_decagonal(1)\nis_num_decagonal(2)\nis_num_decagonal(3)\nis_num_decagonal(4)\nis_num_decagonal(5)\nis_num_decagonal(6)\nis_num_decagonal(7)\nis_num_decagonal(8)\nis_num_decagonal(9)\nis_num_decagonal(10)\nis_num_decagonal(11)\nis_num_decagonal(12)\nis_num_decagonal(13)\nis_num_decagonal(14)\nis_num_decagonal(15)\nis_num_decagonal(16)\nis_num_decagonal(17)\nis_num_decagonal(18)\nis_num_decagonal(19)\nis_num_decagonal(20)\nis_num_decagonal(21)\nis_num_decagonal(22)\nis_num_decagonal(23)\nis_num_decagonal(24)\nis_num_decagonal(25)\nis_num_decagonal(26)\nis_num_decagonal(27)\nis_num_decagonal(28)\nis_num_decagonal(29)\nis_num_decagonal(30)\nis_num_decagonal(31)\nis_num_decagonal(32)\nis_num_decagonal(33)\nis_num_decagonal(34)\nis_num_decagonal(35)\nis_num_decagonal(36)\nis_num_decagonal(37)\nis_num_decagonal(38)\nis_num_decagonal(39)\nis_num_decagonal(40)\nis_num_decagonal(41)\nis_num_decagonal(42)\nis_num_decagonal(43)\n"
  ]
}