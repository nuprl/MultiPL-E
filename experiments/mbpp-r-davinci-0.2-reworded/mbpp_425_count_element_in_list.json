{
  "name": "mbpp_425_count_element_in_list",
  "language": "r",
  "prompt": "# Write a function to count the number of sublists containing a particular element.\ncount_element_in_list <- function(list1, x) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- count_element_in_list\n    if(!identical(candidate(list(list(1, 3), list(5, 7), list(1, 11), list(1, 15, 7)), 1), 3)){quit('no', 1)}\n    if(!identical(candidate(list(list('A', 'B'), list('A', 'C'), list('A', 'D', 'E'), list('B', 'C', 'D')), 'A'), 3)){quit('no', 1)}\n    if(!identical(candidate(list(list('A', 'B'), list('A', 'C'), list('A', 'D', 'E'), list('B', 'C', 'D')), 'E'), 1)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    count <- 0\n    for (i in 1:length(list1)) {\n        if (x %in% list1[[i]]) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n    count <- 0\n    for (i in 1:length(list1)) {\n        if (x %in% list1[[i]]) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n    count <- 0\n    for (i in 1:length(list1)) {\n        if (x %in% list1[[i]]) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  count\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n    count <- 0\n    for (i in list1) {\n        if (x %in% i) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  count\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n",
    "\n  count <- 0\n  for (i in 1:length(list1)) {\n    if (x %in% list1[[i]]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_element_in_list(list1, 3)\n"
  ]
}