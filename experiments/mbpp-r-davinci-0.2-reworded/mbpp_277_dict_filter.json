{
  "name": "mbpp_277_dict_filter",
  "language": "r",
  "prompt": "# Write a function that takes in a named list and integer n and filters the named list to only include entries with values greater than or equal to n.\ndict_filter <- function(dict, n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- dict_filter\n    if(!identical(candidate(list('Cierra Vega' = 175, 'Alden Cantrell' = 180, 'Kierra Gentry' = 165, 'Pierre Cox' = 190), 170), list('Cierra Vega' = 175, 'Alden Cantrell' = 180, 'Pierre Cox' = 190))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = 175, 'Alden Cantrell' = 180, 'Kierra Gentry' = 165, 'Pierre Cox' = 190), 180), list('Alden Cantrell' = 180, 'Pierre Cox' = 190))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = 175, 'Alden Cantrell' = 180, 'Kierra Gentry' = 165, 'Pierre Cox' = 190), 190), list('Pierre Cox' = 190))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  return(dict[dict >= n])\n}\n",
    "\n  return(dict[dict >= n])\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n    dict[dict >= n]\n}\n",
    "\n  # Your code here\n  return(dict[dict >= n])\n}\n",
    "\n  dict[sapply(dict, function(x) x >= n)]\n}\n",
    "\n  dict[sapply(dict, function(x) x >= n)]\n}\n",
    "\n  # Your code here\n  return(dict[dict >= n])\n}\n",
    "\n  # YOUR CODE HERE\n  dict[dict >= n]\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n    dict[dict >= n]\n}\n",
    "\n    dict[dict >= n]\n}\n",
    "\n    for (i in 1:length(dict)) {\n        if (dict[[i]] < n) {\n            dict[[i]] <- NULL\n        }\n    }\n    dict\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n  for (key in names(dict)) {\n    if (dict[[key]] < n) {\n      dict[[key]] <- NULL\n    }\n  }\n  return(dict)\n}\n",
    "\n    return(dict[dict >= n])\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n  dict[dict >= n]\n}\n",
    "\n  return(dict[dict >= n])\n}\n"
  ]
}