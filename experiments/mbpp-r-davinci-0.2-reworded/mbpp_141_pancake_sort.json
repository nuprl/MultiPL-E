{
  "name": "mbpp_141_pancake_sort",
  "language": "r",
  "prompt": "# Write a function to sort a list of elements.\npancake_sort <- function(nums) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- pancake_sort\n    if(!identical(candidate(c(15, 79, 25, 38, 69)), list(15, 25, 38, 69, 79))){quit('no', 1)}\n    if(!identical(candidate(c(98, 12, 54, 36, 85)), list(12, 36, 54, 85, 98))){quit('no', 1)}\n    if(!identical(candidate(c(41, 42, 32, 12, 23)), list(12, 23, 32, 41, 42))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums <- flip(nums, max_index)\n    }\n    nums <- flip(nums, length(nums) - i + 1)\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums[1:max_index] <- rev(nums[1:max_index])\n    }\n    nums[1:length(nums) - i + 1] <- rev(nums[1:length(nums) - i + 1])\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums <- c(reverse(nums[1:max_index]), nums[(max_index + 1):length(nums)])\n    }\n    nums <- reverse(nums)\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums <- c(nums[max_index:length(nums)], nums[1:(max_index - 1)])\n    }\n    nums <- c(nums[length(nums) - i + 1:length(nums)], nums[1:(length(nums) - i)])\n  }\n  return(nums)\n}\n",
    "\n  n <- length(nums)\n  for (i in seq(n, 2, -1)) {\n    max_index <- which.max(nums[1:i])\n    if (max_index != i) {\n      nums <- flip(nums, max_index)\n      nums <- flip(nums, i)\n    }\n  }\n  return(nums)\n}\n\nflip <- function(nums, k) {\n  return(c(rev(nums[1:k]), nums[(k+1):length(nums)]))\n}\n\npancake_sort(c(3, 2, 4, 1))\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums)-i+1])\n    if (max_index != 1) {\n      nums <- c(nums[max_index:length(nums)], nums[1:(max_index-1)])\n    }\n    nums <- c(nums[length(nums)-i+1:length(nums)], nums[1:length(nums)-i])\n  }\n  return(nums)\n}\n",
    "\n  for (i in seq_along(nums)) {\n    # Find the index of the maximum element in the unsorted part of the list.\n    max_index <- which.max(nums[i:length(nums)]) + i - 1\n    # If the maximum element is not already at the end of the unsorted part of the list,\n    # flip the list from the beginning to the maximum element.\n    if (max_index != length(nums)) {\n      nums[1:max_index] <- rev(nums[1:max_index])\n    }\n    # Flip the list from the beginning to the end of the unsorted part of the list.\n    nums[1:i] <- rev(nums[1:i])\n  }\n  nums\n}\n",
    "\n  for (i in 1:length(nums)) {\n    nums <- flip(nums, which.max(nums[1:length(nums)-i+1]))\n  }\n  return(nums)\n}\n",
    "\n  # Write your code here\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...\n  # ...",
    "\n  for (i in seq_along(nums)) {\n    # Find the index of the largest element.\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    # Flip the largest element to the front.\n    nums <- flip(nums, max_index)\n    # Flip the largest element to the back.\n    nums <- flip(nums, length(nums) - i + 1)\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums <- c(rev(nums[1:max_index]), nums[(max_index + 1):length(nums)])\n    }\n    nums <- rev(nums)\n  }\n  nums\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums <- flip(nums, max_index)\n    }\n    nums <- flip(nums, length(nums) - i + 1)\n  }\n  return(nums)\n}\n\nflip <- function(nums, k) {\n  return(c(rev(nums[1:k]), nums[(k + 1):length(nums)]))\n}\n",
    "\n  for (i in 1:length(nums)) {\n    # Find the index of the maximum element in the unsorted part of the list.\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    # Flip the list from the beginning to the maximum element.\n    nums[1:max_index] <- rev(nums[1:max_index])\n    # Flip the list from the beginning to the last unsorted element.\n    nums[1:length(nums) - i + 1] <- rev(nums[1:length(nums) - i + 1])\n  }\n  nums\n}\n",
    "\n  for (i in seq_along(nums)) {\n    # Find the index of the maximum element in the unsorted part of the list.\n    max_index <- which.max(nums[i:length(nums)]) + i - 1\n    # Flip the list from the beginning to the maximum element.\n    nums <- flip(nums, max_index)\n    # Flip the list from the beginning to the current element.\n    nums <- flip(nums, i)\n  }\n  nums\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums) - i + 1])\n    if (max_index != 1) {\n      nums[1:max_index] <- rev(nums[1:max_index])\n    }\n    nums[1:length(nums) - i + 1] <- rev(nums[1:length(nums) - i + 1])\n  }\n  return(nums)\n}\n",
    "\n  for (i in seq_along(nums)) {\n    # Find the index of the maximum element in the unsorted part of the list.\n    max_index <- which.max(nums[i:length(nums)]) + i - 1\n    # Flip the list from the beginning to the maximum element.\n    nums <- flip(nums, max_index)\n    # Flip the list from the beginning to the ith element.\n    nums <- flip(nums, i)\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    nums <- flip(nums, which.max(nums[1:length(nums)-i+1]))\n  }\n  return(nums)\n}\n",
    "\n  for (i in 1:length(nums)) {\n    max_index <- which.max(nums[1:length(nums)-i+1])\n    if (max_index != 1) {\n      nums <- flip(nums, max_index)\n    }\n    nums <- flip(nums, length(nums)-i+1)\n  }\n  return(nums)\n}\n",
    "\n  for (i in seq_len(length(nums))) {\n    max_index <- which.max(nums[1:i])\n    if (max_index != i) {\n      nums[1:max_index] <- rev(nums[1:max_index])\n      nums[1:i] <- rev(nums[1:i])\n    }\n  }\n  nums\n}\n",
    "\n  for (i in seq_along(nums)) {\n    max_index <- which.max(nums[1:i])\n    if (max_index != i) {\n      nums <- flip(nums, max_index)\n      nums <- flip(nums, i)\n    }\n  }\n  nums\n}\n\nflip <- function(nums, k) {\n  nums[1:k] <- rev(nums[1:k])\n  nums\n}\n"
  ]
}