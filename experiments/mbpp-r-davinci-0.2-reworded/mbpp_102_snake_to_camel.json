{
  "name": "mbpp_102_snake_to_camel",
  "language": "r",
  "prompt": "# Write a function to convert a snake case string to camel case string.\nsnake_to_camel <- function(word) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- snake_to_camel\n    if(!identical(candidate('python_program'), 'PythonProgram')){quit('no', 1)}\n    if(!identical(candidate('python_language'), 'PythonLanguage')){quit('no', 1)}\n    if(!identical(candidate('programming_language'), 'ProgrammingLanguage')){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"(\\\\w)([A-Z])\",",
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([A-Z])\", \" \\\\1\", word)\n  word <- gsub(\"^ \", \"\", word)\n  word <- gsub(\"^([a-z])\", \"\\\\1\", word)\n  word <- gsub(\" ([a-z])\", \"\\\\1\", word)\n  word <- gsub(\" ([A-Z])\", \"\\\\1\", word)\n  word <- gsub(\"([A-Z])\", \"\\\\1\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  word <- gsub(\"([a-z])([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1 \\\\2\", word)\n ",
    "\n  # Split the word into a vector of strings\n  word <- strsplit(word, \"\")[[1]]\n  # Find the indices of the underscores\n  indices <- which(word == \"_\")\n  # Replace the underscores with nothing\n  word[indices] <- \"\"\n  # Capitalize the letters following the underscores\n  word[indices + 1] <- toupper(word[indices + 1])\n  # Return the word as a string\n  return(paste(word, collapse = \"\"))\n}\n",
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"(\\\\w)([A-Z])\", \"\\\\1 \\\\2\", word)\n  word <- gsub(\"\\\\b([a-z])\", \"\\\\U\\\\1\", word, perl = TRUE)\n  word <- gsub(\" \", \"\", word)\n  return(word)\n}\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"^([a-z])\", \"\\\\U\\\\1\", word)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of strings\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  word_split <- paste0(toupper(substring(word_split, 1, 1)), substring(word_split, 2, nchar(word_split)))\n  # Return the word as a string\n  return(paste0(word_split, collapse = \"\"))\n}\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"_\", \"\", word)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of strings.\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word.\n  word_split <- toupper(substr(word_split, 1, 1)) * substr(word_split, 2, nchar(word_split))\n  # Return the words as a single string.\n  return(paste(word_split, collapse = \"\"))\n}\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"^([a-z])\", \"\\\\U\\\\1\", word)\n  return(word)\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[-1] <- toupper(word[-1])\n  word <- paste(word, collapse = \"\")\n  return(word)\n}\n",
    "\n  # Split the word by \"_\"\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  word_split <- toupper(substr(word_split, 1, 1)) + tolower(substr(word_split, 2, nchar(word_split)))\n  # Concatenate the words\n  paste(word_split, collapse = \"\")\n}\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"_\", \"\", word)\n  return(word)\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  # Split the word into a vector of words\n  words <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  words <- toupper(substr(words, 1, 1)) * substr(words, 2, nchar(words))\n  # Return the words joined together\n  return(paste(words, collapse = \"\"))\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[-1] <- toupper(word[-1])\n  word <- paste(word, collapse = \"\")\n  word\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"_\", \"\", word)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of strings\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  word_split <- toupper(substring(word_split, 1, 1)) * substring(word_split, 2)\n  # Paste the words together\n  paste(word_split, collapse = \"\")\n}\n",
    "\n  # Split the word by \"_\" and then remove the first element.\n  word <- word %>% strsplit(\"_\") %>% unlist() %>% tail(., -1)\n  # Capitalize the first letter of each word.\n  word <- word %>% str_to_title()\n  # Paste the word together.\n  word <- word %>% paste(collapse = \"\")\n  return(word)\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[2:length(word)] <- toupper(word[2:length(word)])\n  word <- paste(word, collapse = \"\")\n  return(word)\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[2:length(word)] <- toupper(word[2:length(word)])\n  return(paste(word, collapse = \"\"))\n}\n",
    "\n  word <- gsub(\"_([[:lower:]])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"_([[:upper:]])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"_\", \"\", word)\n  return(word)\n}\n\nsnake_to_camel(\"hello_world\")\nsnake_to_camel(\"hello_world_again\")\nsnake_to_camel(\"hello_world_again_and_again\")\n"
  ]
}