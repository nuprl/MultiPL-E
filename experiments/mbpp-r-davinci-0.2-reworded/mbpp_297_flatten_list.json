{
  "name": "mbpp_297_flatten_list",
  "language": "r",
  "prompt": "# Write a function to flatten a given nested list structure.\nflatten_list <- function(list1) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- flatten_list\n    if(!identical(candidate(list(0, 10, list(20, 30), 40, 50, list(60, 70, 80), list(90, 100, 110, 120))), list(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120))){quit('no', 1)}\n    if(!identical(candidate(list(list(10, 20), list(40), list(30, 56, 25), list(10, 20), list(33), list(40))), list(10, 20, 40, 30, 56, 25, 10, 20, 33, 40))){quit('no', 1)}\n    if(!identical(candidate(list(list(1, 2, 3), list(4, 5, 6), list(10, 11, 12), list(7, 8, 9))), list(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (is.null(list1)) {\n    return(NULL)\n  }\n  if (is.atomic(list1)) {\n    return(list1)\n  }\n  if (length(list1) == 0) {\n    return(list())\n  }\n  if (length(list1) == 1) {\n    return(flatten_list(list1[[1]]))\n  }\n  return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n}\n",
    "\n  if (length(list1) == 0) {\n    return(NULL)\n  }\n  if (is.list(list1[[1]])) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n  return(c(list1[[1]], flatten_list(list1[-1])))\n}\n",
    "\n  if (length(list1) == 0) {\n    return(list())\n  } else if (is.list(list1[[1]])) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  } else {\n    return(c(list1[[1]], flatten_list(list1[-1])))\n  }\n}\n",
    "\n    if (!is.list(list1)) {\n        return(list1)\n    }\n    else {\n        return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n    }\n}\n",
    "\n  if (is.null(list1)) return(NULL)\n  if (is.atomic(list1)) return(list1)\n  if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n  }\n}\n",
    "\n  if(!is.list(list1)) {\n    return(list1)\n  }\n  else {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n  }\n}\n\nflatten_list(list1)\n",
    "\n  if (length(list1) == 0) {\n    return(NULL)\n  }\n  if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n  return(list1)\n}\n",
    "\n  if (is.null(list1)) {\n    return(NULL)\n  } else if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n  } else {\n    return(list1)\n  }\n}\n",
    "\n    if (is.atomic(list1)) {\n        return(list1)\n    }\n    else {\n        return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n    }\n}\n",
    "\n  if (length(list1) == 0) {\n    return(list())\n  }\n  if (is.atomic(list1)) {\n    return(list(list1))\n  }\n  if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n}\n\nflatten_list(list(1, list(2, 3), 4))\n",
    "\n  if (length(list1) == 0) {\n    return(list1)\n  } else if (is.atomic(list1)) {\n    return(list1)\n  } else {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n}\n",
    "\n    if(is.null(list1)) {\n        return(NULL)\n    } else if(is.atomic(list1)) {\n        return(list1)\n    } else {\n        return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n    }\n}\n\nflatten_list(list(1, list(2, list(3, 4))))\n",
    "\n  if (length(list1) == 0) {\n    return(list1)\n  }\n  if (is.atomic(list1[[1]])) {\n    return(c(list1[[1]], flatten_list(list1[-1])))\n  } else {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n}\n",
    "\n  if (length(list1) == 0) {\n    return(list())\n  }\n  if (is.atomic(list1)) {\n    return(list1)\n  }\n  if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n}\n",
    "\n  if (length(list1) == 0) {\n    return(list())\n  }\n  if (is.atomic(list1)) {\n    return(list(list1))\n  }\n  if (is.list(list1)) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n}\n",
    "\n  # Your code here\n  return(list1)\n}\n",
    "\n  if (length(list1) == 0) {\n    return(NULL)\n  }\n  if (is.list(list1[[1]])) {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n  }\n  return(c(list1[[1]], flatten_list(list1[-1])))\n}\n",
    "\n  if (is.null(list1)) {\n    return(NULL)\n  }\n  if (is.atomic(list1)) {\n    return(list1)\n  }\n  if (length(list1) == 0) {\n    return(NULL)\n  }\n  if (length(list1) == 1) {\n    return(flatten_list(list1[[1]]))\n  }\n  return(c(flatten_list(list1[[1]]), flatten_list(list1[-1])))\n}\n\nflatten_list(list(1, list(2, 3), 4, list(list(5, 6))))\n",
    "\n  if(is.atomic(list1)) {\n    return(list1)\n  } else {\n    return(unlist(lapply(list1, flatten_list)))\n  }\n}\n",
    "\n  if(!is.list(list1)) {\n    return(list1)\n  }\n  else {\n    return(c(flatten_list(list1[[1]]), flatten_list(list1[[2]])))\n  }\n}\n"
  ]
}