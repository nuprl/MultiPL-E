{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "r",
  "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nmax_sum_increasing_subseq <- function(a, n, index, k) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- max_sum_increasing_subseq\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 4, 6), 11)){quit('no', 1)}\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 2, 5), 7)){quit('no', 1)}\n    if(!identical(candidate(c(11, 15, 19, 21, 26, 28, 31), 7, 2, 4), 71)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n               max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 0) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  if (k > index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(0)\n  }\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (k == 2) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) return(0)\n  if (index == k) return(a[index])\n  if (index < k) return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nmax_sum_increasing_subseq(a, n, 0, k)\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k == index) {\n        return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n             max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  else {\n    if (k == 1) {\n      return(a[index])\n    }\n    else {\n      max_sum <- 0\n      for (i in 1:index) {\n        if (a[i] < a[k]) {\n          max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k-1) + a[k])\n        }\n      }\n      return(max_sum)\n    }\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k-1) + a[k])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + a[index - 1]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, index - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n  }\n  if (a[index] > a[k-1]) {\n    return(max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index, k-1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index-1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index-1) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k)\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  max_sum <- 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, index) + a[index]\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 0:(index - 1)) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  # include kth element\n  include_k <- a[k] + max_sum_increasing_subseq(a, n, index, k + 1)\n  # exclude kth element\n  exclude_k <- max_sum_increasing_subseq(a, n, index, k + 1)\n  return(max(include_k, exclude_k))\n}\n",
    "\n  if (index == 1) {\n    return(a[index] + a[k])\n  }\n  else {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k]))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  \n  if (k == n) {\n    return(0)\n  }\n  \n  if (k < index) {\n    return(0)\n  }\n  \n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k),\n            max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == n - 1) {\n    return(a[n])\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k == n - 1) {\n    return(a[n])\n  }\n  if (a[k] > a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1),\n               a[k] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  \n  if (a[index] < a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (k == 2) {\n    return(max(a[1], a[2]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:(index-1)) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, index)\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k == 1) {\n    return(max(a[k], a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index, k - 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, i) + a[k])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == n) {\n    return(a[n])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k),\n             a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:(index-1)) {\n    if (a[i] < a[index]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, index) + a[index])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum = 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if(index == 0) {\n    return(a[1])\n  }\n  if(index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if(k == 0) {\n    return(a[1])\n  }\n  if(k == 1) {\n    return(max(a[1], a[2]))\n  }\n  if(k == 2) {\n    return(max(a[1], a[2], a[1] + a[3]))\n  }\n  if(k == 3) {\n    return(max(a[1], a[2], a[1] + a[3], a[2] + a[4]))\n  }\n  if(k == 4) {\n    return(max(a[1], a[2], a[1] + a[3], a[2] + a[4], a[1] + a[3] + a[5]))\n  }\n  if(k == 5) {\n    return(max(a[1], a[2], a[1] + a[3], a[2] + a[4], a[1] + a[3] + a[5], a[2] + a[4] + a[6]))\n  }\n  if(k == 6) {\n    return(max(a[1], a[2], a[1] + a[3], a[2] + a[4], a[1] + a[3] + a[5], a[2] + a[4] + a[6], a[1] + a[3] + a[5] + a[7]))\n  }\n  if(k == 7) {\n    return(max(a[1], a[2], a[1] + a[3], a[2] + a[4], a[1] + a[3] + a[5], a[2] + a[4] + a[6], a[1] + a[3] + a[5] + a[7], a[2] + a[4] + a[6] + a[8]))\n  }\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[k] + max_sum_increasing_subseq(a, n, index - 1, index)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (index == 1) {\n        if (k == 1) {\n            return(a[1])\n        } else {\n            return(a[2])\n        }\n    }\n    if (index == k) {\n        return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k == 0) {\n        return(a[index])\n    }\n    if (k == 1) {\n        return(a[index])\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    if (k < index) {\n        return(0)\n    }\n    max_sum <- 0\n    for (i in 1:index) {\n        sum <- max_sum_increasing_subseq(a, n, i, k-i) + a[index]\n        if (sum > max_sum) {\n            max_sum <- sum\n        }\n    }\n    return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == 1) {\n    if (k == 1) {\n      return(a[1])\n    } else {\n      return(0)\n    }\n  }\n  \n  if (k == 1) {\n    return(max(a[1], max_sum_increasing_subseq(a, n, index - 1, 1)))\n  }\n  \n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (index == 1) {\n        return(max(a[1], a[2]))\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k+1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    if (k == 1) {\n      return(a[1])\n    } else {\n      return(a[2])\n    }\n  }\n  if (k == 1) {\n    return(max(a[1], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1),\n             max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k == index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n\nmax_sum_increasing_subseq(a, n, 1, 3)\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index-1, k) + a[index]))\n  }\n  return(max_sum_increasing_subseq(a, n, index-1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k == index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k == 1) {\n    return(a[k])\n  }\n  if (k == 2) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 3) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 4) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 5) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 6) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 7) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 8) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 9) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 10) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 11) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 12) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 13) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 14) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 15) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 16) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 17) {\n    return(a[k] + a[k-1])\n  }\n  if (k == 18) {\n    return(a[k] + a",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[k] > a[index]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n  }\n  return(max_sum_increasing_subseq(a, n, index, k + 1))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n\na <- c(1, 101, 2, 3, 100, 4, 5)\nn <- length(a)\nk <- 4\nmax_sum_increasing_subseq(a, n, 1, k)\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n\nmax_sum_increasing_subseq(a, n, 1, k)\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k > n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, index + 1))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (k == n) {\n    return(a[k])\n  }\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(max(a[k], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n\na <- c(1, 101, 2, 3, 100, 4, 5)\nn <- length(a)\nmax_sum_increasing_subseq(a, n, 1, 1)\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, k, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 1) {\n        return(a[index])\n    }\n    if (k == 1) {\n        return(a[index])\n    }\n    max_sum <- 0\n    for (i in 1:(index - 1)) {\n        if (a[i] < a[index]) {\n            sum <- max_sum_increasing_subseq(a, n, i, k - 1) + a[index]\n            if (sum > max_sum) {\n                max_sum <- sum\n            }\n        }\n    }\n    return(max_sum)\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[0])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 1) {\n        return(a[index])\n    }\n    max_sum <- 0\n    for (i in 1:index) {\n        if (a[i] < a[k]) {\n            sum <- max_sum_increasing_subseq(a, n, i, k)\n            if (sum > max_sum) {\n                max_sum <- sum\n            }\n        }\n    }\n    return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n             a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 0) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 1) {\n    return(max(a[1], a[2], a[1] + a[2]))\n  }\n  if (k == 2) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[3]))\n  }\n  if (k == 3) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[3], a[1] + a[2] + a[3]))\n  }\n  if (k == 4) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[3], a[1] + a[2] + a[3], a[1] + a[2] + a[3] + a[4]))\n  }\n  if (k == 5) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[3], a[1] + a[2] + a[3], a[1] + a[2] + a[3] + a[4], a[1] + a[2] + a[3] + a[4] + a[5]))\n  }\n  if (k == 6) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[3], a[1] + a[2] + a[3], a[1] + a[2] + a[3] + a[4], a[1] + a[2] + a[3] + a[4] + a[5], a[1] + a[2] + a[3] + a[4]",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (index == 0) {\n    return(max(a[k], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), \n             a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n             a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    if (k == 1) {\n      return(a[index])\n    } else {\n      return(a[index] + a[index - 1])\n    }\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  if (k > index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index)))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, index + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (a[index] < a[k]) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[0])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k == 0) {\n        return(a[index])\n    }\n    if (k == 1) {\n        return(a[index] + a[0])\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, index - 1), max_sum_increasing_subseq(a, n, index - 1, index) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k > n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(0)\n  }\n  sum1 <- max_sum_increasing_subseq(a, n, index - 1, k)\n  sum2 <- max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]\n  return(max(sum1, sum2))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  if (a[k] > a[index]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == n - 1) {\n    return(a[n])\n  }\n  if (k == n) {\n    return(a[n])\n  }\n  if (k == n - 1) {\n    return(a[n - 1])\n  }\n  if (a[k] < a[index]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index - 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    if (k == 2) {\n      return(max(a[1], a[2]))\n    } else {\n      return(a[1])\n    }\n  }\n  if (k == index + 1) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  # Write your code here\n  if(index == n) {\n    return(0)\n  }\n  if(a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k),\n             max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    if (k == 1) {\n      return(max(a[1], a[2]))\n    } else {\n      return(a[1])\n    }\n  }\n  if (k == 1) {\n    return(max(a[1], max_sum_increasing_subseq(a, n, index - 1, 1)))\n  }\n  if (k == index + 1) {\n    return(max(a[index + 1], max_sum_increasing_subseq(a, n, index - 1, index)))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 2) {\n    return(max(a[1], a[2], a[1] + a[2]))\n  }\n  if (k > 2) {\n    return(max(a[1], a[2], a[1] + a[2], a[1] + a[k]))\n  }\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k <= index) {\n        return(0)\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(0)\n  }\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (k == 2) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 3) {\n    return(max(a[1], a[2], a[3]))\n  }\n  if (k == 4) {\n    return(max(a[1], a[2], a[3], a[4]))\n  }\n  if (k == 5) {\n    return(max(a[1], a[2], a[3], a[4], a[5]))\n  }\n  if (k == 6) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6]))\n  }\n  if (k == 7) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6], a[7]))\n  }\n  if (k == 8) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]))\n  }\n  if (k == 9) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]))\n  }\n  if (k == 10) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]))\n  }\n  if (k == 11) {\n    return(max(a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]))\n  }\n  if",
    "\n  if (index == n) {\n    return(0)\n  }\n  \n  # If k is not given, then we can choose any element after index i.\n  if (missing(k)) {\n    k <- n\n  }\n  \n  # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n  max_sum <- max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n  \n  # If k is not given, then we can choose any element after index i.\n  if (missing(k)) {\n    for (i in index + 1:n) {\n      max_sum <- max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, i))\n    }\n  }\n  \n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  \n  if (k == 0) {\n    return(0)\n  }\n  \n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    if (k == index) {\n      return(a[index])\n    } else {\n      return(a[index - 1])\n    }\n  }\n  if (k == index) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k < 0) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  # Write your code here\n  if(index == 1) {\n    return(a[1])\n  }\n  if(index == k) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for(i in 1:index-1) {\n    if(a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k)\n      if(sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if(index == n) {\n    return(0)\n  }\n  if(k == n) {\n    return(0)\n  }\n  if(a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[0])\n  }\n  if (k == 2) {\n    return(a[index] + a[1])\n  }\n  if (k == 3) {\n    return(a[index] + a[2])\n  }\n  if (k == 4) {\n    return(a[index] + a[3])\n  }\n  if (k == 5) {\n    return(a[index] + a[4])\n  }\n  if (k == 6) {\n    return(a[index] + a[5])\n  }\n  if (k == 7) {\n    return(a[index] + a[6])\n  }\n  if (k == 8) {\n    return(a[index] + a[7])\n  }\n  if (k == 9) {\n    return(a[index] + a[8])\n  }\n  if (k == 10) {\n    return(a[index] + a[9])\n  }\n  if (k == 11) {\n    return(a[index] + a[10])\n  }\n  if (k == 12) {\n    return(a[index] + a[11])\n  }\n  if (k == 13) {\n    return(a[index] + a[12])\n  }\n  if (k == 14) {\n    return(a[index] + a[13])\n  }\n  if (k == 15) {\n    return(a[index] + a[14])\n  }\n  if (k == 16) {\n    return(a[index] + a[15])\n  }\n  if (k == 17) {\n    return(a[index] + a[16])\n  }\n  if (k == 18) {\n    return(a[index] + a[17])\n  }\n  if (k == 19) {\n    return(a[index] + a[18",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k == index) {\n    return(a[k])\n  }\n  if (a[k] > a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[k]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k - 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (k == 0) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[k])\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  if (index == k) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if(index == n) {\n    return(0)\n  }\n  if(k == n) {\n    return(0)\n  }\n  if(a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n\nmax_sum_increasing_subseq(a, n, 1, 1)\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (k == 2) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 3) {\n    return(max(a[1] + a[3], a[2]))\n  }\n  if (k == 4) {\n    return(max(a[1] + a[4], a[2] + a[4], a[3]))\n  }\n  if (k == 5) {\n    return(max(a[1] + a[5], a[2] + a[5], a[3] + a[5], a[4]))\n  }\n  if (k == 6) {\n    return(max(a[1] + a[6], a[2] + a[6], a[3] + a[6], a[4] + a[6], a[5]))\n  }\n  if (k == 7) {\n    return(max(a[1] + a[7], a[2] + a[7], a[3] + a[7], a[4] + a[7], a[5] + a[7], a[6]))\n  }\n  if (k == 8) {\n    return(max(a[1] + a[8], a[2] + a[8], a[3] + a[8], a[4] + a[8], a[5] + a[8], a[6] + a[8], a[7]))\n  }\n  if (k == 9) {\n    return(max(a[1] + a[9], a[2] + a[9], a[3] + a[9], a[4] + a[9], a[5] + a[9], a[6] + a[9], a[7] + a[9], a[8]))\n  }\n  if (k == 10) {\n    return(",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n"
  ]
}