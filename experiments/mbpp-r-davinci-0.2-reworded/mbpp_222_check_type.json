{
  "name": "mbpp_222_check_type",
  "language": "r",
  "prompt": "# Write a function to check if all the elements in list have same data type or not.\ncheck_type <- function(test_tuple) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- check_type\n    if(!identical(candidate(list(5, 6, 7, 3, 5, 6)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list(1, 2, '4')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list(3, 2, 1, 4, 5)), TRUE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    print(\"All elements are of same type\")\n  } else {\n    print(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if(all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  type <- typeof(test_tuple[1])\n  for(i in test_tuple) {\n    if(typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4))\ncheck_type(c(1,2,3,4.0))\ncheck_type(c(1,2,3,\"4\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\ncheck_type(c(1, 2, 3, 4, 5.0))\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements in list have same data type\")\n  } else {\n    return(\"All elements in list do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n",
    "\n    if (length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"Elements are of different type\")\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\n",
    "\n  test_tuple_type <- typeof(test_tuple)\n  for (i in test_tuple) {\n    if (typeof(i) != test_tuple_type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(test_tuple) == 0) {\n    return(FALSE)\n  }\n  type <- typeof(test_tuple[1])\n  for(i in 2:length(test_tuple)) {\n    if(typeof(test_tuple[i]) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, typeof))) == 1) {\n    print(\"All elements are of same type\")\n  } else {\n    print(\"All elements are not of same type\")\n  }\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  test_tuple <- as.data.frame(test_tuple)\n  test_tuple <- sapply(test_tuple, class)\n  if (length(unique(test_tuple)) == 1) {\n    return(\"True\")\n  } else {\n    return(\"False\")\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5,\"a\"))\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  type_list <- c()\n  for(i in 1:length(test_tuple)) {\n    type_list <- c(type_list, typeof(test_tuple[[i]]))\n  }\n  if(length(unique(type_list)) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  test_tuple_type <- typeof(test_tuple)\n  for (i in test_tuple) {\n    if (typeof(i) != test_tuple_type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple,typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0,\"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(test_tuple) == 0)\n    return(FALSE)\n  else {\n    for(i in 1:length(test_tuple)) {\n      if(typeof(test_tuple[i]) != typeof(test_tuple[1]))\n        return(FALSE)\n    }\n    return(TRUE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE, NULL))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE, NULL, list(1,2,3)))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE, NULL, list(1,2,3), function(x) x))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE, NULL, list(1,2,3), function(x) x, 1+2i))\ncheck_type(c(1,2,3,4,5.0, \"a\", TRUE, FALSE, NULL, list(1,2,3), function(x) x, 1+2i, 1+2i))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n    if (length(unique(sapply(test_tuple, class))) == 1) {\n        return(\"All elements have same data type\")\n    } else {\n        return(\"All elements do not have same data type\")\n    }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"Elements are of different type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  type_list <- lapply(test_tuple, typeof)\n  if (length(unique(type_list)) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(\"All elements are of same type\")\n    } else {\n        return(\"All elements are not of same type\")\n    }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    print(\"All elements have same data type\")\n  } else {\n    print(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n    if (length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\ncheck_type(c(1, 2, 3, 4, TRUE))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n    type_list <- c()\n    for (i in 1:length(test_tuple)) {\n        type_list <- c(type_list, typeof(test_tuple[[i]]))\n    }\n    if (length(unique(type_list)) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,\"5\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements in list have same data type\")\n  } else {\n    return(\"All elements in list do not have same data type\")\n  }\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(test_tuple) == 0) {\n    return(FALSE)\n  }\n  type <- typeof(test_tuple[1])\n  for (i in test_tuple) {\n    if (typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5,6))\ncheck_type(c(1,2,3,4,5,6, \"a\"))\n",
    "\n    for(i in 1:length(test_tuple)) {\n        if(class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\ncheck_type(c(1, 2, 3, 4, 5.0))\ncheck_type(c(1, 2, 3, 4, TRUE))\ncheck_type(c(1, 2, 3, 4, FALSE))\ncheck_type(c(1, 2, 3, 4, NULL))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncheck_type(c(1,2,3,4))\ncheck_type(c(1,2,3,4.5))\ncheck_type(c(1,2,3,4.5, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(test_tuple) == 0) {\n    return(TRUE)\n  }\n  if (length(test_tuple) == 1) {\n    return(TRUE)\n  }\n  if (typeof(test_tuple[1]) == typeof(test_tuple[2])) {\n    return(check_type(test_tuple[-1]))\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, 5, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    type <- typeof(test_tuple[1])\n    for (i in test_tuple) {\n        if (typeof(i) != type) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3))\ncheck_type(c(1,2,3, \"a\"))\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[i]) != class(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1,2,3,4))\ncheck_type(c(1,2,3,\"a\"))\n",
    "\n    if (length(unique(sapply(test_tuple, class))) == 1) {\n        return(\"All elements have same data type\")\n    } else {\n        return(\"All elements do not have same data type\")\n    }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"True\")\n  } else {\n    return(\"False\")\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(test_tuple) == 0) {\n    return(TRUE)\n  }\n  if(length(test_tuple) == 1) {\n    return(TRUE)\n  }\n  if(typeof(test_tuple[1]) == typeof(test_tuple[2])) {\n    return(check_type(test_tuple[-1]))\n  }\n  else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0,6))\ncheck_type(c(1,2,3,4,5.0,6,7))\ncheck_type(c(1,2,3,4,5.0,6,7,8))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11,12))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11,12,13))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11,12,13,14))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11,12,13,14,15))\ncheck_type(c(1,2,3,4,5.0,6,7,8,9,10,11,12,13,14,15,16))\ncheck_type(c(1,2,3,4,5.0,6",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"Elements are of different type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n    type <- typeof(test_tuple[[1]])\n    for (i in 2:length(test_tuple)) {\n        if (typeof(test_tuple[[i]]) != type) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  type <- typeof(test_tuple[1])\n  for (i in test_tuple) {\n    if (typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"True\")\n  } else {\n    return(\"False\")\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5, \"a\"))\ncheck_type(c(1,2,3,4,5, \"a\", TRUE))\n",
    "\n    test_tuple <- unlist(test_tuple)\n    test_tuple <- as.data.frame(test_tuple)\n    test_tuple <- sapply(test_tuple, class)\n    if(length(unique(test_tuple)) == 1) {\n        return(TRUE)\n    }\n    else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n    for(i in 1:length(test_tuple)) {\n        if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n    if(length(unique(sapply(test_tuple,class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"True\")\n  } else {\n    return(\"False\")\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n    test_tuple <- unlist(test_tuple)\n    if(all(sapply(test_tuple, class) == class(test_tuple[[1]]))) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"five\"))\ncheck_type(c(1, 2, 3, 4, TRUE))\n",
    "\n  type <- typeof(test_tuple[1])\n  for (i in 2:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n    test_tuple <- unlist(test_tuple)\n    test_tuple <- as.data.frame(test_tuple)\n    test_tuple <- sapply(test_tuple, class)\n    test_tuple <- as.data.frame(test_tuple)\n    test_tuple <- test_tuple[1,]\n    test_tuple <- as.character(test_tuple)\n    test_tuple <- test_tuple[1]\n    return(test_tuple)\n}\n\ncheck_type(test_tuple)\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.5))\ncheck_type(c(1,2,3,4,5.5, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4))\ncheck_type(c(1, 2, 3, \"4\"))\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\ncheck_type(c(1, 2, 3, 4, 5.0))\ncheck_type(c(1, 2, 3, 4, TRUE))\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  type <- typeof(test_tuple[1])\n  for (i in test_tuple) {\n    if (typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.5))\ncheck_type(c(1,2,3,4,\"5\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, 3.0))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Check if all the elements in list have same data type or not.\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements in list have same data type\")\n  } else {\n    return(\"All elements in list do not have same data type\")\n  }\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[i]) != class(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[i]) != class(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_tuple <- c(1, 2, 3, 4, 5)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, \"5\")\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\")\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8, 9)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8, 9, 10)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8, 9, 10, 11)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8, 9, 10, 11, 12)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2, 3, 4, 5.0, 6.0, \"7\", 8, 9, 10, 11, 12, 13)\ncheck_type(test_tuple)\n\ntest_tuple <- c(1, 2",
    "\n  test_tuple <- unlist(test_tuple)\n  if(all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements in list have same data type\")\n  } else {\n    return(\"All elements in list do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n    for(i in 1:length(test_tuple)) {\n        if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n    if (length(unique(sapply(test_tuple, class))) == 1) {\n        print(\"All elements are of same type\")\n    } else {\n        print(\"All elements are not of same type\")\n    }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n    all_same <- TRUE\n    for (i in 1:(length(test_tuple)-1)) {\n        if (typeof(test_tuple[i]) != typeof(test_tuple[i+1])) {\n            all_same <- FALSE\n            break\n        }\n    }\n    return(all_same)\n}\n\ncheck_type(c(1,2,3,4,5,6))\ncheck_type(c(1,2,3,4,5,6, \"a\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5,6))\ncheck_type(c(1,2,3,4,5,6, \"a\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n    for (i in test_tuple) {\n        if (class(i) != class(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if(all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, 3, \"a\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  type <- typeof(test_tuple[1])\n  for (i in test_tuple) {\n    if (typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5,\"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[i]) != class(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5,\"a\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    if (length(test_tuple) == 0) {\n        return(TRUE)\n    }\n    else {\n        if (is.numeric(test_tuple[1])) {\n            if (is.numeric(test_tuple[2:length(test_tuple)])) {\n                return(TRUE)\n            }\n            else {\n                return(FALSE)\n            }\n        }\n        else if (is.character(test_tuple[1])) {\n            if (is.character(test_tuple[2:length(test_tuple)])) {\n                return(TRUE)\n            }\n            else {\n                return(FALSE)\n            }\n        }\n        else if (is.logical(test_tuple[1])) {\n            if (is.logical(test_tuple[2:length(test_tuple)])) {\n                return(TRUE)\n            }\n            else {\n                return(FALSE)\n            }\n        }\n        else {\n            return(FALSE)\n        }\n    }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, 3.0))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  test_tuple <- unlist(test_tuple)\n  test_tuple <- typeof(test_tuple)\n  if(length(unique(test_tuple)) == 1) {\n    print(\"All elements are of same type\")\n  } else {\n    print(\"All elements are not of same type\")\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements are of same type\")\n  } else {\n    return(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    if (length(test_tuple) == 0) {\n        return(TRUE)\n    }\n    if (length(test_tuple) == 1) {\n        return(TRUE)\n    }\n    if (typeof(test_tuple[1]) == typeof(test_tuple[2])) {\n        return(check_type(test_tuple[-1]))\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\ncheck_type(c(1, 2, 3.0))\ncheck_type(c(1, 2, 3.0, \"4\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    type <- typeof(test_tuple[[1]])\n    for(i in test_tuple) {\n        if(typeof(i) != type) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, \"5\"))\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3, 4, 5))\ncheck_type(c(1, 2, 3, 4, 5, \"a\"))\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3, 4))\ncheck_type(c(1, 2, 3, 4, \"a\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n    if (length(unique(sapply(test_tuple, typeof))) == 1) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, \"a\", 3))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\n",
    "\n  type <- typeof(test_tuple[1])\n  for (i in test_tuple) {\n    if (typeof(i) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4,5,6))\ncheck_type(c(1,2,3,4,5,6,\"a\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    print(\"All elements are of same type\")\n  } else {\n    print(\"All elements are not of same type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3))\ncheck_type(c(1,2,3.0))\ncheck_type(c(1,2,3.0, \"a\"))\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n    if(length(unique(sapply(test_tuple, class))) == 1) {\n        return(TRUE)\n    }\n    else {\n        return(FALSE)\n    }\n}\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if (all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, \"3\"))\ncheck_type(c(1, 2, 3.0))\ncheck_type(c(1, 2, 3.0, \"4\"))\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1, 2, 3))\ncheck_type(c(1, 2, 3, \"a\"))\n",
    "\n  for(i in 1:length(test_tuple)) {\n    if(typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(c(1,2,3,4))\ncheck_type(c(1,2,3,\"4\"))\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  test_tuple <- unlist(test_tuple)\n  if(all(sapply(test_tuple, class) == class(test_tuple[1]))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(c(1,2,3,4,5))\ncheck_type(c(1,2,3,4,5.0))\ncheck_type(c(1,2,3,4,5.0, \"a\"))\n",
    "\n  test_tuple <- unlist(test_tuple)\n  test_tuple <- sapply(test_tuple, class)\n  if (length(unique(test_tuple)) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n"
  ]
}