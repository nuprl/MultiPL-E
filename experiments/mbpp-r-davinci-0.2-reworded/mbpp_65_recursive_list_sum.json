{
  "name": "mbpp_65_recursive_list_sum",
  "language": "r",
  "prompt": "# Write a function to flatten a list and sum all of its elements.\nrecursive_list_sum <- function(data_list) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- recursive_list_sum\n    if(!identical(candidate(list(1, 2, list(3, 4), list(5, 6))), 21)){quit('no', 1)}\n    if(!identical(candidate(list(7, 10, list(15, 14), list(19, 41))), 106)){quit('no', 1)}\n    if(!identical(candidate(list(10, 20, list(30, 40), list(50, 60))), 210)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  # Your code here\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (!is.list(data_list)) {\n    return(data_list)\n  } else {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  }\n}\n\nrecursive_list_sum(list(1, list(2, 3), list(list(4, 5), 6)))\n",
    "\n  # If the list is empty, return 0\n  if (length(data_list) == 0) {\n    return(0)\n  }\n  # If the list is not empty, check if the first element is a list\n  if (is.list(data_list[[1]])) {\n    # If it is a list, return the sum of the first element and the sum of the rest of the list\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    # If it is not a list, return the sum of the first element and the sum of the rest of the list\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  # Your code here\n}\n",
    "\n    # If the list is empty, return 0\n    if (length(data_list) == 0) {\n        return(0)\n    }\n    # If the list contains only one element, return that element\n    if (length(data_list) == 1) {\n        return(data_list[[1]])\n    }\n    # If the list contains more than one element, return the sum of the first element and the sum of the rest of the list\n    else {\n        return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n    }\n}\n",
    "\n    # If the list is empty, return 0.\n    if (length(data_list) == 0) {\n        return(0)\n    }\n    # If the list is not empty, return the sum of the first element and the sum of the rest of the list.\n    else {\n        return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n    }\n}\n",
    "\n    # Base case: if the list is empty, return 0\n    if (length(data_list) == 0) {\n        return(0)\n    }\n    # Recursive case: if the list is not empty, sum the first element\n    # with the sum of the rest of the list\n    else {\n        return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n    }\n}\n",
    "\n  # Write your code here\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list)) {\n    return(recursive_list_sum(unlist(data_list)))\n  } else {\n    return(sum(data_list))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list)) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list)\n  }\n}\n",
    "\n  if (is.null(data_list)) {\n    return(0)\n  } else if (is.list(data_list)) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list)\n  }\n}\n\nrecursive_list_sum(list(1, 2, 3, list(4, 5, list(6, 7))))\n",
    "\n  # Your code here\n}\n",
    "\n  # Return 0 if the list is empty.\n  if (length(data_list) == 0) {\n    return(0)\n  }\n  # If the list is not empty, sum the first element and the rest of the list.\n  else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  } else if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  } else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n\nrecursive_list_sum(list(1, list(2, 3), list(list(4, 5), 6)))\n",
    "\n  if (length(data_list) == 0) {\n    return(0)\n  }\n  if (is.list(data_list[[1]])) {\n    return(recursive_list_sum(data_list[[1]]) + recursive_list_sum(data_list[-1]))\n  }\n  return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n}\n\nrecursive_list_sum(list(1, 2, list(3, 4, list(5, 6))))\n",
    "\n  # Base case: if the list is empty, return 0\n  if (length(data_list) == 0) {\n    return(0)\n  }\n  \n  # Recursive case: if the list is not empty, sum the first element\n  # with the sum of the rest of the list\n  else {\n    return(data_list[[1]] + recursive_list_sum(data_list[-1]))\n  }\n}\n"
  ]
}