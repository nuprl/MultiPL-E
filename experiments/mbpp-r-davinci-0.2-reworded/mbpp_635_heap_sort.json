{
  "name": "mbpp_635_heap_sort",
  "language": "r",
  "prompt": "# Write a function to sort the given list.\nheap_sort <- function(iterable) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- heap_sort\n    if(!identical(candidate(c(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)), list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))){quit('no', 1)}\n    if(!identical(candidate(c(25, 35, 22, 85, 14, 65, 75, 25, 58)), list(14, 22, 25, 25, 35, 58, 65, 75, 85))){quit('no', 1)}\n    if(!identical(candidate(c(7, 1, 9, 5)), list(1, 5, 7, 9))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  # Return the sorted list\n}",
    "\n  # Your code here\n  return(iterable)\n}\n",
    "\n  # Your code goes here\n  return(iterable)\n}\n",
    "\n    # Your code here\n    return(iterable)\n}\n",
    "\n  # Write your code here.\n  h <- as.heap(iterable)\n  return(heap_sort_helper(h))\n}\n\nheap_sort_helper <- function(h) {\n  if (is.heap(h)) {\n    if (length(h) == 0) {\n      return(c())\n    } else {\n      return(c(heap_sort_helper(delete_min(h)), h[1]))\n    }\n  } else {\n    return(h)\n  }\n}\n",
    "\n    # Your code here\n}\n",
    "\n  # Your code goes here\n  heap <- iterable\n  heapify(heap)\n  end <- length(heap)\n  while (end > 1) {\n    end <- end - 1\n    tmp <- heap[1]\n    heap[1] <- heap[end]\n    heap[end] <- tmp\n    sift_down(heap, 1, end)\n  }\n  return(heap)\n}\n",
    "\n    # Write your code here\n    n <- length(iterable)\n    for (i in floor(n/2):1) {\n        iterable <- heapify(iterable, n, i)\n    }\n    for (i in n:2) {\n        iterable[1] <- iterable[i]\n        iterable[i] <- iterable[1]\n        iterable <- heapify(iterable, i-1, 1)\n    }\n    return(iterable)\n}\n\nheapify <- function(iterable, n, i) {\n    l <- 2*i\n    r <- 2*i + 1\n    if (l <= n && iterable[l] > iterable[i]) {\n        largest <- l\n    } else {\n        largest <- i\n    }\n    if (r <= n && iterable[r] > iterable[largest]) {\n        largest <- r\n    }\n    if (largest != i) {\n        iterable[i] <- iterable[largest]\n        iterable[largest] <- iterable[i]\n        iterable <- heapify(iterable, n, largest)\n    }\n    return(iterable)\n}\n",
    "\n  # Write your code here.\n  n <- length(iterable)\n  for (i in floor(n/2):1) {\n    heapify(iterable, n, i)\n  }\n  for (i in n:2) {\n    iterable[1] <- iterable[i]\n    iterable[i] <- iterable[1]\n    heapify(iterable, i-1, 1)\n  }\n  iterable\n}\n\nheapify <- function(iterable, n, i) {\n  largest <- i\n  l <- 2*i\n  r <- 2*i + 1\n  if (l <= n && iterable[l] > iterable[largest]) {\n    largest <- l\n  }\n  if (r <= n && iterable[r] > iterable[largest]) {\n    largest <- r\n  }\n  if (largest != i) {\n    iterable[i] <- iterable[largest]\n    iterable[largest] <- iterable[i]\n    heapify(iterable, n, largest)\n  }\n}\n",
    "\n  # Write your code here.\n  # Return the sorted list.\n}",
    "\n  # Write your code here\n  # Return the sorted list\n  return(iterable)\n}\n",
    "\n    # Write your code here\n    n <- length(iterable)\n    for(i in floor(n/2):1){\n        heapify(iterable, n, i)\n    }\n    for(i in n:2){\n        iterable[1] <- iterable[i]\n        iterable[i] <- iterable[1]\n        heapify(iterable, i-1, 1)\n    }\n    return(iterable)\n}\n\nheapify <- function(iterable, n, i){\n    largest <- i\n    l <- 2*i\n    r <- 2*i + 1\n    if(l <= n && iterable[l] > iterable[largest]){\n        largest <- l\n    }\n    if(r <= n && iterable[r] > iterable[largest]){\n        largest <- r\n    }\n    if(largest != i){\n        iterable[i] <- iterable[largest]\n        iterable[largest] <- iterable[i]\n        heapify(iterable, n, largest)\n    }\n}\n",
    "\n  # Your code goes here\n  n <- length(iterable)\n  for(i in 1:n) {\n    iterable <- heapify(iterable, n, i)\n  }\n  for(i in n:2) {\n    iterable[1] <- iterable[i]\n    iterable[i] <- iterable[1]\n    iterable <- heapify(iterable, i-1, 1)\n  }\n  return(iterable)\n}\n",
    "\n    # Write your code here\n    # Return the sorted list\n}\n ",
    "\n    # Write your code here\n    return(iterable)\n}\n ",
    "\n  # Your code goes here\n  return(iterable)\n}\n",
    "\n    # Write your code here\n}\n",
    "\n  # Write your code here.\n}\n",
    "\n  # Write your code here\n}\n",
    "\n    # Create a max heap.\n    heap <- heapify(iterable)\n    # Get the size of the heap.\n    size <- length(heap)\n    # Iterate over the heap.\n    for (i in 1:(size - 1)) {\n        # Swap the first and last elements.\n        heap <- swap(heap, 1, size - i + 1)\n        # Sift down the new root element.\n        heap <- sift_down(heap, 1, size - i)\n    }\n    # Return the sorted list.\n    return(heap)\n}\n "
  ]
}