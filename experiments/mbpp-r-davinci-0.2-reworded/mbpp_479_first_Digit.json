{
  "name": "mbpp_479_first_Digit",
  "language": "r",
  "prompt": "# Write a rthon function to find the first digit of a given number.\nfirst_Digit <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- first_Digit\n    if(!identical(candidate(123), 1)){quit('no', 1)}\n    if(!identical(candidate(456), 4)){quit('no', 1)}\n    if(!identical(candidate(12), 1)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 56789)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n / 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(-76)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  if (n < 0) {\n    n <- -n\n  }\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(1234)\nfirst_Digit(2345)\nfirst_Digit(3456)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 567)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = -123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  # Use the while loop to find the first digit of a given number.\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n    while (n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(1234)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(1234)\nfirst_Digit(12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9)\nfirst_Digit(10)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\nfirst_Digit(n = -1234)\nfirst_Digit(n = -0.1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n / 10\n  }\n  return(n)\n}\nfirst_Digit(n = -123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9)\nfirst_Digit(10)\nfirst_Digit(9876543210)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\nfirst_Digit(n = -1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(123.45)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n / 10\n  }\n  return(n)\n}\nfirst_Digit(n = -1234)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = -123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n    while (n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(123)\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = -123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(9)\nfirst_Digit(10)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8989)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(8987)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n/10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65)\nfirst_Digit(987654321)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n"
  ]
}