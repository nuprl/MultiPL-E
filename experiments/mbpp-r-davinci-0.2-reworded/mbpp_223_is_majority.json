{
  "name": "mbpp_223_is_majority",
  "language": "r",
  "prompt": "# Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nis_majority <- function(arr, n, x) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- is_majority\n    if(!identical(candidate(c(1, 2, 3, 3, 3, 3, 10), 7, 3), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 4, 4, 4, 6, 6), 8, 4), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 2), 5, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 2), 5, 1), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for(i in 1:n) {\n        if(arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if(count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + mid > length(arr)) {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  if (sum(arr == x) > n / 2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Your code here\n    count = 0\n    for(i in 1:n){\n        if(arr[i] == x){\n            count = count + 1\n        }\n    }\n    if(count > n/2){\n        return(TRUE)\n    }else{\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Write your code here\n    count = 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count = count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count = 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n"
  ]
}