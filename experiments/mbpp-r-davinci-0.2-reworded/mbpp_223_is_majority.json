{
  "name": "mbpp_223_is_majority",
  "language": "r",
  "prompt": "# Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nis_majority <- function(arr, n, x) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- is_majority\n    if(!identical(candidate(c(1, 2, 3, 3, 3, 3, 10), 7, 3), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 4, 4, 4, 6, 6), 8, 4), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 2), 5, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 2), 5, 1), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for(i in 1:n) {\n        if(arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if(count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + mid > length(arr)) {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  if (sum(arr == x) > n / 2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Your code here\n    count = 0\n    for(i in 1:n){\n        if(arr[i] == x){\n            count = count + 1\n        }\n    }\n    if(count > n/2){\n        return(TRUE)\n    }else{\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Write your code here\n    count = 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count = count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count = 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr) / 2)\n  if (arr[mid] == x) {\n    if (mid + mid <= length(arr) && arr[mid + mid] == x) {\n      return(TRUE)\n    }\n    if (mid - mid >= 1 && arr[mid - mid] == x) {\n      return(TRUE)\n    }\n  }\n  if (arr[mid] >= x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  if (arr[mid] < x) {\n    return(is_majority(arr[(mid + 1):length(arr)], n, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(n == 0) return(FALSE)\n  if(n == 1) return(TRUE)\n  mid <- n %/% 2\n  if(arr[mid] == x) {\n    if((mid + mid + 1) <= n && arr[mid + mid + 1] == x) return(TRUE)\n    if((mid + mid - 1) >= 0 && arr[mid + mid - 1] == x) return(TRUE)\n  }\n  if(arr[mid] <= x) return(is_majority(arr[(mid + 1):n], n - (mid + 1), x))\n  return(is_majority(arr[1:mid], mid, x))\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[floor(n/2)] == x) {\n    return(TRUE)\n  }\n  if (arr[floor(n/2)] > x) {\n    return(is_majority(arr[1:floor(n/2)], length(arr[1:floor(n/2)]), x))\n  }\n  if (arr[floor(n/2)] < x) {\n    return(is_majority(arr[floor(n/2)+1:n], length(arr[floor(n/2)+1:n]), x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count = 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # your code here\n  if(length(arr) < n) {\n    return(FALSE)\n  }\n  count <- 0\n  for(i in 1:length(arr)) {\n    if(arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if(count > n/2) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] < x) {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  } else {\n    return(is_majority(arr[1:mid], n, x))\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[floor(n/2)] == x) {\n    return(TRUE)\n  }\n  if (arr[floor(n/2)] > x) {\n    return(is_majority(arr[1:floor(n/2)], n/2, x))\n  }\n  if (arr[floor(n/2)] < x) {\n    return(is_majority(arr[(floor(n/2)+1):n], n/2, x))\n  }\n}\n",
    "\n    # Your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    count <- 0\n    for(i in 1:n) {\n        if(arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if(count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[1] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr[-1], n, x))\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Find the index of first occurrence of x\n  i <- which(arr == x)[1]\n  # If the element is present more than n/2 times, then it is the majority element\n  if (i + n/2 - 1 <= n) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    return(TRUE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n    # Your code here\n    if(sum(arr == x) > n/2){\n        return(TRUE)\n    }\n    return(FALSE)\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Find the index of first occurrence of x\n  i <- which(arr == x)[1]\n  # If the element is present more than n/2 times, return true\n  if (i + n/2 - 1 <= n) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n    # Your code here\n    if (length(arr) == 0) {\n        return(FALSE)\n    }\n    if (length(arr) == 1) {\n        if (arr[1] == x) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    }\n    mid <- floor(length(arr)/2)\n    if (arr[mid] == x) {\n        if (mid + mid > length(arr)) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    } else if (arr[mid] > x) {\n        return(is_majority(arr[1:mid], n, x))\n    } else {\n        return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr) / 2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[1:mid], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if(n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if(arr[mid] == x) {\n    if(mid + mid > n) {\n      return(TRUE)\n    }\n    else if(arr[mid + mid] == x) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[mid:n], n - mid, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr) / 2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  if (arr[mid] < x) {\n    return(is_majority(arr[(mid + 1):length(arr)], n, x))\n  }\n}\n ",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  is_majority(arr, n-1, x)\n}\n",
    "\n  if (n == 0) return(FALSE)\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if ((mid + mid + 1) <= n) return(TRUE)\n    else return(FALSE)\n  }\n  if (arr[mid] > x) return(is_majority(arr[1:mid], mid, x))\n  return(is_majority(arr[(mid+1):n], n-mid-1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    if (mid + mid > n) {\n      return(TRUE)\n    }\n    return(arr[mid + mid] == x)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[floor(n/2)] == x) {\n    if (n % 2 == 1) {\n      return(TRUE)\n    } else {\n      if (arr[floor(n/2) + 1] == x) {\n        return(TRUE)\n      } else {\n        return(FALSE)\n      }\n    }\n  } else if (arr[floor(n/2)] > x) {\n    return(is_majority(arr[1:floor(n/2)], floor(n/2), x))\n  } else {\n    return(is_majority(arr[(floor(n/2) + 1):n], floor(n/2), x))\n  }\n}\n",
    "\n  # Write your code here\n  if(x == arr[n/2]){\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):n], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Find the index of first occurrence of x\n  i <- which(arr == x)[1]\n  \n  # If element is present more than n/2 times, return true\n  if (i + n/2 - 1 <= n) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Find the index of the first occurrence of x\n  i <- which(arr == x)[1]\n  # If there is no majority element, return 0\n  if (i == -1) {\n    return(0)\n  }\n  # If there is a majority element, return 1\n  if ((n/2) <= (n - i + 1)) {\n    return(1)\n  }\n  return(0)\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) return(FALSE)\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    if (mid + mid <= n) return(TRUE)\n    else return(arr[mid + 1] == x)\n  }\n  if (arr[mid] > x) return(is_majority(arr[1:mid], mid, x))\n  return(is_majority(arr[mid + 1:n], n - mid - 1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[1] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr[-1], n, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  return(TRUE)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr) / 2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid + 1):length(arr)], n, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[1:mid], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (n == 0) {\n        return(FALSE)\n    }\n    if (n == 1) {\n        return(arr[1] == x)\n    }\n    if (arr[n/2] == x) {\n        return(TRUE)\n    }\n    if (arr[n/2] > x) {\n        return(is_majority(arr[1:n/2], n/2, x))\n    }\n    return(is_majority(arr[n/2:n], n/2, x))\n}\n",
    "\n    # Write your code here\n    if (length(arr[arr == x]) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n    # Initialize variables\n    count <- 0\n    # Iterate through the array\n    for (i in 1:n) {\n        # If the element is found, increment the count\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    # If the count is greater than n/2, return true, otherwise return false\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid > n) {\n      return(TRUE)\n    }\n    return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n}\n",
    "\n    if (n == 0) {\n        return(FALSE)\n    }\n    if (arr[n] == x) {\n        return(TRUE)\n    }\n    return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  \n  mid <- floor(n/2)\n  \n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):n], n, x))\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    return(TRUE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n    }\n  }\n  else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[1] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr[-1], n, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n/2] == x) {\n    return(TRUE)\n  }\n  if (arr[n/2] > x) {\n    return(is_majority(arr, n/2, x))\n  }\n  if (arr[n/2] < x) {\n    return(is_majority(arr[(n/2)+1:n], n/2, x))\n  }\n}\n",
    "\n    # Write your code here\n    count = 0\n    for(i in 1:n){\n        if(arr[i] == x){\n            count = count + 1\n        }\n    }\n    if(count > n/2){\n        return(TRUE)\n    }else{\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n / 2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 2) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(arr[length(arr)/2] == x) {\n    return(TRUE)\n  } else if(arr[length(arr)/2] > x) {\n    return(is_majority(arr[1:(length(arr)/2)], n, x))\n  } else {\n    return(is_majority(arr[(length(arr)/2):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  count = 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n    # Your code here\n    if(n == 0) {\n        return(FALSE)\n    }\n    mid <- floor(n/2)\n    if(arr[mid] == x) {\n        if((mid + mid + 1) <= n) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    } else if(arr[mid] > x) {\n        return(is_majority(arr[1:mid], mid, x))\n    } else {\n        return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n    }\n}\n",
    "\n  # Write your code here\n  if (n == 0) return(FALSE)\n  if (arr[n] == x) return(TRUE)\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    if (mid + mid > n) {\n      return TRUE\n    }\n    return arr[mid + mid] == x\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid + 1):n], n - mid - 1, x)\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (n == 0) return(FALSE)\n  if (arr[1] == x) {\n    if (n % 2 == 0) {\n      return(arr[n/2] == x)\n    } else {\n      return(arr[(n+1)/2] == x)\n    }\n  }\n  return(is_majority(arr[-1], n-1, x))\n}\n",
    "\n    # Your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Find the index of first occurrence of x\n  i <- which(arr == x)[1]\n  # If the element is present more than n/2 times, then return true\n  if(i + n/2 - 1 <= n) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 - 1 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[-(1:mid)], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[-(1:mid)], n, x))\n  } else {\n    return(is_majority(arr[-(mid:length(arr))], n, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Your code here\n    if (sum(arr == x) > n / 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  count = 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + floor(n/2) <= length(arr) && arr[mid + floor(n/2)] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if(length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(n / 2)\n  if(arr[mid] == x) {\n    return(TRUE)\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n  }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if((mid + n/2) <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    if (length(arr) == 0) {\n        return(FALSE)\n    }\n    mid <- floor(length(arr)/2)\n    if (arr[mid] == x) {\n        if (mid + n/2 - 1 <= length(arr)) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    } else if (arr[mid] > x) {\n        return(is_majority(arr[1:mid], n, x))\n    } else {\n        return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] < x) {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  } else {\n    return(is_majority(arr[1:mid], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n - 1, x))\n}\n",
    "\n    # Write your code here\n    if (length(arr) == 0) {\n        return(FALSE)\n    }\n    mid <- floor(n/2)\n    if (arr[mid] == x) {\n        if (mid + mid <= n) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    } else if (arr[mid] > x) {\n        return(is_majority(arr[1:mid], n, x))\n    } else {\n        return(is_majority(arr[(mid+1):n], n, x))\n    }\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n ",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Your code here\n    count <- 0\n    for(i in 1:n){\n        if(arr[i] == x){\n            count <- count + 1\n        }\n    }\n    if(count > n/2){\n        return(TRUE)\n    }else{\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    if (length(arr) == 0) {\n        return(FALSE)\n    }\n    mid <- floor(n/2)\n    if (arr[mid] == x) {\n        if (mid + mid <= n) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    } else if (arr[mid] > x) {\n        return(is_majority(arr[1:mid], mid, x))\n    } else {\n        return(is_majority(arr[(mid+1):n], n-mid-1, x))\n    }\n}\n",
    "\n  if (n == 0) return(FALSE)\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) return(TRUE)\n    else if (arr[mid + 1] == x) return(TRUE)\n    else return(FALSE)\n  }\n  if (arr[mid] > x) return(is_majority(arr[1:mid], mid, x))\n  else return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n}\n",
    "\n  # Your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    if(mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n    # Write your code here\n    count = 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count = count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n    if (n == 0) {\n        return FALSE\n    }\n    if (arr[n/2] == x) {\n        return TRUE\n    }\n    if (arr[n/2] > x) {\n        return is_majority(arr, n/2, x)\n    }\n    return is_majority(arr[n/2:n], n/2, x)\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if(arr[mid] == x) {\n    return(TRUE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  if(arr[mid] < x) {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] < x) {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  } else {\n    return(is_majority(arr[1:mid], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n  # your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (n == 1) {\n        return(arr[1] == x)\n    }\n    if (arr[n/2] == x) {\n        return(TRUE)\n    }\n    if (arr[n/2] > x) {\n        return(is_majority(arr[1:(n/2)], n/2, x))\n    }\n    return(is_majority(arr[(n/2):n], n/2, x))\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  if (sum(arr == x) > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if(length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 - 1 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if ((mid + mid + 1) <= n) {\n      return(TRUE)\n    } else if (arr[mid + 1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n  }\n}\n",
    "\n  # Write your code here\n  count = 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count = count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n  # your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 1) {\n    return(TRUE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    return(is_majority(arr[1:mid], n, x) | is_majority(arr[(mid+1):length(arr)], n, x))\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  if(length(arr[arr == x]) > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n) {\n    if(arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if(count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n"
  ]
}