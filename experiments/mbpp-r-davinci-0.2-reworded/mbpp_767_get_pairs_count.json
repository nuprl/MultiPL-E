{
  "name": "mbpp_767_get_pairs_count",
  "language": "r",
  "prompt": "# Write a rthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nget_pairs_count <- function(arr, sum) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- get_pairs_count\n    if(!identical(candidate(c(1, 1, 1, 1), 2), 6)){quit('no', 1)}\n    if(!identical(candidate(c(1, 5, 7, -1, 5), 6), 3)){quit('no', 1)}\n    if(!identical(candidate(c(1, -2, 3), 1), 1)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 3), -3), 1)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    arr_len <- length(arr)\n    count <- 0\n    for (i in 1:arr_len) {\n        for (j in i+1:arr_len) {\n            if (arr[i] + arr[j] == sum) {\n                count <- count + 1\n            }\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in 1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    count <- 0\n    for(i in 1:length(arr)) {\n        for(j in i+1:length(arr)) {\n            if(arr[i] + arr[j] == sum) {\n                count <- count + 1\n            }\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    count <- 0\n    for (i in 1:length(arr)) {\n        for (j in i+1:length(arr)) {\n            if (arr[i] + arr[j] == sum) {\n                count <- count + 1\n            }\n        }\n    }\n    return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in 1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  pairs <- 0\n  for (i in 1:length(arr)) {\n    for (j in 1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        pairs <- pairs + 1\n      }\n    }\n  }\n  pairs\n}\n",
    "\n  # Create a hash map to store the counts of all elements\n  hash_map <- vector(mode = \"list\", length = length(arr))\n  names(hash_map) <- arr\n  for (i in 1:length(arr)) {\n    hash_map[[i]] <- 0\n  }\n  \n  # Traverse through all numbers and increment the count (Notice that every pair is counted twice)\n  for (i in 1:length(arr)) {\n    hash_map[[arr[i]]] <- hash_map[[arr[i]]] + 1\n  }\n  \n  # Traverse through all numbers and add the counts of all elements which are part of a pair\n  count <- 0\n  for (i in 1:length(arr)) {\n    count <- count + hash_map[[sum - arr[i]]]\n  }\n  \n  # return the half of the total count\n  return(count / 2)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  # Create an empty hash\n  hash <- vector(mode = \"list\", length = 0)\n  # Initialize count to 0\n  count <- 0\n  # Loop through each element and add the element to the hash\n  for (i in arr) {\n    hash[[i]] <- i\n  }\n  # Loop through each element and check if it can be combined with any other element (other than itself) to give the desired sum.\n  for (i in arr) {\n    if (hash[[sum - i]] != i) {\n      count <- count + 1\n    }\n  }\n  # Return count\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:length(arr)) {\n    for (j in i+1:length(arr)) {\n      if (arr[i] + arr[j] == sum) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n"
  ]
}