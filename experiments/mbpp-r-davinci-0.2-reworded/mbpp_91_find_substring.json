{
  "name": "mbpp_91_find_substring",
  "language": "r",
  "prompt": "# Write a function to check if a string is present as a substring in a given list of string values.\nfind_substring <- function(str1, sub_str) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- find_substring\n    if(!identical(candidate(c('red', 'black', 'white', 'green', 'orange'), 'ack'), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c('red', 'black', 'white', 'green', 'orange'), 'abc'), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c('red', 'black', 'white', 'green', 'orange'), 'ange'), TRUE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  for(i in 1:length(str1)) {\n    if(grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nfind_substring(c(\"hello\", \"world\", \"hi\"), \"lo\")\n",
    "\n  if (str_detect(str1, sub_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if(grepl(sub_str, str1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if(grepl(sub_str, str1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(str1) == 0) {\n    return(FALSE)\n  }\n  if (grepl(sub_str, str1[1])) {\n    return(TRUE)\n  }\n  return(find_substring(str1[-1], sub_str))\n}\n\nfind_substring(c(\"hello\", \"world\", \"hi\"), \"hi\")\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if (str_detect(str1, sub_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if (grepl(sub_str, str1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if (grepl(sub_str, str1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if (grepl(sub_str, str1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  # Write your code here\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      print(str1[i])\n    }\n  }\n}\n\nfind_substring(str1, \"abc\")\n",
    "\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (str_detect(str1, sub_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      print(str1[i])\n    }\n  }\n}\n",
    "\n  str1 <- tolower(str1)\n  sub_str <- tolower(sub_str)\n  if (str_detect(str1, sub_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  str1 <- strsplit(str1, \" \")\n  str1 <- unlist(str1)\n  for (i in 1:length(str1)) {\n    if (str1[i] == sub_str) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (str_detect(str1, sub_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (is.null(str1) || is.null(sub_str)) {\n    return(FALSE)\n  }\n  for (i in 1:length(str1)) {\n    if (grepl(sub_str, str1[i])) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n"
  ]
}