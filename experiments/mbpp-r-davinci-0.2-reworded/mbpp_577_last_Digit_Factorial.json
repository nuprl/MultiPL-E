{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "r",
  "prompt": "# Write a rthon function to find the last digit in factorial of a given number.\nlast_Digit_Factorial <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- last_Digit_Factorial\n    if(!identical(candidate(4), 4)){quit('no', 1)}\n    if(!identical(candidate(21), 0)){quit('no', 1)}\n    if(!identical(candidate(30), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n==0) {\n    return(1)\n  }\n  else {\n    return(n*last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    print(\"Please enter a positive number\")\n  } else {\n    fact <- 1\n    for (i in 1:n) {\n      fact <- fact * i\n    }\n    print(fact)\n    print(substr(fact, nchar(fact), nchar(fact)))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  } else {\n    return(factorial(n) %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    } else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Error\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(as.numeric(substr(factorial, nchar(factorial), nchar(factorial))))\n  }\n}\n\nlast_Digit_Factorial(5)\nlast_Digit_Factorial(-5)\n",
    "\n  if (n < 0) {\n    print(\"Please enter a positive number!\")\n  } else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    print(factorial)\n    print(substr(factorial, nchar(factorial), nchar(factorial)))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\nlast_Digit_Factorial(-5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive integer\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  last_digit <- factorial %% 10\n  return(last_digit)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    stop(\"n must be a positive integer\")\n  }\n  if (n == 0) {\n    return(1)\n  }\n  return(n * last_Digit_Factorial(n - 1))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- function(n) {\n    if (n == 0) {\n      return(1)\n    } else {\n      return(n * factorial(n - 1))\n    }\n  }\n  return(factorial(n) %% 10)\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    } else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(substr(factorial, nchar(factorial), nchar(factorial)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive integer\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n    factorial <- 1\n    for (i in 1:n) {\n        factorial <- factorial * i\n    }\n    return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(as.numeric(substr(factorial, nchar(factorial), nchar(factorial))))\n}\n\nlast_Digit_Factorial(5)\nlast_Digit_Factorial(12)\nlast_Digit_Factorial(20)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive number\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    last_digit <- factorial %% 10\n    return(last_digit)\n  }\n}\n\nlast_Digit_Factorial(5)\nlast_Digit_Factorial(10)\nlast_Digit_Factorial(15)\nlast_Digit_Factorial(20)\nlast_Digit_Factorial(25)\nlast_Digit_Factorial(50)\nlast_Digit_Factorial(75)\nlast_Digit_Factorial(100)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- function(n) {\n    if (n == 0) {\n      return(1)\n    } else {\n      return(n * factorial(n - 1))\n    }\n  }\n  return(as.character(factorial(n))[length(as.character(factorial(n)))])\n}\n\nlast_Digit_Factorial(10)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  last_digit <- as.numeric(substr(factorial, nchar(factorial), nchar(factorial)))\n  return(last_digit)\n}\n\nlast_Digit_Factorial(10)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for(i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Factorial of negative number doesn't exist\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return (factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Please enter a positive integer\")\n  } else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n",
    "\n    factorial <- function(n) {\n        if (n == 0) {\n            return(1)\n        }\n        else {\n            return(n * factorial(n - 1))\n        }\n    }\n    return(as.integer(substr(factorial(n), nchar(factorial(n)), nchar(factorial(n)))))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n"
  ]
}