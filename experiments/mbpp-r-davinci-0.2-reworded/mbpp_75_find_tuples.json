{
  "name": "mbpp_75_find_tuples",
  "language": "r",
  "prompt": "# Write a function to find lists which have all elements divisible by k from the given list of lists.\nfind_tuples <- function(test_list, K) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- find_tuples\n    if(!identical(candidate(list(list(6, 24, 12), list(7, 9, 6), list(12, 18, 21)), 6), list(list(6, 24, 12)))){quit('no', 1)}\n    if(!identical(candidate(list(list(5, 25, 30), list(4, 2, 3), list(7, 8, 9)), 5), list(list(5, 25, 30)))){quit('no', 1)}\n    if(!identical(candidate(list(list(7, 9, 16), list(8, 16, 4), list(19, 17, 18)), 4), list(list(8, 16, 4)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  # return the list of lists which have all elements divisible by K\n  return(test_list[sapply(test_list, function(x) all(x %% K == 0))])\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  # Return the list of lists\n  return(test_list[sapply(test_list, function(x) all(x %% K == 0))])\n}\n",
    "\n  # Write your code here\n  # Return the list of lists which have all elements divisible by K\n  # If no list is found, return an empty list\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result[[length(result)+1]] <- test_list[[i]]\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  # Return the output\n  return(test_list[sapply(test_list, function(x) all(x %% K == 0))])\n}\n",
    "\n  # Write your code here\n  # Return the list of lists\n  return(test_list[sapply(test_list, function(x) all(x %% K == 0))])\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result[[length(result) + 1]] <- test_list[[i]]\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  # Return the list of lists which have all elements divisible by K\n  # If no such list exists, return an empty list\n  # If the input list is empty, return an empty list\n  # If the input list is not a list of lists, return an empty list\n  # If the input list contains an element which is not a list, return an empty list\n  # If the input list contains an element which is not a list of integers, return an empty list\n  # If the input list contains an element which is an empty list, return an empty list\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of lists which have all elements divisible by K\n  # If the input list contains an element which is a list of integers, return a list of",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result[[length(result) + 1]] <- test_list[[i]]\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  # Return the list of lists\n  # Return the list of lists\n  lapply(test_list, function(x) {\n    if (all(x %% K == 0)) {\n      return(x)\n    }\n  })\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  lapply(test_list, function(x) all(x %% K == 0))\n}\n",
    "\n  # Write your code here\n  result <- lapply(test_list, function(x) all(x %% K == 0))\n  return(test_list[result])\n}\n",
    "\n  # Write your code here\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists\n  # Return the list of lists"
  ]
}