{
  "name": "mbpp_753_min_k",
  "language": "r",
  "prompt": "# Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/rthon-find-minimum-k-records-from-list-list/ - in this case a verbatim cor of test cases\nmin_k <- function(test_list, K) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- min_k\n    if(!identical(candidate(list(list('Manjeet', 10), list('Akshat', 4), list('Akash', 2), list('Nikhil', 8)), 2), list(list('Akash', 2), list('Akshat', 4)))){quit('no', 1)}\n    if(!identical(candidate(list(list('Sanjeev', 11), list('Angat', 5), list('Akash', 3), list('Nepin', 9)), 3), list(list('Akash', 3), list('Angat', 5), list('Nepin', 9)))){quit('no', 1)}\n    if(!identical(candidate(list(list('tanmay', 14), list('Amer', 11), list('Ayesha', 9), list('SKD', 16)), 1), list(list('Ayesha', 9)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Sort the list in ascending order\n  test_list <- sort(test_list)\n  # Return the first K elements\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first k elements\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first K elements\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  test_list <- sort(test_list)\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first K elements\n  return(test_list[1:K])\n}\n",
    "\n  test_list <- sort(test_list)\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first K elements\n  return(test_list[1:K])\n}\n",
    "\n  if (K > length(test_list)) {\n    return(test_list)\n  }\n  else {\n    return(sort(test_list)[1:K])\n  }\n}\n\ntest_list <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nK <- 3\nmin_k(test_list, K)\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first k elements\n  return(test_list[1:K])\n}\n",
    "\n    # Sort the list\n    test_list <- sort(test_list)\n    # Return the first K elements\n    return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first k elements\n  return(test_list[1:K])\n}\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  # sort the list\n  test_list <- sort(test_list)\n  # return the first K elements\n  return(test_list[1:K])\n}\n",
    "\n    if (K > length(test_list)) {\n        print(\"K is greater than length of list\")\n        return(NULL)\n    }\n    else {\n        return(sort(test_list)[1:K])\n    }\n}\n\nmin_k(test_list, K)\n",
    "\n  # sort the list\n  sorted_list <- sort(test_list)\n  # return the first K elements\n  return(sorted_list[1:K])\n}\n",
    "\n  test_list <- sort(test_list)\n  return(test_list[1:K])\n}\n"
  ]
}