{
  "name": "mbpp_733_find_first_occurrence",
  "language": "r",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfind_first_occurrence <- function(A, x) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- find_first_occurrence\n    if(!identical(candidate(c(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5), 1)){quit('no', 1)}\n    if(!identical(candidate(c(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5), 2)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6), 4)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n    n <- length(A)\n    if (n == 0) {\n        return(NULL)\n    }\n    left <- 0\n    right <- n - 1\n    while (left < right) {\n        mid <- floor((left + right) / 2)\n        if (A[mid] < x) {\n            left <- mid + 1\n        } else {\n            right <- mid\n        }\n    }\n    if (A[left] == x) {\n        return(left)\n    } else {\n        return(NULL)\n    }\n}\n",
    "\n  # TODO - you fill in here.\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  if (length(A) == 0) {\n    return(NULL)\n  }\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end)/2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      }\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10)\nfind_first_occurrence(A, 4)\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- left + (right - left) / 2\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  }\n  return(NULL)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x < A[mid]) {\n      high <- mid - 1\n    } else if (x > A[mid]) {\n      low <- mid + 1\n    } else {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  l <- 1\n  r <- n\n  while (l < r) {\n    m <- floor((l + r) / 2)\n    if (A[m] < x) {\n      l <- m + 1\n    } else {\n      r <- m\n    }\n  }\n  if (A[l] == x) {\n    return(l)\n  } else {\n    return(NA)\n  }\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 5)\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  }\n  return(NULL)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(-1)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- left + (right - left) / 2\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # Implement this placeholder.\n  return -1\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + (right - left) / 2\n    if (A[mid] > x) {\n      right <- mid - 1\n    } else if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n"
  ]
}