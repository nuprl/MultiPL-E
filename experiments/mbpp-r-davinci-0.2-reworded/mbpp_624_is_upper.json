{
  "name": "mbpp_624_is_upper",
  "language": "r",
  "prompt": "# Write a rthon function to convert a given string to uppercase.\nis_upper <- function(string) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- is_upper\n    if(!identical(candidate('person'), 'PERSON')){quit('no', 1)}\n    if(!identical(candidate('final'), 'FINAL')){quit('no', 1)}\n    if(!identical(candidate('Valid'), 'VALID')){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"Hello\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\nis_upper(\"hello\")\n",
    "\n  if (is.na(string)) {\n    return(NA)\n  }\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"ABC\")\nis_upper(\"abc\")\nis_upper(\"Abc\")\nis_upper(NA)\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  return(toupper(string))\n}\n\nis_upper(\"hello\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if(string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if (string == tolower(string)) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\nis_upper(\"Hello\")\nis_upper(\"hello\")\n",
    "\n  return(toupper(string))\n}\n\nis_upper(\"hello\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\nis_upper(\"hello\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\nis_upper(\"hello\")\n",
    "\n  if(string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  return(toupper(string))\n}\n\nis_upper(\"Hello World\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"Hello\")\nis_upper(\"HELLO\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n",
    "\n  if (string == toupper(string)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_upper(\"HELLO\")\n"
  ]
}