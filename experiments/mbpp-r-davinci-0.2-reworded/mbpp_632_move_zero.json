{
  "name": "mbpp_632_move_zero",
  "language": "r",
  "prompt": "# Write a rthon function to move all zeroes to the end of the given list.\nmove_zero <- function(num_list) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- move_zero\n    if(!identical(candidate(c(1, 0, 2, 0, 3, 4)), list(1, 2, 3, 4, 0, 0))){quit('no', 1)}\n    if(!identical(candidate(c(2, 3, 2, 0, 0, 4, 0, 5, 0)), list(2, 3, 2, 4, 5, 0, 0, 0, 0))){quit('no', 1)}\n    if(!identical(candidate(c(0, 1, 0, 1, 1)), list(1, 1, 1, 0, 0))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in num_list) {\n    if (i == 0) {\n      zero_list <- c(zero_list, i)\n    } else {\n      non_zero_list <- c(non_zero_list, i)\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    } else {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- num_list[num_list == 0]\n  non_zero_list <- num_list[num_list != 0]\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    } else {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for(i in 1:length(num_list)){\n    if(num_list[i] == 0){\n      zero_list <- c(zero_list, num_list[i])\n      num_list <- num_list[-i]\n    }\n  }\n  return(c(num_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  num_list_new <- num_list[num_list != 0]\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, 0)\n    }\n  }\n  num_list_new <- c(num_list_new, zero_list)\n  return(num_list_new)\n}\n",
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    } else {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  num_list_new <- num_list[num_list != 0]\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    }\n  }\n  num_list_new <- c(num_list_new, zero_list)\n  return(num_list_new)\n}\n",
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    } else {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for(i in 1:length(num_list)) {\n    if(num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n      num_list <- num_list[-i]\n    }\n  }\n  return(c(num_list, zero_list))\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for(i in 1:length(num_list)) {\n    if(num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n      num_list[i] <- NULL\n    }\n  }\n  return(c(num_list, zero_list))\n}\n",
    "\n  # create a new list to store the non-zero numbers\n  non_zero_list <- c()\n  # create a new list to store the zero numbers\n  zero_list <- c()\n  # loop through the list\n  for(i in 1:length(num_list)) {\n    # if the number is not zero, add it to the non-zero list\n    if(num_list[i] != 0) {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    } else {\n      # if the number is zero, add it to the zero list\n      zero_list <- c(zero_list, num_list[i])\n    }\n  }\n  # return the non-zero list and the zero list combined\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n    zero_list <- c()\n    num_list <- Filter(Negate(is.null), num_list)\n    for (i in 1:length(num_list)) {\n        if (num_list[i] == 0) {\n            zero_list <- c(zero_list, num_list[i])\n            num_list[i] <- NULL\n        }\n    }\n    num_list <- c(num_list, zero_list)\n    return(num_list)\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n      num_list[i] <- NULL\n    }\n  }\n  num_list <- Filter(Negate(is.null), num_list)\n  num_list <- c(num_list, zero_list)\n  return(num_list)\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n    }\n  }\n  num_list <- Filter(Negate(is.null), num_list)\n  num_list <- c(num_list, zero_list)\n  return(num_list)\n}\n",
    "\n    zero_list <- c()\n    num_list_new <- num_list[num_list != 0]\n    for (i in 1:length(num_list)) {\n        if (num_list[i] == 0) {\n            zero_list <- c(zero_list, 0)\n        }\n    }\n    num_list_new <- c(num_list_new, zero_list)\n    return(num_list_new)\n}\n",
    "\n  zero_list <- c()\n  non_zero_list <- c()\n  for (i in num_list) {\n    if (i == 0) {\n      zero_list <- c(zero_list, i)\n    } else {\n      non_zero_list <- c(non_zero_list, i)\n    }\n  }\n  return(c(non_zero_list, zero_list))\n}\n",
    "\n  num_list[num_list == 0] <- NA\n  num_list <- num_list[!is.na(num_list)]\n  num_list <- c(num_list, rep(0, sum(num_list == 0)))\n  return(num_list)\n}\n",
    "\n  zero_list <- c()\n  num_list <- Filter(Negate(is.null), num_list)\n  for (i in 1:length(num_list)) {\n    if (num_list[i] == 0) {\n      zero_list <- c(zero_list, num_list[i])\n      num_list <- num_list[-i]\n    }\n  }\n  num_list <- c(num_list, zero_list)\n  return(num_list)\n}\n",
    "\n  # Create a new list to store the non-zero numbers\n  non_zero_list <- c()\n  # Create a new list to store the zero numbers\n  zero_list <- c()\n  # Loop through the given list\n  for (i in 1:length(num_list)) {\n    # If the number is not zero, then add it to the non-zero list\n    if (num_list[i] != 0) {\n      non_zero_list <- c(non_zero_list, num_list[i])\n    } else {\n      # If the number is zero, then add it to the zero list\n      zero_list <- c(zero_list, num_list[i])\n    }\n  }\n  # Return the concatenation of the non-zero list and the zero list\n  return(c(non_zero_list, zero_list))\n}\n"
  ]
}