{
  "name": "mbpp_130_max_occurrences",
  "language": "r",
  "prompt": "# Write a function to find the item with maximum frequency in a given list.\nmax_occurrences <- function(nums) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- max_occurrences\n    if(!identical(candidate(c(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18)), 8)){quit('no', 1)}\n    if(!identical(candidate(c(10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10)), 20)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  max_num <- 0\n  max_freq <- 0\n  for (num in nums) {\n    freq <- sum(nums == num)\n    if (freq > max_freq) {\n      max_freq <- freq\n      max_num <- num\n    }\n  }\n  return(max_num)\n}\nmax_occurrences(c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10))\n",
    "\n  max_occurrences <- 0\n  max_item <- 0\n  for (i in nums) {\n    occurrences <- length(which(nums == i))\n    if (occurrences > max_occurrences) {\n      max_occurrences <- occurrences\n      max_item <- i\n    }\n  }\n  return(max_item)\n}\n\nmax_occurrences(c(1,2,3,1,2,1))\n",
    "\n    max(table(nums))\n}\n",
    "\n  max_occurrences <- 0\n  max_item <- NULL\n  for (item in unique(nums)) {\n    occurrences <- sum(nums == item)\n    if (occurrences > max_occurrences) {\n      max_occurrences <- occurrences\n      max_item <- item\n    }\n  }\n  return(max_item)\n}\n\nmax_occurrences(c(1, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5))\n",
    "\n  max_occurrences <- 0\n  max_item <- NULL\n  for (num in nums) {\n    occurrences <- length(which(nums == num))\n    if (occurrences > max_occurrences) {\n      max_occurrences <- occurrences\n      max_item <- num\n    }\n  }\n  return(max_item)\n}\n\nmax_occurrences(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n",
    "\n  # Create a table of the number of occurrences of each number.\n  num_occurrences <- table(nums)\n  # Return the number with the maximum number of occurrences.\n  return(names(which.max(num_occurrences)))\n}\n",
    "\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- sort(nums, decreasing = TRUE)\n  return(names(nums)[1])\n}\n",
    "\n  # Create a table of the number of occurrences of each number in the list.\n  num_occurrences <- table(nums)\n  # Return the number with the maximum number of occurrences.\n  return(names(which.max(num_occurrences)))\n}\n",
    "\n    nums <- as.vector(nums)\n    nums <- sort(nums)\n    nums <- table(nums)\n    nums <- sort(nums, decreasing = TRUE)\n    return(names(nums)[1])\n}\n\nmax_occurrences(c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,",
    "\n  nums %>%\n    table() %>%\n    sort(decreasing = TRUE) %>%\n    names() %>%\n    .[1]\n}\n\nmax_occurrences(c(1, 2, 3, 4, 4, 4, 5, 5, 5, 5))\n",
    "\n  nums <- sort(nums)\n  max_freq <- 0\n  max_num <- 0\n  for (i in 1:length(nums)) {\n    if (i == 1) {\n      freq <- 1\n    } else if (nums[i] == nums[i - 1]) {\n      freq <- freq + 1\n    } else {\n      freq <- 1\n    }\n    if (freq > max_freq) {\n      max_freq <- freq\n      max_num <- nums[i]\n    }\n  }\n  return(max_num)\n}\n",
    "\n    # Create a table of the number of occurrences of each number.\n    num_occurrences <- table(nums)\n    # Return the number with the highest number of occurrences.\n    return(names(which.max(num_occurrences)))\n}\n",
    "\n  nums <- as.vector(nums)\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- sort(nums, decreasing = TRUE)\n  return(names(nums)[1])\n}\n",
    "\n  nums <- as.vector(nums)\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- sort(nums, decreasing = TRUE)\n  return(names(nums)[1])\n}\n\nmax_occurrences(c(1, 2, 3, 1, 2, 3, 1, 1, 2, 2, 2, 3, 3, 3, 3))\n",
    "\n    max_count <- 0\n    max_item <- NULL\n    for (num in nums) {\n        count <- sum(nums == num)\n        if (count > max_count) {\n            max_count <- count\n            max_item <- num\n        }\n    }\n    return(max_item)\n}\n",
    "\n  # Create a table of the number of occurrences of each item in the list.\n  num_occurrences <- table(nums)\n  # Return the item with the maximum number of occurrences.\n  return(names(which.max(num_occurrences)))\n}\n",
    "\n  nums <- as.vector(nums)\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- as.data.frame(nums)\n  nums <- nums[order(nums$Freq, decreasing = TRUE),]\n  return(nums$nums[1])\n}\n",
    "\n  nums <- as.vector(nums)\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- sort(nums, decreasing = TRUE)\n  nums <- names(nums)\n  nums[1]\n}\n",
    "\n  max_freq <- 0\n  max_freq_item <- 0\n  for (num in nums) {\n    freq <- length(which(nums == num))\n    if (freq > max_freq) {\n      max_freq <- freq\n      max_freq_item <- num\n    }\n  }\n  return(max_freq_item)\n}\n",
    "\n  nums <- as.vector(nums)\n  nums <- sort(nums)\n  nums <- table(nums)\n  nums <- sort(nums, decreasing = TRUE)\n  return(names(nums)[1])\n}\n\nmax_occurrences(c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,"
  ]
}