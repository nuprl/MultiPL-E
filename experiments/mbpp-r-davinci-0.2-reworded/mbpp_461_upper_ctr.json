{
  "name": "mbpp_461_upper_ctr",
  "language": "r",
  "prompt": "# Write a rthon function to count the upper case characters in a given string.\nupper_ctr <- function(str) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- upper_ctr\n    if(!identical(candidate('PYthon'), 1)){quit('no', 1)}\n    if(!identical(candidate('BigData'), 1)){quit('no', 1)}\n    if(!identical(candidate('program'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str_detect(str[i], \"[A-Z]\")) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (substr(str, i, i) == toupper(substr(str, i, i))) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"The quick brown fox jumps over the lazy dog\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% letters) {\n      if (str[i] == toupper(str[i])) {\n        upper_ctr <- upper_ctr + 1\n      }\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (substr(str, i, i) %in% letters) {\n      if (substr(str, i, i) == toupper(substr(str, i, i))) {\n        ctr <- ctr + 1\n      }\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= \"A\" & str[i] <= \"Z\") {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"The quick Brow Fox\")\n"
  ]
}