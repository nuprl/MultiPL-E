{
  "name": "mbpp_722_filter_data",
  "language": "r",
  "prompt": "# The input is given as - a named list with a student name as a key and a list of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfilter_data <- function(students, h, w) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- filter_data\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 6.0, 70), list('Cierra Vega' = list(6.2, 70)))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 5.9, 67), list('Cierra Vega' = list(6.2, 70), 'Kierra Gentry' = list(6.0, 68)))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 5.7, 64), list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n",
    "\n  # your code here\n}\n",
    "\n    students <- Filter(function(x) x[1] > h & x[2] > w, students)\n    return(students)\n}\n\nfilter_data(students, 1.8, 70)\n",
    "\n  lapply(students, function(x) {\n    if (x[1] > h & x[2] > w) {\n      return(x)\n    }\n  })\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students[students$height >= h & students$weight >= w]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n    students <- Filter(function(x) x[1] > h & x[2] > w, students)\n    return(students)\n}\n",
    "\n  students[students$height > h & students$weight > w]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n    filtered <- list()\n    for (name in names(students)) {\n        if (students[[name]][1] > h & students[[name]][2] > w) {\n            filtered[[name]] <- students[[name]]\n        }\n    }\n    return(filtered)\n}\n\nfilter_data(students, 1.70, 60)\n",
    "\n  # your code here\n}\n",
    "\n  filtered_students <- lapply(students, function(x) {\n    if (x[1] > h & x[2] > w) {\n      return(x)\n    }\n  })\n  filtered_students <- Filter(Negate(is.null), filtered_students)\n  return(filtered_students)\n}\n\nfilter_data(students, 1.7, 60)\n",
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n\nfilter_data(students, 1.7, 60)\n",
    "\n  students[students$height > h & students$weight > w]\n}\n\nfilter_data(students, 1.5, 40)\n",
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n\nfilter_data(students, 1.7, 60)\n",
    "\n  # your code here\n}\n",
    "\n  filtered <- lapply(students, function(x) {\n    if (x[1] > h && x[2] > w) {\n      return(x)\n    }\n  })\n  filtered <- Filter(Negate(is.null), filtered)\n  return(filtered)\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n",
    "\n  filtered_students <- list()\n  for (student in names(students)) {\n    if (students[[student]][1] > h & students[[student]][2] > w) {\n      filtered_students[[student]] <- students[[student]]\n    }\n  }\n  return(filtered_students)\n}\n",
    "\n  students[sapply(students, function(x) x[1] > h & x[2] > w)]\n}\n\nfilter_data(students, 1.5, 50)\n",
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n\nfilter_data(students, 1.7, 60)\n",
    "\n  students[sapply(students, function(x) x[1] > h & x[2] > w)]\n}\n\nfilter_data(students, 1.7, 60)\n"
  ]
}