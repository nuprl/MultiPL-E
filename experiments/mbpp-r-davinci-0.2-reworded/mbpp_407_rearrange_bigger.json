{
  "name": "mbpp_407_rearrange_bigger",
  "language": "r",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nrearrange_bigger <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- rearrange_bigger\n    if(!identical(candidate(12), 21)){quit('no', 1)}\n    if(!identical(candidate(10), FALSE)){quit('no', 1)}\n    if(!identical(candidate(102), 120)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits to the right of the digit found above sorted in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  first_larger <- which(n[-1] > n[first_smaller])[1]\n  # Swap the first smaller digit with the first larger digit\n  n[c(first_smaller, first_larger)] <- n[c(first_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n[(first_smaller + 1):length(n)] <- sort(n[(first_smaller + 1):length(n)])\n  # Return the rearranged number\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str, decreasing = TRUE)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.integer(n_str)\n  n_str\n}\n\nrearrange_bigger(1234)\n",
    "\n  # Convert number to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap these digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_len <- nchar(n_str)\n  n_vec <- strsplit(n_str, \"\")[[1]]\n  for (i in (n_len - 1):1) {\n    if (n_vec[i] > n_vec[i + 1]) {\n      n_vec[i] <- n_vec[i + 1]\n      n_vec[i + 1] <- n_vec[i]\n      break\n    }\n  }\n  return(as.numeric(paste(n_vec, collapse = \"\")))\n}\n\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(4321)\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # get the length of the vector\n  n_length <- length(n_char)\n  # get the index of the last element\n  n_last <- n_length - 1\n  # get the index of the element before the last\n  n_before_last <- n_length - 2\n  # get the index of the element before the last\n  n_before_before_last <- n_length - 3\n  # get the last element\n  n_last_element <- n_char[n_last]\n  # get the element before the last\n  n_before_last_element <- n_char[n_before_last]\n  # get the element before the last\n  n_before_before_last_element <- n_char[n_before_before_last]\n  \n  # if the last element is greater than the element before the last\n  if (n_last_element > n_before_last_element) {\n    # swap the last two elements\n    n_char[n_last] <- n_before_last_element\n    n_char[n_before_last] <- n_last_element\n    # return the new number\n    return(as.numeric(paste(n_char, collapse = \"\")))\n  }\n  \n  # if the last element is greater than the element before the last\n  if (n_last_element > n_before_before_last_element) {\n    # swap the last two elements\n    n_char[n_last] <- n_before_before_last_element\n    n_char[n_before_before_last] <- n_last_element\n    # return the new number\n    return(as.numeric(paste(n_char, collapse = \"\")))\n  }\n  \n  # if the last element is greater than the element before the last\n  if (n_before_last_element > n_before_before_last_element) {\n    # swap the last two elements\n    n_char[n_before_last] <- n_before_before_last_element\n    n_char[n_before_before_last] <- n_before_",
    "\n  # Split the number into digits\n  digits <- strsplit(as.character(n), \"\")[[1]]\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the ith digit that is larger than the ith digit\n  j <- which.min(digits[-(1:i)][digits[-(1:i)] > digits[i]]) + i\n  # Swap the ith and jth digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the ith digit\n  digits[-(1:i)] <- sort(digits[-(1:i)])\n  # Return the rearranged number\n  as.numeric(paste(digits, collapse = \"\"))\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is bigger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number with the digits to the right of i sorted in ascending order\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character string\n  n_char <- as.character(n)\n  # Get the length of the string\n  n_len <- nchar(n_char)\n  # Get the index of the last digit\n  last_index <- n_len\n  # Get the index of the first digit\n  first_index <- 1\n  # Get the last digit\n  last_digit <- substr(n_char, last_index, last_index)\n  # Get the first digit\n  first_digit <- substr(n_char, first_index, first_index)\n  # Get the index of the digit that is greater than the last digit\n  greater_index <- which(substr(n_char, 1, last_index - 1) > last_digit)[1]\n  # Get the digit that is greater than the last digit\n  greater_digit <- substr(n_char, greater_index, greater_index)\n  # Get the index of the digit that is less than the first digit\n  less_index <- which(substr(n_char, greater_index + 1, n_len) < first_digit)[1] + greater_index\n  # Get the digit that is less than the first digit\n  less_digit <- substr(n_char, less_index, less_index)\n  # Get the index of the digit that is greater than the first digit\n  greater_first_index <- which(substr(n_char, greater_index + 1, n_len) > first_digit)[1] + greater_index\n  # Get the digit that is greater than the first digit\n  greater_first_digit <- substr(n_char, greater_first_index, greater_first_index)\n  # Get the index of the digit that is less than the last digit\n  less_last_index <- which(substr(n_char, 1, last_index - 1) < last_digit)[1]\n  # Get the digit that is less than the last digit\n  less_last_digit <- substr(n_char, less_last_index, less_last_index)\n  # Get the index of the digit that is greater than the last digit\n  greater_last_index <- which(substr(n_char,",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number formed by the digits to the right of i in ascending order\n  # followed by the digits to the left of i (in the original order)\n  return(as.numeric(paste(sort(n[-(1:i)]), collapse = \"\")), n[1:i], sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is not in descending order\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit larger than the digit at i\n  j <- which.min(n[i:length(n)]) + i - 1\n  # swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits after i\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  n_digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  n_digits_sorted <- sort(n_digits, decreasing = TRUE)\n  n_digits_sorted_str <- paste(n_digits_sorted, collapse = \"\")\n  n_digits_sorted_num <- as.numeric(n_digits_sorted_str)\n  if (n_digits_sorted_num == n) {\n    return(NA)\n  }\n  for (i in seq_along(n_digits)) {\n    if (n_digits[i] != n_digits_sorted[i]) {\n      n_digits_sorted[i] <- n_digits[i]\n      n_digits_sorted[which(n_digits_sorted == max(n_digits_sorted[i:length(n_digits_sorted)]))] <- n_digits[i]\n      break\n    }\n  }\n  n_digits_sorted_str <- paste(n_digits_sorted, collapse = \"\")\n  n_digits_sorted_num <- as.numeric(n_digits_sorted_str)\n  return(n_digits_sorted_num)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, the number is the largest possible\n  if (is.na(i)) return(NA)\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits to the right of the swapped digits sorted in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  # get the digits of the number\n  digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  # get the index of the first digit that is smaller than the following one\n  index <- which(digits[-length(digits)] < digits[-1])[1]\n  # if there is no such digit, return -1\n  if (length(index) == 0) {\n    return(-1)\n  }\n  # get the index of the smallest digit that is bigger than the digit at index\n  index2 <- which.min(digits[digits > digits[index]])\n  # swap the digits\n  digits[c(index, index2)] <- digits[c(index2, index)]\n  # sort the digits after index\n  digits[(index + 1):length(digits)] <- sort(digits[(index + 1):length(digits)])\n  # return the number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n"
  ]
}