{
  "name": "mbpp_407_rearrange_bigger",
  "language": "r",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nrearrange_bigger <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- rearrange_bigger\n    if(!identical(candidate(12), 21)){quit('no', 1)}\n    if(!identical(candidate(10), FALSE)){quit('no', 1)}\n    if(!identical(candidate(102), 120)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits to the right of the digit found above sorted in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  first_larger <- which(n[-1] > n[first_smaller])[1]\n  # Swap the first smaller digit with the first larger digit\n  n[c(first_smaller, first_larger)] <- n[c(first_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n[(first_smaller + 1):length(n)] <- sort(n[(first_smaller + 1):length(n)])\n  # Return the rearranged number\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str, decreasing = TRUE)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.integer(n_str)\n  n_str\n}\n\nrearrange_bigger(1234)\n",
    "\n  # Convert number to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap these digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_len <- nchar(n_str)\n  n_vec <- strsplit(n_str, \"\")[[1]]\n  for (i in (n_len - 1):1) {\n    if (n_vec[i] > n_vec[i + 1]) {\n      n_vec[i] <- n_vec[i + 1]\n      n_vec[i + 1] <- n_vec[i]\n      break\n    }\n  }\n  return(as.numeric(paste(n_vec, collapse = \"\")))\n}\n\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(4321)\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # get the length of the vector\n  n_length <- length(n_char)\n  # get the index of the last element\n  n_last <- n_length - 1\n  # get the index of the element before the last\n  n_before_last <- n_length - 2\n  # get the index of the element before the last\n  n_before_before_last <- n_length - 3\n  # get the last element\n  n_last_element <- n_char[n_last]\n  # get the element before the last\n  n_before_last_element <- n_char[n_before_last]\n  # get the element before the last\n  n_before_before_last_element <- n_char[n_before_before_last]\n  \n  # if the last element is greater than the element before the last\n  if (n_last_element > n_before_last_element) {\n    # swap the last two elements\n    n_char[n_last] <- n_before_last_element\n    n_char[n_before_last] <- n_last_element\n    # return the new number\n    return(as.numeric(paste(n_char, collapse = \"\")))\n  }\n  \n  # if the last element is greater than the element before the last\n  if (n_last_element > n_before_before_last_element) {\n    # swap the last two elements\n    n_char[n_last] <- n_before_before_last_element\n    n_char[n_before_before_last] <- n_last_element\n    # return the new number\n    return(as.numeric(paste(n_char, collapse = \"\")))\n  }\n  \n  # if the last element is greater than the element before the last\n  if (n_before_last_element > n_before_before_last_element) {\n    # swap the last two elements\n    n_char[n_before_last] <- n_before_before_last_element\n    n_char[n_before_before_last] <- n_before_",
    "\n  # Split the number into digits\n  digits <- strsplit(as.character(n), \"\")[[1]]\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the ith digit that is larger than the ith digit\n  j <- which.min(digits[-(1:i)][digits[-(1:i)] > digits[i]]) + i\n  # Swap the ith and jth digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the ith digit\n  digits[-(1:i)] <- sort(digits[-(1:i)])\n  # Return the rearranged number\n  as.numeric(paste(digits, collapse = \"\"))\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is bigger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number with the digits to the right of i sorted in ascending order\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character string\n  n_char <- as.character(n)\n  # Get the length of the string\n  n_len <- nchar(n_char)\n  # Get the index of the last digit\n  last_index <- n_len\n  # Get the index of the first digit\n  first_index <- 1\n  # Get the last digit\n  last_digit <- substr(n_char, last_index, last_index)\n  # Get the first digit\n  first_digit <- substr(n_char, first_index, first_index)\n  # Get the index of the digit that is greater than the last digit\n  greater_index <- which(substr(n_char, 1, last_index - 1) > last_digit)[1]\n  # Get the digit that is greater than the last digit\n  greater_digit <- substr(n_char, greater_index, greater_index)\n  # Get the index of the digit that is less than the first digit\n  less_index <- which(substr(n_char, greater_index + 1, n_len) < first_digit)[1] + greater_index\n  # Get the digit that is less than the first digit\n  less_digit <- substr(n_char, less_index, less_index)\n  # Get the index of the digit that is greater than the first digit\n  greater_first_index <- which(substr(n_char, greater_index + 1, n_len) > first_digit)[1] + greater_index\n  # Get the digit that is greater than the first digit\n  greater_first_digit <- substr(n_char, greater_first_index, greater_first_index)\n  # Get the index of the digit that is less than the last digit\n  less_last_index <- which(substr(n_char, 1, last_index - 1) < last_digit)[1]\n  # Get the digit that is less than the last digit\n  less_last_digit <- substr(n_char, less_last_index, less_last_index)\n  # Get the index of the digit that is greater than the last digit\n  greater_last_index <- which(substr(n_char,",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number formed by the digits to the right of i in ascending order\n  # followed by the digits to the left of i (in the original order)\n  return(as.numeric(paste(sort(n[-(1:i)]), collapse = \"\")), n[1:i], sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is not in descending order\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit larger than the digit at i\n  j <- which.min(n[i:length(n)]) + i - 1\n  # swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits after i\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  n_digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  n_digits_sorted <- sort(n_digits, decreasing = TRUE)\n  n_digits_sorted_str <- paste(n_digits_sorted, collapse = \"\")\n  n_digits_sorted_num <- as.numeric(n_digits_sorted_str)\n  if (n_digits_sorted_num == n) {\n    return(NA)\n  }\n  for (i in seq_along(n_digits)) {\n    if (n_digits[i] != n_digits_sorted[i]) {\n      n_digits_sorted[i] <- n_digits[i]\n      n_digits_sorted[which(n_digits_sorted == max(n_digits_sorted[i:length(n_digits_sorted)]))] <- n_digits[i]\n      break\n    }\n  }\n  n_digits_sorted_str <- paste(n_digits_sorted, collapse = \"\")\n  n_digits_sorted_num <- as.numeric(n_digits_sorted_str)\n  return(n_digits_sorted_num)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, the number is the largest possible\n  if (is.na(i)) return(NA)\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits to the right of the swapped digits sorted in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  # get the digits of the number\n  digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  # get the index of the first digit that is smaller than the following one\n  index <- which(digits[-length(digits)] < digits[-1])[1]\n  # if there is no such digit, return -1\n  if (length(index) == 0) {\n    return(-1)\n  }\n  # get the index of the smallest digit that is bigger than the digit at index\n  index2 <- which.min(digits[digits > digits[index]])\n  # swap the digits\n  digits[c(index, index2)] <- digits[c(index2, index)]\n  # sort the digits after index\n  digits[(index + 1):length(digits)] <- sort(digits[(index + 1):length(digits)])\n  # return the number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit from the right that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the rearranged number\n  as.numeric(n)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number formed by the digits to the right of i in ascending order\n  as.numeric(paste0(n[1:i], sort(n[-(1:i)])))\n}\n",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # Return the rearranged number\n  return(as.numeric(n_char))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the smallest digit that is larger than the digit to the left of the first smaller digit\n  smallest_larger <- which.min(n_char[-first_smaller] > n_char[first_smaller])\n  # swap the two digits\n  n_char[c(first_smaller, smallest_larger)] <- n_char[c(smallest_larger, first_smaller)]\n  # sort the digits to the right of the first smaller digit\n  n_char[-(1:first_smaller)] <- sort(n_char[-(1:first_smaller)])\n  # convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit greater than n[i]\n  j <- which.min(n[i:length(n)]) + i - 1\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the next bigger number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of index i in descending order\n  return(as.numeric(paste0(n[1:i], rev(n[-(1:i)]))))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first digit that is smaller than the one to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the smallest digit that is larger than the one to the left of the first_smaller digit\n  first_larger <- which.min(n_char[-first_smaller] > n_char[first_smaller])\n  # swap the digits\n  n_char[c(first_smaller, first_larger)] <- n_char[c(first_larger, first_smaller)]\n  # sort the digits to the right of the first_smaller digit\n  n_char[(first_smaller + 1):length(n_char)] <- sort(n_char[(first_smaller + 1):length(n_char)])\n  # convert to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of the first smaller digit that is larger than it\n  smallest_larger <- which.min(n[first_smaller:length(n)]) + first_smaller - 1\n  # swap the first smaller digit with the smallest larger digit\n  n[c(first_smaller, smallest_larger)] <- n[c(smallest_larger, first_smaller)]\n  # sort the digits to the right of the first smaller digit in ascending order\n  n[(first_smaller + 1):length(n)] <- sort(n[(first_smaller + 1):length(n)])\n  # return the rearranged number\n  as.numeric(n)\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the last digit that is smaller than the digit to its right\n  last_smaller <- which(n_char[-length(n_char)] < n_char[-1])[length(which(n_char[-length(n_char)] < n_char[-1]))]\n  # If no such digit exists, return -1\n  if (length(last_smaller) == 0) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the last digit that is smaller than the digit to its right\n  smallest_bigger <- which.min(n_char[last_smaller + 1:length(n_char)]) + last_smaller\n  # Swap the last digit that is smaller than the digit to its right with the smallest digit to the right of the last digit that is smaller than the digit to its right\n  n_char[c(last_smaller, smallest_bigger)] <- n_char[c(smallest_bigger, last_smaller)]\n  # Sort the digits to the right of the last digit that is smaller than the digit to its right in ascending order\n  n_char[last_smaller + 1:length(n_char)] <- sort(n_char[last_smaller + 1:length(n_char)])\n  # Return the rearranged number\n  return(as.numeric(paste(n_char, collapse = \"\")))\n}\n",
    "\n  # Convert the number to a character vector\n  n_str <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_str[-length(n_str)] < n_str[-1])[1]\n  # Find the smallest digit that is larger than the digit to the left of the first smaller digit\n  first_larger <- which.min(n_str[first_smaller:length(n_str)]) + first_smaller - 1\n  # Swap the two digits\n  n_str[c(first_smaller, first_larger)] <- n_str[c(first_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_str[(first_smaller + 1):length(n_str)] <- sort(n_str[(first_smaller + 1):length(n_str)])\n  # Return the number\n  return(as.numeric(n_str))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1235)\nrearrange_bigger(1236)\nrearrange_bigger(1237)\nrearrange_bigger(1238)\nrearrange_bigger(1239)\nrearrange_bigger(1243)\nrearrange_bigger(1245)\nrearrange_bigger(1253)\nrearrange_bigger(1254)\nrearrange_bigger(1256)\nrearrange_bigger(1257)\nrearrange_bigger(1258)\nrearrange_bigger(1259)\nrearrange_bigger(1265)\nrearrange_bigger(1267)\nrearrange_bigger(1268)\nrearrange_bigger(1269)\nrearrange_bigger(1275)\nrearrange_bigger(1276)\nrearrange_bigger(1278)\nrearrange_bigger(1279)\nrearrange_bigger(1285)\nrearrange_bigger(1286)\nrearrange_bigger(1287)\nrearrange_bigger(1289)\nrearrange_bigger(1295)\nrearrange_bigger(1296)\nrearrange_bigger(1297)\nrearrange_bigger(1298)\nrearrange_bigger(1235)\nrearrange_bigger(1236)\nrearrange_bigger(1237)\nrearrange_bigger(1238)\nrearrange_bigger(1239)\nrearrange_bigger(1243)\nrearrange_bigger(1245)\nrearrange_bigger(1253)\nrearrange_bigger(1254)\nre",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # if no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # find the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits to the right of index i in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # return the rearranged number\n  return(as.numeric(n))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than it\n  smallest_larger <- which.min(n_char[first_smaller + 1:length(n_char)][n_char[first_smaller + 1:length(n_char)] > n_char[first_smaller]]) + first_smaller\n  # Swap the first smaller digit with the smallest larger digit\n  n_char[c(first_smaller, smallest_larger)] <- n_char[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit in ascending order\n  n_char[first_smaller + 1:length(n_char)] <- sort(n_char[first_smaller + 1:length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit greater than the decreasing digit\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits after the decreasing digit\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert to numeric\n  as.numeric(n)\n}\n",
    "\n  # Convert number to character vector\n  n_chr <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  for (i in 1:(length(n_chr)-1)) {\n    if (n_chr[i] < n_chr[i+1]) {\n      break\n    }\n  }\n  # If no such digit exists, return -1\n  if (i == length(n_chr)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit found in the previous step\n  # that is larger than the digit found in the previous step\n  for (j in (i+1):length(n_chr)) {\n    if (n_chr[j] > n_chr[i]) {\n      break\n    }\n  }\n  # Swap the digits found in the previous two steps\n  temp <- n_chr[i]\n  n_chr[i] <- n_chr[j]\n  n_chr[j] <- temp\n  # Sort the digits to the right of the digit found in the first step in ascending order\n  n_chr[(i+1):length(n_chr)] <- sort(n_chr[(i+1):length(n_chr)])\n  # Return the rearranged number\n  return(as.numeric(paste(n_chr, collapse = \"\")))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return -1\n  if (is.na(i)) return(-1)\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of index i in ascending order followed by the digit at index i\n  return(as.numeric(paste0(sort(n[i+1:length(n)]), n[i])))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(12)\nrearrange_bigger(513)\nrearrange_bigger(2017)\nrearrange_bigger(414)\nrearrange_bigger(144)\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Get length of number\n  n_len <- length(n_char)\n  # Get all permutations of the number\n  n_perm <- permn(n_char)\n  # Get all permutations of the number that are larger than the original number\n  n_perm_bigger <- n_perm[n_perm[, n_len] > n_char[n_len], ]\n  # Get the first permutation that is larger than the original number\n  n_perm_bigger[1, ]\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  \n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  \n  # If no such digit exists, the number is the largest possible\n  if (is.na(i)) {\n    return(n)\n  }\n  \n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  \n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  \n  # Sort the digits to the right of i in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  \n  # Convert to numeric and return\n  as.numeric(n)\n}\n",
    "\n  if (n < 10) {\n    return(n)\n  }\n  digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  digits <- digits[order(digits, decreasing = TRUE)]\n  digits <- digits[digits < max(digits)]\n  if (length(digits) == 0) {\n    return(n)\n  }\n  max_digit <- max(digits)\n  digits <- digits[-which.max(digits)]\n  digits <- c(max_digit, digits)\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(4321)\nrearrange_bigger(531)\nrearrange_bigger(111)\nrearrange_bigger(54321)\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])\n  # If no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # Otherwise, find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n[-i])\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit at index i in ascending order\n  n[-i] <- sort(n[-i])\n  # Return the rearranged number\n  return(as.numeric(n))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first decreasing digit\n  first_decreasing <- which(n_char[-1] < n_char[-length(n_char)])[1]\n  # if no decreasing digit, return -1\n  if (length(first_decreasing) == 0) {\n    return(-1)\n  }\n  # find the smallest digit that is larger than the decreasing digit\n  smallest_larger <- which.min(n_char[-first_decreasing] > n_char[first_decreasing])\n  # swap the decreasing digit with the smallest larger digit\n  n_char[c(first_decreasing, smallest_larger)] <- n_char[c(smallest_larger, first_decreasing)]\n  # sort the digits after the decreasing digit\n  n_char[-(1:first_decreasing)] <- sort(n_char[-(1:first_decreasing)])\n  # convert to numeric\n  as.numeric(n_char)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_sorted <- sort(n_str_rev)\n  n_str_rev_sorted_str <- paste(n_str_rev_sorted, collapse = \"\")\n  n_str_rev_sorted_str_rev <- rev(n_str_rev_sorted_str)\n  n_str_rev_sorted_str_rev_num <- as.numeric(n_str_rev_sorted_str_rev)\n  return(n_str_rev_sorted_str_rev_num)\n}\n",
    "\n  # Convert to string\n  n <- as.character(n)\n  # Get the length of the string\n  n_len <- nchar(n)\n  # Get the last digit\n  last_digit <- substr(n, n_len, n_len)\n  # Get the rest of the digits\n  rest_digits <- substr(n, 1, n_len - 1)\n  # Get the index of the last digit in the rest of the digits\n  last_digit_index <- which(rest_digits == last_digit)\n  # Get the index of the digit that is smaller than the last digit\n  smaller_digit_index <- which(rest_digits < last_digit)[1]\n  # Get the smaller digit\n  smaller_digit <- substr(rest_digits, smaller_digit_index, smaller_digit_index)\n  # Replace the smaller digit with the last digit\n  rest_digits <- substr(rest_digits, 1, smaller_digit_index - 1) %>%\n    paste0(last_digit) %>%\n    paste0(substr(rest_digits, smaller_digit_index + 1, n_len - 1))\n  # Replace the last digit with the smaller digit\n  rest_digits <- substr(rest_digits, 1, last_digit_index - 1) %>%\n    paste0(smaller_digit) %>%\n    paste0(substr(rest_digits, last_digit_index + 1, n_len - 1))\n  # Sort the rest of the digits\n  rest_digits <- sort(rest_digits)\n  # Return the rearranged number\n  return(as.numeric(paste0(rest_digits, last_digit)))\n}\n",
    "\n  # Get the digits of the number\n  digits <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  smallest_larger <- which.min(digits[-first_smaller] > digits[first_smaller]) + first_smaller\n  # Swap the first smaller digit with the smallest larger digit\n  digits[c(first_smaller, smallest_larger)] <- digits[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  digits[-(1:first_smaller)] <- sort(digits[-(1:first_smaller)])\n  # Return the rearranged number\n  as.integer(digits)\n}\n",
    "\n  n_str <- as.character(n)\n  n_len <- nchar(n_str)\n  n_vec <- strsplit(n_str, \"\")[[1]]\n  n_vec <- as.numeric(n_vec)\n  n_vec <- n_vec[order(n_vec, decreasing = TRUE)]\n  n_vec <- as.character(n_vec)\n  n_vec <- paste(n_vec, collapse = \"\")\n  n_vec <- as.numeric(n_vec)\n  if (n_vec > n) {\n    return(n_vec)\n  } else {\n    return(NA)\n  }\n}\n",
    "\n  n_digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  n_digits_sorted <- sort(n_digits, decreasing = TRUE)\n  if (all(n_digits == n_digits_sorted)) {\n    return(NA)\n  }\n  n_digits_sorted_perm <- permutations(n_digits_sorted)\n  n_digits_sorted_perm_df <- data.frame(n_digits_sorted_perm)\n  n_digits_sorted_perm_df$n <- apply(n_digits_sorted_perm_df, 1, function(x) {\n    as.integer(paste(x, collapse = \"\"))\n  })\n  n_digits_sorted_perm_df <- n_digits_sorted_perm_df[order(n_digits_sorted_perm_df$n), ]\n  n_digits_sorted_perm_df$n[n_digits_sorted_perm_df$n > n]\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is less than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit that is greater than the digit at i\n  j <- which.min(n_char[i:length(n_char)]) + i - 1\n  # Swap the digits at i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of i\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Return the number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  # If no such digit exists, return -1\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[-i][n_char[-i] > n_char[i]]) + i\n  # Swap the digits at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Convert the character vector back to a number and return it\n  return(as.numeric(n_char))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at position i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at positions i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits after position i\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector\n  n_chars <- strsplit(as.character(n), \"\")[[1]]\n  \n  # Find the first digit that is smaller than the digit to its right\n  for (i in seq_along(n_chars)[-1]) {\n    if (n_chars[i] < n_chars[i + 1]) {\n      break\n    }\n  }\n  \n  # If no such digit exists, return -1\n  if (i == length(n_chars)) {\n    return(-1)\n  }\n  \n  # Find the smallest digit to the right of the pivot that is larger than the pivot\n  for (j in seq_along(n_chars)[-(1:i)]) {\n    if (n_chars[j] > n_chars[i]) {\n      break\n    }\n  }\n  \n  # Swap the pivot with the smallest digit to its right\n  n_chars[c(i, j)] <- n_chars[c(j, i)]\n  \n  # Reverse the digits to the right of the pivot\n  n_chars[-(1:i)] <- rev(n_chars[-(1:i)])\n  \n  # Return the rearranged number\n  return(as.numeric(paste(n_chars, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of i that is greater than n[i]\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of i in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-c(1:i)]), sep = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first element that is smaller than the element to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the index of the smallest element that is larger than n[i]\n  j <- which.min(n[i:length(n)]) + i - 1\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  return(as.integer(paste(n[1:i], sort(n[-c(1:i)]), sep = \"\")))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  first_small <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the smallest digit that is larger than the first_small digit\n  first_big <- which.min(n_char[-first_small] > n_char[first_small])\n  # swap the two digits\n  n_char[c(first_small, first_big)] <- n_char[c(first_big, first_small)]\n  # sort the digits to the right of the first_small digit\n  n_char[(first_small + 1):length(n_char)] <- sort(n_char[(first_small + 1):length(n_char)])\n  # convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- sort(n, decreasing = TRUE)\n  n <- paste(n, collapse = \"\")\n  n <- as.numeric(n)\n  n\n}\n\nrearrange_bigger(123)\nrearrange_bigger(2017)\nrearrange_bigger(9)\nrearrange_bigger(111)\nrearrange_bigger(531)\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # find the first decreasing digit\n  i <- which(n[-1] > n[-length(n)])[1]\n  # find the smallest digit larger than n[i]\n  j <- which.min(n[i:length(n)]) + i - 1\n  # swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits after n[i]\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # convert to integer\n  as.integer(n)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first decreasing digit\n  i <- which(n[-1] > n[-length(n)])[1]\n  # find the smallest digit greater than the decreasing digit\n  j <- which.min(n[i:length(n)]) + i - 1\n  # swap the decreasing digit and the smallest digit greater than the decreasing digit\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits after the decreasing digit\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # convert to numeric\n  as.numeric(n)\n}\n",
    "\n    # convert the number to a string\n    n_str <- as.character(n)\n    # convert the string to a vector of characters\n    n_vec <- strsplit(n_str, \"\")[[1]]\n    # find the index of the first character that is smaller than the next character\n    i <- which(n_vec[-length(n_vec)] < n_vec[-1])[1]\n    # find the index of the smallest character that is larger than the character at index i\n    j <- which.min(n_vec[n_vec > n_vec[i]])\n    # swap the characters at index i and j\n    n_vec[c(i, j)] <- n_vec[c(j, i)]\n    # sort the characters after index i\n    n_vec[-(1:i)] <- sort(n_vec[-(1:i)])\n    # convert the vector of characters to a string\n    n_str <- paste(n_vec, collapse = \"\")\n    # convert the string to a number\n    as.numeric(n_str)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] > n[-1])[1]\n  # Find the smallest digit larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits after i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  # Convert the number to a string\n  n_string <- as.character(n)\n  # Convert the string to a vector of characters\n  n_vector <- strsplit(n_string, \"\")[[1]]\n  # Find the first index where the number is smaller than the number to the right\n  i <- which(n_vector[-length(n_vector)] < n_vector[-1])[1]\n  # Find the smallest number to the right of the number that is larger than the number\n  j <- which.min(n_vector[-i] > n_vector[i]) + i\n  # Swap the numbers\n  n_vector[c(i, j)] <- n_vector[c(j, i)]\n  # Sort the numbers to the right of the number\n  n_vector[-(1:i)] <- sort(n_vector[-(1:i)])\n  # Convert the vector of characters to a string\n  n_string <- paste(n_vector, collapse = \"\")\n  # Convert the string to a number\n  as.numeric(n_string)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is less than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is greater than it\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of the digit found above in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  # First, we need to find the first digit that is smaller than the one to its right.\n  # We'll use a for loop to do this.\n  for (i in 1:(nchar(n) - 1)) {\n    # If the digit at position i is smaller than the digit at position i + 1,\n    # we've found the digit we're looking for.\n    if (substr(n, i, i) < substr(n, i + 1, i + 1)) {\n      # We'll save the digit we're looking for in a variable called \"digit\".\n      digit <- substr(n, i, i)\n      # We'll also save the position of this digit in a variable called \"position\".\n      position <- i\n      # We'll break out of the for loop.\n      break\n    }\n  }\n  # Now we need to find the smallest digit to the right of the digit we're looking for\n  # that is larger than the digit we're looking for.\n  # We'll use a for loop to do this.\n  for (i in (position + 1):nchar(n)) {\n    # If the digit at position i is larger than the digit we're looking for,\n    # we'll save it in a variable called \"smallest_larger_digit\".\n    if (substr(n, i, i) > digit) {\n      smallest_larger_digit <- substr(n, i, i)\n      # We'll also save the position of this digit in a variable called \"smallest_larger_digit_position\".\n      smallest_larger_digit_position <- i\n      # We'll break out of the for loop.\n      break\n    }\n  }\n  # Now we need to swap the digit we're looking for with the smallest larger digit.\n  # We'll use the substr() function to do this.\n  # We'll save the result in a variable called \"result\".\n  result <- substr(n, 1, position - 1)\n  result <- paste(result, smallest_larger_digit, sep = \"\")\n  result <- paste(result, substr(n, position + 1, smallest_larger_digit_position - 1), sep = \"\")\n  result <- paste(result, digit, sep =",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # swap the digits at i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # sort the digits to the right of i\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a string\n  n_str <- as.character(n)\n  # Split the string into a vector of characters\n  n_str_split <- strsplit(n_str, \"\")[[1]]\n  # Find the index of the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_str_split[-length(n_str_split)] < n_str_split[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at the first_smaller index\n  smallest_larger <- which.min(n_str_split[-first_smaller] > n_str_split[first_smaller]) + first_smaller\n  # Swap the digits at the first_smaller and smallest_larger indices\n  n_str_split[c(first_smaller, smallest_larger)] <- n_str_split[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first_smaller index\n  n_str_split[(first_smaller + 1):length(n_str_split)] <- sort(n_str_split[(first_smaller + 1):length(n_str_split)])\n  # Convert the vector of characters back to a number\n  as.numeric(paste(n_str_split, collapse = \"\"))\n}\n",
    "\n  # Convert number to character vector\n  n_chr <- as.character(n)\n  # Create a vector of the digits of the number\n  n_digits <- as.numeric(strsplit(n_chr, \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  # If no such digit exists, return -1\n  for (i in 1:(length(n_digits) - 1)) {\n    if (n_digits[i] < n_digits[i + 1]) {\n      break\n    }\n  }\n  if (i == length(n_digits)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  # Swap these two digits\n  for (j in (i + 1):length(n_digits)) {\n    if (n_digits[j] > n_digits[i]) {\n      n_digits[i] <- n_digits[j]\n      n_digits[j] <- n_digits[i]\n      break\n    }\n  }\n  # Sort the digits to the right of the digit found above in ascending order\n  n_digits[(i + 1):length(n_digits)] <- sort(n_digits[(i + 1):length(n_digits)])\n  # Convert the vector of digits back to a number\n  return(as.numeric(paste(n_digits, collapse = \"\")))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # create a vector of all permutations of the digits\n  perms <- permn(n)\n  # convert to numeric vector\n  perms <- as.numeric(perms)\n  # sort the vector\n  perms <- sort(perms)\n  # find the index of the original number\n  idx <- which(perms == n)\n  # return the next bigger number\n  return(perms[idx + 1])\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first element that is less than the element to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # If no such element exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the index of the smallest element to the right of i that is greater than n_char[i]\n  j <- which.min(n_char[i + 1:length(n_char)][n_char[i + 1:length(n_char)] > n_char[i]]) + i\n  # Swap n_char[i] and n_char[j]\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Return the rearranged number\n  return(as.integer(paste(n_char[1:i], sort(n_char[i + 1:length(n_char)]), sep = \"\")))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number with the digits to the right of i sorted in ascending order\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the index of the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert to character\n  n <- as.character(n)\n  # Get the permutations of the digits\n  perms <- permutations(n)\n  # Convert to numeric\n  perms <- as.numeric(perms)\n  # Sort\n  perms <- sort(perms)\n  # Get the index of the original number\n  index <- which(perms == n)\n  # Return the next bigger number\n  if (index == length(perms)) {\n    return(NA)\n  } else {\n    return(perms[index + 1])\n  }\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(123465)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[order(n, decreasing = TRUE)]\n  n <- as.character(n)\n  n <- paste(n, collapse = \"\")\n  n <- as.numeric(n)\n  n\n}\n\nrearrange_bigger(12345)\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the rearranged number\n  as.numeric(n)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of i in ascending order\n  # followed by the digits to the left of i (in the original order)\n  as.numeric(paste0(sort(n[-(1:i)]), n[1:i]))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of i\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  digits <- as.character(n)\n  digits <- strsplit(digits, \"\")[[1]]\n  digits <- digits[order(digits)]\n  digits <- paste(digits, collapse = \"\")\n  digits <- as.numeric(digits)\n  digits\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(12345)\nrearrange_bigger(54321)\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the first digit that is less than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit that is greater than the digit at i\n  j <- which.min(n[i:length(n)]) + i - 1\n  # Swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits after i\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Return the number\n  as.integer(n)\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number formed by the digits to the right of i in ascending order\n  return(as.numeric(paste0(n[1:i], sort(n[-(1:i)]))))\n}\n",
    "\n  # convert to string\n  n_str <- as.character(n)\n  # convert to numeric vector\n  n_vec <- as.numeric(strsplit(n_str, \"\")[[1]])\n  # find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_vec[-length(n_vec)] < n_vec[-1])[1]\n  # find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  first_larger <- which.min(n_vec[first_smaller:length(n_vec)]) + first_smaller - 1\n  # swap the first smaller digit with the first larger digit\n  n_vec[c(first_smaller, first_larger)] <- n_vec[c(first_larger, first_smaller)]\n  # sort the digits to the right of the first smaller digit\n  n_vec[(first_smaller + 1):length(n_vec)] <- sort(n_vec[(first_smaller + 1):length(n_vec)])\n  # convert to numeric\n  as.numeric(paste(n_vec, collapse = \"\"))\n}\n\nrearrange_bigger(12345)\nrearrange_bigger(12354)\nrearrange_bigger(12453)\nrearrange_bigger(12534)\nrearrange_bigger(13245)\nrearrange_bigger(13524)\nrearrange_bigger(14235)\nrearrange_bigger(14523)\nrearrange_bigger(15432)\nrearrange_bigger(21543)\nrearrange_bigger(23145)\nrearrange_bigger(23514)\nrearrange_bigger(24135)\nrearrange_bigger(24513)\nrearrange_bigger(25134)\nrearrange_bigger(25413)\nrearrange_bigger(31245)\nrearrange_bigger(31524)\nrearrange_bigger(32145)\nrearrange_bigger(32514)\nrearrange_bigger(",
    "\n  # Find the first digit that is smaller than the one to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which(n[i+1:length(n)] > n[i])[1] + i\n  # Swap the digits at i and j\n  n[c(i,j)] <- n[c(j,i)]\n  # Sort the digits to the right of i\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)], decreasing = TRUE)\n  # Return the number\n  return(n)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first non-increasing digit\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the first non-increasing digit\n  j <- which.min(n[i:length(n)]) + i - 1\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the first non-increasing digit\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert back to numeric\n  as.numeric(n)\n}\n\nrearrange_bigger(12345)\nrearrange_bigger(12354)\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(12453)\nrearrange_bigger(12534)\nrearrange_bigger(12543)\nrearrange_bigger(13245)\nrearrange_bigger(13254)\nrearrange_bigger(13425)\nrearrange_bigger(13452)\nrearrange_bigger(13524)\nrearrange_bigger(13542)\nrearrange_bigger(14235)\nrearrange_bigger(14253)\nrearrange_bigger(14325)\nrearrange_bigger(14352)\nrearrange_bigger(14523)\nrearrange_bigger(14532)\nrearrange_bigger(15234)\nrearrange_bigger(15243)\nrearrange_bigger(15324)\nrearrange_bigger(15342)\nrearrange_bigger(15423)\nrearrange_bigger(15432)\nrearrange_bigger(21345)\nrearrange_bigger(21354)\nrearrange_bigger(21435)\nrearrange_bigger(21453)\nrearrange_bigger(21534)\nrearrange_big",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the index of the first element that is smaller than the next element\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the index of the smallest element that is bigger than the element at index i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # swap the elements at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n_char[1:i], sort(n_char[i+1:length(n_char)]), sep = \"\"))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] > n[-1])[1]\n  # Find the smallest digit greater than n[i]\n  j <- which.min(n[-(1:i)])\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to the right of it\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, there is no bigger number\n  if (is.na(i)) return(NA)\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits to the right of i sorted in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  # Convert to string\n  n_str <- as.character(n)\n  # Get the length of the string\n  n_len <- nchar(n_str)\n  # Get the last digit\n  last_digit <- substr(n_str, n_len, n_len)\n  # Get the rest of the digits\n  rest_digits <- substr(n_str, 1, n_len - 1)\n  # Get the length of the rest of the digits\n  rest_len <- nchar(rest_digits)\n  # Get the last digit of the rest of the digits\n  last_rest_digit <- substr(rest_digits, rest_len, rest_len)\n  # Get the rest of the rest of the digits\n  rest_rest_digits <- substr(rest_digits, 1, rest_len - 1)\n  # Check if the last digit of the rest of the digits is bigger than the last digit\n  if (last_rest_digit > last_digit) {\n    # If so, swap the last digit of the rest of the digits with the last digit\n    last_rest_digit <- last_digit\n    last_digit <- substr(rest_digits, rest_len, rest_len)\n    # Sort the rest of the digits\n    rest_digits <- sort(c(rest_rest_digits, last_digit))\n    # Return the new number\n    return(as.numeric(paste(rest_digits, last_rest_digit, sep = \"\")))\n  } else {\n    # If not, return -1\n    return(-1)\n  }\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  for (i in seq_along(n)) {\n    if (n[i] < n[i+1]) {\n      break\n    }\n  }\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  for (j in seq_along(n[i+1:length(n)])) {\n    if (n[i] < n[i+j]) {\n      break\n    }\n  }\n  # Swap the two digits\n  n[c(i, i+j)] <- n[c(i+j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[i+1:length(n)] <- sort(n[i+1:length(n)])\n  # Return the rearranged number\n  return(as.numeric(n))\n}\n",
    "\n  # Convert number to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of i in ascending order\n  return(as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\")))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the next one\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit that is larger than n[i]\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Create a vector of digits\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is less than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the digit that is greater than the digit\n  j <- which.min(digits[i+1:length(digits)][digits[i+1:length(digits)] > digits[i]]) + i\n  # Swap the digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the digit\n  digits[(i+1):length(digits)] <- sort(digits[(i+1):length(digits)])\n  # Return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  if (n < 10) {\n    return(n)\n  }\n  else {\n    digits <- strsplit(as.character(n), \"\")[[1]]\n    digits <- digits[order(digits)]\n    digits <- paste(digits, collapse = \"\")\n    digits <- as.numeric(digits)\n    if (digits > n) {\n      return(digits)\n    }\n    else {\n      return(n)\n    }\n  }\n}\n\nrearrange_bigger(12)\nrearrange_bigger(513)\nrearrange_bigger(2017)\nrearrange_bigger(414)\nrearrange_bigger(144)\n",
    "\n  digits <- as.character(n)\n  digits <- strsplit(digits, \"\")[[1]]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] > n[-1])[1]\n  # Find the smallest digit greater than n[i]\n  j <- which.min(n[-(1:i)])\n  # Swap digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort digits after i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Convert to numeric\n  as.numeric(n)\n}\n",
    "\n  # get the digits of the number\n  digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  # get the length of the number\n  len <- length(digits)\n  # get the index of the first digit that is smaller than the digit to its right\n  i <- which(digits[1:(len - 1)] < digits[2:len])[1]\n  # if no such digit exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # get the index of the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which(digits[(i + 1):len] > digits[i])[1] + i\n  # swap the digits at indexes i and j\n  digits[c(i, j)] <- digits[c(j, i)]\n  # sort the digits to the right of index i\n  digits[(i + 1):len] <- sort(digits[(i + 1):len], decreasing = FALSE)\n  # return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is less than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is greater than it\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits found above\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n_char[i+1:length(n_char)] <- sort(n_char[i+1:length(n_char)])\n  # Return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the index of the smallest digit to the right of the digit at i that is larger than the digit at i\n  j <- which.min(n[(i+1):length(n)][n[(i+1):length(n)] > n[i]]) + i\n  # Swap the digits at i and j\n  n[c(i,j)] <- n[c(j,i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[(i+1):length(n)]), sep=\"\"))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is bigger than it\n  smallest_bigger <- which.min(n_char[-(1:first_smaller)][n_char[-(1:first_smaller)] > n_char[first_smaller]])\n  # Swap the two digits\n  n_char[c(first_smaller, first_smaller + smallest_bigger)] <- n_char[c(first_smaller + smallest_bigger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[(first_smaller + 1):length(n_char)] <- sort(n_char[(first_smaller + 1):length(n_char)])\n  # Return the result as a number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to character\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[(i+1):length(n)][n[(i+1):length(n)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits after the digit found above in descending order\n  return(as.numeric(paste(n[1:i], rev(n[(i+1):length(n)]), sep = \"\")))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the index of the smallest digit to the right of the digit at index i\n  j <- which.min(n[i:length(n)]) + i - 1\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert the character vector to a number and return it\n  return(as.numeric(n))\n}\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_sorted <- sort(n_str_rev)\n  n_str_rev_sorted_rev <- rev(n_str_rev_sorted)\n  n_str_rev_sorted_rev_str <- paste(n_str_rev_sorted_rev, collapse = \"\")\n  n_str_rev_sorted_rev_num <- as.numeric(n_str_rev_sorted_rev_str)\n  return(n_str_rev_sorted_rev_num)\n}\n",
    "\n  # convert to string\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # if no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits to the right of the digit found above in ascending order\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)])\n  # return the number\n  return(as.numeric(n))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[order(n, decreasing = TRUE)]\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1234321)\nrearrange_bigger(1234567890)\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # get the length of the number\n  n_len <- length(n)\n  # get the first digit\n  first_digit <- substr(n, 1, 1)\n  # get the last digit\n  last_digit <- substr(n, n_len, n_len)\n  # get the rest of the digits\n  rest_digits <- substr(n, 2, n_len - 1)\n  # if the first digit is smaller than the last digit\n  if (first_digit < last_digit) {\n    # return the last digit + the rest of the digits + the first digit\n    return(paste(last_digit, rest_digits, first_digit, sep = \"\"))\n  } else {\n    # return the first digit + the rest of the digits + the last digit\n    return(paste(first_digit, rest_digits, last_digit, sep = \"\"))\n  }\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- sort(n_str, decreasing = TRUE)\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\n",
    "\n  # Get the digits of the number\n  digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the digit that is bigger than the digit\n  j <- which.min(digits[i+1:length(digits)][digits[i+1:length(digits)] > digits[i]]) + i\n  # Swap the digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the digit\n  digits[(i+1):length(digits)] <- sort(digits[(i+1):length(digits)])\n  # Return the number\n  return(as.integer(paste(digits, collapse = \"\")))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(12345)\n",
    "\n  # Convert the number to a character vector\n  n_chars <- strsplit(as.character(n), \"\")[[1]]\n  \n  # Find the first digit that is smaller than the digit to its right\n  for (i in 1:(length(n_chars) - 1)) {\n    if (n_chars[i] < n_chars[i + 1]) {\n      break\n    }\n  }\n  \n  # If no such digit exists, return -1\n  if (i == length(n_chars)) {\n    return(-1)\n  }\n  \n  # Find the smallest digit to the right of the digit found above that is larger than it\n  for (j in (i + 1):length(n_chars)) {\n    if (n_chars[j] > n_chars[i]) {\n      break\n    }\n  }\n  \n  # Swap the two digits\n  n_chars[i] <- n_chars[j]\n  n_chars[j] <- n_chars[i]\n  \n  # Sort the digits to the right of the digit found above in ascending order\n  n_chars[(i + 1):length(n_chars)] <- sort(n_chars[(i + 1):length(n_chars)])\n  \n  # Convert the character vector to a number and return it\n  return(as.numeric(paste(n_chars, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n_chars <- as.character(n)\n  # Find the index of the first decreasing digit\n  i <- which(n_chars[-1] > n_chars[-length(n_chars)])[1]\n  # Find the index of the smallest digit that is greater than the digit at i\n  j <- which.min(n_chars[-i][n_chars[-i] > n_chars[i]]) + i\n  # Swap the digits at i and j\n  n_chars[c(i, j)] <- n_chars[c(j, i)]\n  # Sort the digits after i\n  n_chars[-(1:i)] <- sort(n_chars[-(1:i)])\n  # Convert back to numeric\n  as.numeric(n_chars)\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # convert to string\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # if no such digit exists, return -1\n  if (is.na(i)) return(-1)\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits at i and j\n  n[c(i,j)] <- n[c(j,i)]\n  # return the number formed by the digits to the right of i in ascending order\n  return(as.numeric(paste0(n[1:i], sort(n[-(1:i)]))))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the result\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- sort(n_str, decreasing = TRUE)\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\n",
    "\n  n_str <- as.character(n)\n  n_len <- nchar(n_str)\n  n_vec <- strsplit(n_str, \"\")[[1]]\n  n_vec <- as.numeric(n_vec)\n  for (i in (n_len - 1):1) {\n    if (n_vec[i] > n_vec[i + 1]) {\n      n_vec[i] <- n_vec[i] + n_vec[i + 1]\n      n_vec[i + 1] <- n_vec[i] - n_vec[i + 1]\n      n_vec[i] <- n_vec[i] - n_vec[i + 1]\n      break\n    }\n  }\n  n_vec <- as.character(n_vec)\n  n_vec <- paste(n_vec, collapse = \"\")\n  n_vec <- as.numeric(n_vec)\n  return(n_vec)\n}\n\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(4321)\nrearrange_bigger(534976)\n",
    "\n  # create a vector of digits\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # find the smallest digit to the right of the digit found above\n  j <- which.min(digits[i+1:length(digits)]) + i\n  # swap the digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # sort the digits to the right of the digit found above\n  digits[i+1:length(digits)] <- sort(digits[i+1:length(digits)])\n  # return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Get the length of the number\n  n_len <- length(n_char)\n  # Get the last digit\n  n_last <- n_char[n_len]\n  # Get the second to last digit\n  n_second_last <- n_char[n_len - 1]\n  # Get the third to last digit\n  n_third_last <- n_char[n_len - 2]\n  # Get the fourth to last digit\n  n_fourth_last <- n_char[n_len - 3]\n  # Get the fifth to last digit\n  n_fifth_last <- n_char[n_len - 4]\n  # Get the sixth to last digit\n  n_sixth_last <- n_char[n_len - 5]\n  # Get the seventh to last digit\n  n_seventh_last <- n_char[n_len - 6]\n  # Get the eighth to last digit\n  n_eighth_last <- n_char[n_len - 7]\n  # Get the ninth to last digit\n  n_ninth_last <- n_char[n_len - 8]\n  # Get the tenth to last digit\n  n_tenth_last <- n_char[n_len - 9]\n  # Get the eleventh to last digit\n  n_eleventh_last <- n_char[n_len - 10]\n  # Get the twelfth to last digit\n  n_twelfth_last <- n_char[n_len - 11]\n  # Get the thirteenth to last digit\n  n_thirteenth_last <- n_char[n_len - 12]\n  # Get the fourteenth to last digit\n  n_fourteenth_last <- n_char[n_len - 13]\n  # Get the fifteenth to last digit\n  n_fifteenth_last <- n_char[n_len - 14]\n  # Get the sixteenth to last digit\n  n_sixteenth_last <- n_char[n_len - 15]\n  # Get the seventeenth to last digit\n  n_seventeenth_last <- n_char[n_",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the number with the digits after i sorted in ascending order\n  as.numeric(paste0(n[1:i], sort(n[-(1:i)])))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the last index of the number that is smaller than the number to its right\n  i <- which(n[-length(n)] < n[-1])[length(n)]\n  # If no such index exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the smallest number to the right of the index that is larger than the number at the index\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the numbers at the index and the smallest number\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number with the digits rearranged\n  return(as.numeric(paste(n[1:i], sort(n[-c(1:i)]), sep = \"\")))\n}\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[1:(length(n)-1)] < n[2:length(n)])[1]\n  # find the index of the smallest digit to the right of the digit at i that is larger than the digit at i\n  j <- which.min(n[(i+1):length(n)][n[(i+1):length(n)] > n[i]]) + i\n  # swap the digits at i and j\n  n[c(i,j)] <- n[c(j,i)]\n  # sort the digits to the right of i\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)])\n  # convert to numeric\n  as.numeric(n)\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of i\n  n_char[i+1:length(n_char)] <- sort(n_char[i+1:length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # If no such digit exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[-(1:i)][n_char[-(1:i)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Return the rearranged number as an integer\n  return(as.integer(n_char))\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the last digit that is smaller than the digit to its right\n  last_smaller <- which(n_char[-length(n_char)] < n_char[-1])[length(which(n_char[-length(n_char)] < n_char[-1]))]\n  # If no such digit exists, the number is the largest possible rearrangement\n  if (length(last_smaller) == 0) {\n    return(n)\n  }\n  # Find the smallest digit to the right of the last digit that is smaller than the digit to its right\n  smallest_right <- which.min(n_char[last_smaller + 1:length(n_char)])\n  # Swap the two digits\n  n_char[last_smaller] <- n_char[last_smaller + smallest_right]\n  n_char[last_smaller + smallest_right] <- n_char[last_smaller]\n  # Sort the digits to the right of the last digit that is smaller than the digit to its right\n  n_char[last_smaller + 1:length(n_char)] <- sort(n_char[last_smaller + 1:length(n_char)])\n  # Return the rearranged number\n  return(as.numeric(n_char))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than the digit found above\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap the digits found above\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert to numeric\n  as.numeric(n)\n}\n",
    "\n  # Create a vector of the digits of n\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  smallest_larger <- which.min(digits[first_smaller + 1:length(digits)][digits[first_smaller + 1:length(digits)] > digits[first_smaller]]) + first_smaller\n  # Swap the first smaller digit with the smallest larger digit\n  digits[c(first_smaller, smallest_larger)] <- digits[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  digits[first_smaller + 1:length(digits)] <- sort(digits[first_smaller + 1:length(digits)])\n  # Return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(12345)\n",
    "\n  # Convert number to string\n  n_string <- as.character(n)\n  # Convert string to vector of digits\n  n_digits <- as.numeric(strsplit(n_string, \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  # If no such digit exists, the number is already the largest possible\n  # permutation of its digits, so return -1\n  i <- 1\n  while (i < length(n_digits) && n_digits[i] >= n_digits[i + 1]) {\n    i <- i + 1\n  }\n  if (i == length(n_digits)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the pivot that is larger than the pivot\n  j <- i + 1\n  while (j < length(n_digits) && n_digits[j] > n_digits[i]) {\n    j <- j + 1\n  }\n  j <- j - 1\n  # Swap the pivot and the smallest digit to its right\n  n_digits[i] <- n_digits[i] + n_digits[j]\n  n_digits[j] <- n_digits[i] - n_digits[j]\n  n_digits[i] <- n_digits[i] - n_digits[j]\n  # Reverse the digits to the right of the pivot\n  n_digits[(i + 1):length(n_digits)] <- rev(n_digits[(i + 1):length(n_digits)])\n  # Convert vector of digits back to number\n  return(as.numeric(paste(n_digits, collapse = \"\")))\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- sort(n_str, decreasing = TRUE)\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n",
    "\n    # convert to string\n    n_str <- as.character(n)\n    # get the length of the string\n    n_len <- nchar(n_str)\n    # get the last digit\n    last_digit <- substr(n_str, n_len, n_len)\n    # get the rest of the digits\n    rest_digits <- substr(n_str, 1, n_len - 1)\n    # get the length of the rest of the digits\n    rest_len <- nchar(rest_digits)\n    # get the last digit of the rest of the digits\n    last_digit_rest <- substr(rest_digits, rest_len, rest_len)\n    # get the rest of the digits of the rest of the digits\n    rest_digits_rest <- substr(rest_digits, 1, rest_len - 1)\n    # get the length of the rest of the digits of the rest of the digits\n    rest_len_rest <- nchar(rest_digits_rest)\n    # get the last digit of the rest of the digits of the rest of the digits\n    last_digit_rest_rest <- substr(rest_digits_rest, rest_len_rest, rest_len_rest)\n    # get the rest of the digits of the rest of the digits of the rest of the digits\n    rest_digits_rest_rest <- substr(rest_digits_rest, 1, rest_len_rest - 1)\n    # get the length of the rest of the digits of the rest of the digits of the rest of the digits\n    rest_len_rest_rest <- nchar(rest_digits_rest_rest)\n    # get the last digit of the rest of the digits of the rest of the digits of the rest of the digits\n    last_digit_rest_rest_rest <- substr(rest_digits_rest_rest, rest_len_rest_rest, rest_len_rest_rest)\n    # get the rest of the digits of the rest of the digits of the rest of the digits of the rest of the digits\n    rest_digits_rest_rest_rest <- substr(rest_digits_rest_rest, 1, rest_len_rest_rest - 1)\n    #",
    "\n  # Convert the number to a character vector\n  n_chars <- strsplit(as.character(n), \"\")[[1]]\n  \n  # Find the first digit that is smaller than the digit to its right\n  # If there is no such digit, the number is the largest possible\n  for (i in 1:(length(n_chars) - 1)) {\n    if (n_chars[i] < n_chars[i + 1]) {\n      break\n    }\n  }\n  \n  # If the number is the largest possible, return -1\n  if (i == length(n_chars)) {\n    return(-1)\n  }\n  \n  # Find the smallest digit to the right of the digit that is smaller than the digit to its right\n  # Swap these digits\n  for (j in (i + 1):length(n_chars)) {\n    if (n_chars[j] < n_chars[i]) {\n      temp <- n_chars[i]\n      n_chars[i] <- n_chars[j]\n      n_chars[j] <- temp\n      break\n    }\n  }\n  \n  # Reverse the digits to the right of the digit that is smaller than the digit to its right\n  n_chars[(i + 1):length(n_chars)] <- rev(n_chars[(i + 1):length(n_chars)])\n  \n  # Convert the character vector back to a number\n  return(as.numeric(paste(n_chars, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of i in ascending order\n  as.numeric(paste0(n[1:i], sort(n[-1:i])))\n}\n",
    "\n  # Create a vector of digits\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is smaller than the one to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of i that is bigger than digits[i]\n  j <- which(digits[i+1:length(digits)] > digits[i])[1] + i\n  # Swap digits[i] and digits[j]\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of i\n  digits[(i+1):length(digits)] <- sort(digits[(i+1):length(digits)])\n  # Return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  n_digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  n_digits_sorted <- sort(n_digits, decreasing = TRUE)\n  if (all(n_digits == n_digits_sorted)) {\n    return(NA)\n  }\n  n_digits_sorted_index <- match(n_digits, n_digits_sorted)\n  n_digits_sorted_index_min <- which.min(n_digits_sorted_index)\n  n_digits_sorted_index_min_value <- n_digits_sorted[n_digits_sorted_index_min]\n  n_digits_sorted_index_min_value_index <- which(n_digits == n_digits_sorted_index_min_value)\n  n_digits_sorted_index_min_value_index_next <- n_digits_sorted_index_min_value_index + 1\n  n_digits_sorted_index_min_value_index_next_value <- n_digits[n_digits_sorted_index_min_value_index_next]\n  n_digits[n_digits_sorted_index_min_value_index_next] <- n_digits_sorted_index_min_value\n  n_digits[n_digits_sorted_index_min_value_index] <- n_digits_sorted_index_min_value_index_next_value\n  n_digits_sorted_index_min_value_index_next_value_index <- which(n_digits_sorted_index == n_digits_sorted_index_min_value_index_next_value)\n  n_digits_sorted_index_min_value_index_next_value_index_next <- n_digits_sorted_index_min_value_index_next_value_index + 1\n  n_digits_sorted_index_min_value_index_next_value_index_next_value <- n_digits_sorted_",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # If no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[-(1:i)][n_char[-(1:i)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Return the rearranged number\n  return(as.integer(paste(n_char, collapse = \"\")))\n}\n",
    "\n  # Convert the number to a character vector\n  n_chars <- strsplit(as.character(n), \"\")[[1]]\n  \n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_chars[-length(n_chars)] < n_chars[-1])[1]\n  \n  # If no such digit exists, the number is the largest possible\n  if (is.na(first_smaller)) {\n    return(n)\n  }\n  \n  # Find the smallest digit to the right of the first smaller digit that is larger than it\n  smallest_larger <- which.min(n_chars[first_smaller + 1:length(n_chars)]) + first_smaller\n  \n  # Swap the two digits\n  n_chars[c(first_smaller, smallest_larger)] <- n_chars[c(smallest_larger, first_smaller)]\n  \n  # Sort the digits to the right of the first smaller digit in ascending order\n  n_chars[(first_smaller + 1):length(n_chars)] <- sort(n_chars[(first_smaller + 1):length(n_chars)])\n  \n  # Convert the character vector back to a number\n  return(as.numeric(paste(n_chars, collapse = \"\")))\n}\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # return the next bigger number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  if (n < 10) {\n    return(n)\n  }\n  digits <- as.numeric(strsplit(as.character(n), \"\")[[1]])\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  for (i in 1:(length(digits) - 1)) {\n    if (digits[i] > digits[i + 1]) {\n      digits[i] <- digits[i + 1]\n      digits[i + 1] <- digits[i]\n      digits <- digits[order(digits)]\n      digits <- digits[length(digits):1]\n      return(as.numeric(paste(digits, collapse = \"\")))\n    }\n  }\n  return(n)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first element from the right that is smaller than the one to its right\n  i <- which(n[1:(length(n)-1)] < n[2:length(n)])[1]\n  # Find the smallest element to the right of i that is larger than n[i]\n  j <- which(n[(i+1):length(n)] > n[i])[1] + i\n  # Swap the elements at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the elements to the right of i\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)])\n  # Convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_sorted <- sort(n_str_rev)\n  n_str_sorted <- rev(n_str_rev_sorted)\n  n_str_sorted_num <- as.numeric(n_str_sorted)\n  n_str_sorted_num\n}\n\nrearrange_bigger(12345)\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Create a vector of the digits\n  n_digits <- strsplit(n_char, \"\")[[1]]\n  # Find the first digit that is less than the digit to its right\n  first_less <- which(n_digits[-length(n_digits)] < n_digits[-1])[1]\n  # Find the digit to the right of the first digit that is less than the digit to its right\n  # and is the smallest digit greater than the first digit\n  next_bigger <- which.min(n_digits[first_less + 1:length(n_digits)] > n_digits[first_less]) + first_less\n  # Swap the first digit that is less than the digit to its right with the smallest digit greater than the first digit\n  n_digits[c(first_less, next_bigger)] <- n_digits[c(next_bigger, first_less)]\n  # Sort the digits to the right of the first digit that is less than the digit to its right\n  n_digits[(first_less + 1):length(n_digits)] <- sort(n_digits[(first_less + 1):length(n_digits)])\n  # Convert the digits to a number\n  as.numeric(paste(n_digits, collapse = \"\"))\n}\n",
    "\n  digits <- as.character(n)\n  digits <- strsplit(digits, \"\")[[1]]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- digits[length(digits):1]\n  digits <- as.numeric(digits)\n  digits <- digits[order(digits)]\n  digits <- as.character(digits)\n  digits <- paste(digits, collapse = \"\")\n  digits <- as.numeric(digits)\n  digits\n}\n\nrearrange_bigger(2017)\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(123)\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  \n  # Find the first digit that is smaller than the digit to its right\n  for (i in 1:(length(n) - 1)) {\n    if (n[i] < n[i + 1]) {\n      break\n    }\n  }\n  \n  # If no such digit exists, the number is the largest possible\n  if (i == length(n)) {\n    return(n)\n  }\n  \n  # Find the smallest digit to the right of the pivot that is larger than the pivot\n  for (j in (i + 1):length(n)) {\n    if (n[j] > n[i]) {\n      break\n    }\n  }\n  \n  # Swap the pivot with the smallest digit to its right\n  n[i] <- n[j]\n  n[j] <- n[i]\n  \n  # Sort the digits to the right of the pivot in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  \n  # Convert to numeric and return\n  as.numeric(n)\n}\n",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  smallest_larger <- which.min(n_char[first_smaller:length(n_char)]) + first_smaller - 1\n  # Swap the first smaller digit with the smallest larger digit\n  n_char[c(first_smaller, smallest_larger)] <- n_char[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[(first_smaller + 1):length(n_char)] <- sort(n_char[(first_smaller + 1):length(n_char)])\n  # Return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_int <- as.integer(n_str_rev)\n  n_str_rev_int_sorted <- sort(n_str_rev_int, decreasing = TRUE)\n  n_str_rev_int_sorted_str <- as.character(n_str_rev_int_sorted)\n  n_str_rev_int_sorted_str_rev <- rev(n_str_rev_int_sorted_str)\n  n_str_rev_int_sorted_str_rev_int <- as.integer(n_str_rev_int_sorted_str_rev)\n  n_str_rev_int_sorted_str_rev_int\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\nrearrange_bigger(123456789012345678901)\nrearrange_bigger(1234567890123456789012)\nrearrange_bigger(12345678901234567890123)\nrearrange_big",
    "\n  # Convert to character vector\n  n_chr <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n_chr[-length(n_chr)] < n_chr[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n_chr[-(1:i)][n_chr[-(1:i)] > n_chr[i]]) + i\n  # Swap the digits\n  n_chr[c(i, j)] <- n_chr[c(j, i)]\n  # Sort the digits to the right of the swapped digits in ascending order\n  n_chr[-(1:i)] <- sort(n_chr[-(1:i)])\n  # Return the rearranged number\n  as.numeric(n_chr)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return NA\n  if (is.na(i)) return(NA)\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the result\n  return(as.numeric(paste(n[1:i], sort(n[-1:-i]), sep = \"\")))\n}\n",
    "\n  # convert to character\n  n <- as.character(n)\n  # get the length of the number\n  n_len <- length(n)\n  # get the index of the last digit\n  last_index <- n_len - 1\n  # get the index of the second last digit\n  second_last_index <- n_len - 2\n  # get the last digit\n  last_digit <- as.numeric(n[last_index + 1])\n  # get the second last digit\n  second_last_digit <- as.numeric(n[second_last_index + 1])\n  # if the last digit is greater than the second last digit\n  if (last_digit > second_last_digit) {\n    # swap the last digit and the second last digit\n    n[last_index + 1] <- second_last_digit\n    n[second_last_index + 1] <- last_digit\n    # return the number\n    return(as.numeric(n))\n  }\n  # if the last digit is not greater than the second last digit\n  else {\n    # get the index of the third last digit\n    third_last_index <- n_len - 3\n    # get the third last digit\n    third_last_digit <- as.numeric(n[third_last_index + 1])\n    # if the third last digit is greater than the second last digit\n    if (third_last_digit > second_last_digit) {\n      # swap the second last digit and the third last digit\n      n[second_last_index + 1] <- third_last_digit\n      n[third_last_index + 1] <- second_last_digit\n      # return the number\n      return(as.numeric(n))\n    }\n    # if the third last digit is not greater than the second last digit\n    else {\n      # get the index of the fourth last digit\n      fourth_last_index <- n_len - 4\n      # get the fourth last digit\n      fourth_last_digit <- as.numeric(n[fourth_last_index + 1])\n      # if the fourth last digit is greater than the second last digit\n      if (fourth_last_digit > second_last_digit)",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[order(n, decreasing = TRUE)]\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(1234)\nrearrange_bigger(4321)\nrearrange_bigger(4312)\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)] > n_char[i]) + i\n  # Swap the digits at i and j\n  n_char[c(i,j)] <- n_char[c(j,i)]\n  # Sort the digits after i\n  n_char[(i+1):length(n_char)] <- sort(n_char[(i+1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n\nrearrange_bigger(12345)\nrearrange_bigger(12354)\nrearrange_bigger(12453)\nrearrange_bigger(12543)\nrearrange_bigger(13245)\nrearrange_bigger(13542)\nrearrange_bigger(14532)\nrearrange_bigger(15432)\nrearrange_bigger(21435)\nrearrange_bigger(21534)\nrearrange_bigger(23145)\nrearrange_bigger(23541)\nrearrange_bigger(24135)\nrearrange_bigger(24531)\nrearrange_bigger(25134)\nrearrange_bigger(25431)\nrearrange_bigger(31245)\nrearrange_bigger(31542)\nrearrange_bigger(32154)\nrearrange_bigger(32541)\nrearrange_bigger(34152)\nrearrange_bigger(34512)\nrearrange_bigger(35142)\nrearrange_bigger(35412)\nrearrange_bigger(41235)\nrearrange_bigger(41325)\nrearrange_bigger(42135)\nrearrange_bigger",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # get the length of the number\n  n_len <- length(n_char)\n  # get the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-n_len] < n_char[-1])[1]\n  # if no such digit exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # get the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n_char[-(1:i)])\n  # swap the digits at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # sort the digits after index i\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # return the rearranged number\n  return(as.numeric(n_char))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit greater than n[i]\n  j <- which.min(n[-i][n[-i] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits after the swapped digits\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the smallest digit that is larger than the digit to its left\n  smallest_larger <- which(n_char[-1] > n_char[first_smaller])[1]\n  # swap the digits\n  n_char[c(first_smaller, smallest_larger)] <- n_char[c(smallest_larger, first_smaller)]\n  # sort the digits to the right of the swapped digits\n  n_char[-(1:first_smaller)] <- sort(n_char[-(1:first_smaller)])\n  # convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character string\n  n_str <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n_str[-length(n_str)] < n_str[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n_str[-(1:i)][n_str[-(1:i)] > n_str[i]]) + i\n  # Swap the digits\n  n_str[c(i, j)] <- n_str[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n_str[-(1:i)] <- sort(n_str[-(1:i)])\n  # Convert the character string back to a number\n  as.numeric(n_str)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1235)\nrearrange_bigger(1236)\nrearrange_bigger(1237)\nrearrange_bigger(1238)\nrearrange_bigger(1239)\nrearrange_bigger(1243)\nrearrange_bigger(1245)\nrearrange_bigger(1253)\nrearrange_bigger(1254)\nrearrange_bigger(1256)\nrearrange_bigger(1257)\nrearrange_bigger(1258)\nrearrange_bigger(1259)\nrearrange_bigger(1265)\nrearrange_bigger(1267)\nrearrange_bigger(1268)\nrearrange_bigger(1269)\nrearrange_bigger(1278)\nrearrange_bigger(1279)\nrearrange_bigger(1289)\nrearrange_bigger(1298)\nrearrange_bigger(1345)\nrearrange_bigger(1354)\nrearrange_bigger(1357)\nrearrange_bigger(1358)\nrearrange_bigger(1359)\nrearrange_bigger(1368)\nrearrange_bigger(1369)\nrearrange_bigger(1378)\nrearrange_bigger(1379)\nrearrange_bigger(1389)\nrearrange_bigger(1458)\nrearrange_bigger(1459)\nrearrange_bigger(1468)\nrearrange_bigger(1469)\nrearrange_bigger(1478)\nrearrange_bigger(14",
    "\n  n_digits <- as.character(n)\n  n_digits <- strsplit(n_digits, \"\")[[1]]\n  n_digits <- as.numeric(n_digits)\n  n_digits <- n_digits[order(n_digits, decreasing = TRUE)]\n  n_digits <- paste(n_digits, collapse = \"\")\n  n_digits <- as.numeric(n_digits)\n  n_digits\n}\nrearrange_bigger(12)\nrearrange_bigger(513)\nrearrange_bigger(2017)\nrearrange_bigger(414)\nrearrange_bigger(144)\n",
    "\n  # Create a vector of digits\n  digits <- as.vector(strsplit(as.character(n), split = \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(digits[i + 1:length(digits)] > digits[i]) + i\n  # Swap these digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  digits[(i + 1):length(digits)] <- sort(digits[(i + 1):length(digits)])\n  # Return the number\n  as.numeric(paste(digits, collapse = \"\"))\n}\n",
    "\n  # Convert the number to a character string\n  n_str <- as.character(n)\n  # Get the length of the string\n  n_len <- length(n_str)\n  # Create a list of the digits in the string\n  n_list <- as.list(strsplit(n_str, \"\")[[1]])\n  # Create a vector of the digits in the string\n  n_vec <- as.numeric(n_list)\n  # Create a vector of the indices of the digits in the string\n  n_ind <- seq_along(n_vec)\n  # Create a data frame of the digits and their indices\n  n_df <- data.frame(n_vec, n_ind)\n  # Create a vector of the digits in the string sorted in descending order\n  n_sort <- sort(n_vec, decreasing = TRUE)\n  # Create a data frame of the sorted digits and their indices\n  n_sort_df <- data.frame(n_sort, n_ind)\n  # Create a vector of the digits in the string sorted in ascending order\n  n_sort_asc <- sort(n_vec)\n  # Create a data frame of the sorted digits and their indices\n  n_sort_asc_df <- data.frame(n_sort_asc, n_ind)\n  # Create a vector of the digits in the string sorted in ascending order\n  # with the first digit replaced by the second digit\n  n_sort_asc_2 <- n_sort_asc\n  n_sort_asc_2[1] <- n_sort_asc[2]\n  n_sort_asc_2[2] <- n_sort_asc[1]\n  # Create a data frame of the sorted digits and their indices\n  n_sort_asc_2_df <- data.frame(n_sort_asc_2, n_ind)\n  # Create a vector of the digits in the string sorted in ascending order\n  # with the first digit replaced by the third digit\n  n_sort_asc_3 <- n_sort_asc\n  n_sort_asc_3[1] <- n_sort_asc[3]\n  n_sort_asc_3[3] <- n_sort_asc[1]",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(12)\nrearrange_bigger(513)\nrearrange_bigger(2017)\nrearrange_bigger(9)\nrearrange_bigger(111)\nrearrange_bigger(531)\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- as.numeric(n_str)\n  n_str <- n_str[order(n_str, decreasing = TRUE)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n\nrearrange_bigger(12)\nrearrange_bigger(513)\nrearrange_bigger(2017)\nrearrange_bigger(414)\nrearrange_bigger(144)\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first non-increasing digit\n  for (i in 1:(length(n_char) - 1)) {\n    if (n_char[i] < n_char[i + 1]) {\n      break\n    }\n  }\n  # find the smallest digit to the right of the first non-increasing digit\n  # that is greater than the first non-increasing digit\n  for (j in (i + 1):length(n_char)) {\n    if (n_char[j] > n_char[i]) {\n      break\n    }\n  }\n  # swap the first non-increasing digit with the smallest digit to the right\n  # of the first non-increasing digit that is greater than the first non-increasing digit\n  n_char[i] <- n_char[j]\n  n_char[j] <- n_char[i]\n  # sort the digits to the right of the first non-increasing digit in ascending order\n  n_char[(i + 1):length(n_char)] <- sort(n_char[(i + 1):length(n_char)])\n  # return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at i and j\n  n_char[c(i,j)] <- n_char[c(j,i)]\n  # Sort the digits to the right of i\n  n_char[i+1:length(n_char)] <- sort(n_char[i+1:length(n_char)])\n  # Convert the character vector back to a number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector\n  n_chars <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_chars[-length(n_chars)] < n_chars[-1])[1]\n  # Find the index of the smallest digit that is larger than n_chars[i]\n  j <- which.min(n_chars[-(1:i)][n_chars[-(1:i)] > n_chars[i]]) + i\n  # Swap the digits at indices i and j\n  n_chars[c(i, j)] <- n_chars[c(j, i)]\n  # Sort the digits after index i in ascending order\n  n_chars[-(1:i)] <- sort(n_chars[-(1:i)])\n  # Convert the character vector back to a number\n  as.numeric(n_chars)\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at i\n  j <- which.min(n_char[-i][n_char[-i] > n_char[i]]) + i\n  # Swap the digits at i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of i in ascending order\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # find the smallest digit that is larger than the digit to its right\n  first_larger <- which(n_char[-length(n_char)] > n_char[-1])[1]\n  # swap the two digits\n  n_char[c(first_smaller, first_larger)] <- n_char[c(first_larger, first_smaller)]\n  # return the new number\n  return(as.numeric(n_char))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the index of the smallest digit to the right of the digit at i that is larger than the digit at i\n  j <- which.min(n[i + 1:length(n)][n[i + 1:length(n)] > n[i]]) + i\n  # Swap the digits at i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # if no such digit exists, return -1\n  if (is.na(i)) return(-1)\n  # find the smallest digit to the right of i that is greater than n[i]\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # swap the digits at i and j\n  n[c(i,j)] <- n[c(j,i)]\n  # return the number formed by the digits to the right of i in ascending order\n  return(as.numeric(paste0(n[1:i], sort(n[-c(1:i)]))))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i + 1:length(n)][n[i + 1:length(n)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is bigger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  n_digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  n_digits <- rev(n_digits)\n  for (i in seq_along(n_digits)) {\n    if (i == length(n_digits)) {\n      return(n)\n    }\n    if (n_digits[i] > n_digits[i + 1]) {\n      n_digits[i] <- n_digits[i] + n_digits[i + 1]\n      n_digits[i + 1] <- n_digits[i] - n_digits[i + 1]\n      n_digits[i] <- n_digits[i] - n_digits[i + 1]\n      n_digits <- rev(n_digits)\n      return(as.integer(paste(n_digits, collapse = \"\")))\n    }\n  }\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1235)\nrearrange_bigger(1243)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)\nrearrange_bigger(12453)",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the result\n  as.numeric(n)\n}\n",
    "\n  # Convert to character\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i+1:length(n)][n[i+1:length(n)] > n[i]]) + i\n  # Swap the two digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)])\n  # Convert to numeric\n  as.numeric(n)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\nrearrange_bigger(123456789012345678901)\nrearrange_bigger(1234567890123456789012)\nrearrange_bigger(12345678901234567890123)\nrearrange_bigger(123456789012345678901234)\nrearrange_bigger(1234567890123456789012345)\nrearrange_bigger(12345678901234567890123456)\nrearrange_bigger(123456789012345678901234567)\nrearrange_bigger(1234567890123456789012345678)\nrearrange_bigger(12345678901234567890123456789)\n",
    "\n  n_digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  n_digits <- rev(n_digits)\n  for (i in seq_along(n_digits)) {\n    if (i == length(n_digits)) {\n      return(NULL)\n    }\n    if (n_digits[i] > n_digits[i + 1]) {\n      n_digits[i] <- n_digits[i] + n_digits[i + 1]\n      n_digits[i + 1] <- n_digits[i] - n_digits[i + 1]\n      n_digits[i] <- n_digits[i] - n_digits[i + 1]\n      n_digits <- rev(n_digits)\n      return(as.integer(paste(n_digits, collapse = \"\")))\n    }\n  }\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(1324)\nrearrange_bigger(1342)\nrearrange_bigger(1423)\nrearrange_bigger(1432)\nrearrange_bigger(2134)\nrearrange_bigger(2143)\nrearrange_bigger(2314)\nrearrange_bigger(2341)\nrearrange_bigger(2413)\nrearrange_bigger(2431)\nrearrange_bigger(3124)\nrearrange_bigger(3142)\nrearrange_bigger(3214)\nrearrange_bigger(3241)\nrearrange_bigger(3412)\nrearrange_bigger(3421)\nrearrange_bigger(4123)\nrearrange_bigger(4132)\nrearrange_bigger(4213)\nrearrange_bigger(4231)\nrearrange_bigger(4312)\nrearrange_bigger(4321)\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is bigger than it\n  smallest_bigger <- which.min(n_char[first_smaller:length(n_char)][n_char[first_smaller:length(n_char)] > n_char[first_smaller]]) + first_smaller - 1\n  # Swap the first smaller digit with the smallest bigger digit\n  n_char[c(first_smaller, smallest_bigger)] <- n_char[c(smallest_bigger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[(first_smaller + 1):length(n_char)] <- sort(n_char[(first_smaller + 1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n",
    "\n  # Convert to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  # If none, return -1\n  for (i in 1:(length(n)-1)) {\n    if (n[i] < n[i+1]) {\n      break\n    }\n  }\n  if (i == length(n)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  for (j in (i+1):length(n)) {\n    if (n[j] > n[i]) {\n      break\n    }\n  }\n  # Swap the digits\n  n[i] <- n[j]\n  n[j] <- n[i]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i+1):length(n)] <- sort(n[(i+1):length(n)])\n  # Convert back to numeric and return\n  as.numeric(n)\n}\n",
    "\n  # Create a vector of the digits of n\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # Find the index of the first digit that is less than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the index of the smallest digit to the right of the digit at i that is greater than the digit at i\n  j <- which.min(digits[i+1:length(digits)][digits[i+1:length(digits)] > digits[i]]) + i\n  # Swap the digits at i and j\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of i\n  digits[(i+1):length(digits)] <- sort(digits[(i+1):length(digits)])\n  # Return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits at positions i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of i in ascending order followed by the digits to the left of i\n  return(as.numeric(paste(sort(n[-(1:i)]), collapse = \"\")), n[1:i]))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is less than the digit to its right\n  for (i in seq_along(n)[-1]) {\n    if (n[i] < n[i+1]) {\n      break\n    }\n  }\n  # If no such digit exists, return -1\n  if (i == length(n)) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit found above that is greater than it\n  for (j in seq_along(n)[-(1:i)]) {\n    if (n[j] > n[i]) {\n      break\n    }\n  }\n  # Swap the two digits\n  n[i] <- n[j]\n  n[j] <- n[i]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Convert to numeric\n  n <- as.numeric(n)\n  return(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_sorted <- sort(n_str_rev)\n  n_str_sorted <- rev(n_str_rev_sorted)\n  n_str_sorted_int <- as.integer(n_str_sorted)\n  if (n_str_sorted_int == n) {\n    return(n)\n  } else {\n    return(n_str_sorted_int)\n  }\n}\n",
    "\n  digits <- as.character(n)\n  digits <- strsplit(digits, \"\")[[1]]\n  digits <- digits[order(digits)]\n  digits <- paste0(digits, collapse = \"\")\n  digits <- as.numeric(digits)\n  digits\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\nrearrange_bigger(123456789012345678901)\nrearrange_bigger(1234567890123456789012)\nrearrange_bigger(12345678901234567890123)\nrearrange_bigger(123456789012345678901234)\nrearrange_bigger(1234567890123456789012345)\nrearrange_bigger(12345678901234567890123456)\nrearrange_bigger(123456789012345678901234567)\nrearrange_bigger(1234567890123456789012345678)\nrearrange_bigger(12345678901234567890123456789)\nrearr",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than it\n  smallest_larger <- which.min(n_char[first_smaller + 1:length(n_char)][n_char[first_smaller + 1:length(n_char)] > n_char[first_smaller]])\n  # Swap the first smaller digit with the smallest larger digit\n  n_char[c(first_smaller, first_smaller + smallest_larger)] <- n_char[c(first_smaller + smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[first_smaller + 1:length(n_char)] <- sort(n_char[first_smaller + 1:length(n_char)])\n  # Convert the character vector back to a number\n  as.numeric(n_char)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  return(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- as.numeric(n_str)\n  n_str <- sort(n_str, decreasing = TRUE)\n  n_str <- as.character(n_str)\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.numeric(n_str)\n  n_str\n}\n\nrearrange_bigger(12345)\n",
    "\n  # get the digits of the number\n  digits <- as.character(n)\n  digits <- strsplit(digits, \"\")[[1]]\n  # find the first digit that is smaller than the digit to its right\n  for (i in 1:(length(digits) - 1)) {\n    if (digits[i] < digits[i + 1]) {\n      # find the smallest digit to the right of the digit that is smaller than the digit to its right\n      min_index <- i + 1\n      for (j in (i + 2):length(digits)) {\n        if (digits[j] < digits[min_index] & digits[j] > digits[i]) {\n          min_index <- j\n        }\n      }\n      # swap the digits\n      digits[i] <- digits[min_index]\n      digits[min_index] <- digits[i]\n      # sort the digits to the right of the digit that is smaller than the digit to its right\n      digits[(i + 1):length(digits)] <- sort(digits[(i + 1):length(digits)])\n      # return the rearranged number\n      return(as.numeric(paste(digits, collapse = \"\")))\n    }\n  }\n  # return -1 if no bigger number exists\n  return(-1)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[order(n, decreasing = TRUE)]\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1235)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)\nrearrange_bigger(12354)",
    "\n  # Create a vector of digits\n  digits <- as.vector(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the digit found in the previous step that is larger than it\n  j <- which.min(digits[i+1:length(digits)][digits[i+1:length(digits)] > digits[i]]) + i\n  # Swap the digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the digit found in the first step\n  digits[(i+1):length(digits)] <- sort(digits[(i+1):length(digits)])\n  # Return the rearranged number\n  return(as.numeric(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert number to character vector\n  n_char <- as.character(n)\n  # Find the index of the last digit that is smaller than the digit to its right\n  last_smaller <- which(n_char[-length(n_char)] < n_char[-1])[length(which(n_char[-length(n_char)] < n_char[-1]))]\n  # If no such digit exists, the number is the largest possible rearrangement of its digits\n  if (length(last_smaller) == 0) {\n    return(NA)\n  }\n  # Find the smallest digit to the right of the last smaller digit that is larger than it\n  next_bigger <- which.min(n_char[last_smaller + 1:length(n_char)][n_char[last_smaller + 1:length(n_char)] > n_char[last_smaller]])\n  # Swap the last smaller digit with the next bigger digit\n  n_char[last_smaller] <- n_char[last_smaller + next_bigger]\n  n_char[last_smaller + next_bigger] <- n_char[last_smaller]\n  # Sort the digits to the right of the last smaller digit in ascending order\n  n_char[last_smaller + 1:length(n_char)] <- sort(n_char[last_smaller + 1:length(n_char)])\n  # Return the rearranged number\n  return(as.numeric(paste(n_char, collapse = \"\")))\n}\n",
    "\n  # Convert to a character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[1:(length(n_char) - 1)] < n_char[2:length(n_char)])[1]\n  # Find the first digit to the right of the first smaller digit that is larger than the first smaller digit\n  first_larger <- which(n_char[first_smaller:(length(n_char) - 1)] < n_char[(first_smaller + 1):length(n_char)])[1] + first_smaller\n  # Swap the first smaller digit with the first larger digit\n  n_char[c(first_smaller, first_larger)] <- n_char[c(first_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[(first_smaller + 1):length(n_char)] <- sort(n_char[(first_smaller + 1):length(n_char)])\n  # Convert back to a number\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is less than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit to the right of the digit at index i that is greater than the digit at index i\n  j <- which.min(n_char[i+1:length(n_char)][n_char[i+1:length(n_char)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Return the number with the digits to the right of index i sorted in ascending order\n  as.numeric(paste(n_char[1:i], sort(n_char[i+1:length(n_char)]), sep = \"\"))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # sort the digits to the right of i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # convert back to numeric\n  as.numeric(n)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- sort(n_str, decreasing = TRUE)\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.integer(n_str)\n  return(n_str)\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(12345)\nrearrange_bigger(123456)\nrearrange_bigger(1234567)\nrearrange_bigger(12345678)\nrearrange_bigger(123456789)\nrearrange_bigger(1234567890)\nrearrange_bigger(12345678901)\nrearrange_bigger(123456789012)\nrearrange_bigger(1234567890123)\nrearrange_bigger(12345678901234)\nrearrange_bigger(123456789012345)\nrearrange_bigger(1234567890123456)\nrearrange_bigger(12345678901234567)\nrearrange_bigger(123456789012345678)\nrearrange_bigger(1234567890123456789)\nrearrange_bigger(12345678901234567890)\n",
    "\n  n_str <- as.character(n)\n  n_str_rev <- rev(n_str)\n  n_str_rev_sorted <- sort(n_str_rev)\n  n_str_sorted <- rev(n_str_rev_sorted)\n  n_str_sorted_num <- as.numeric(n_str_sorted)\n  if (n_str_sorted_num == n) {\n    return(NA)\n  } else {\n    return(n_str_sorted_num)\n  }\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first decreasing digit\n  first_decreasing <- which(n_char[-1] < n_char[-length(n_char)])[1]\n  # Find the smallest digit greater than the first decreasing digit\n  smallest_greater <- which.min(n_char[first_decreasing + 1:length(n_char)] > n_char[first_decreasing]) + first_decreasing\n  # Swap the first decreasing digit and the smallest greater digit\n  n_char[c(first_decreasing, smallest_greater)] <- n_char[c(smallest_greater, first_decreasing)]\n  # Sort the digits after the first decreasing digit\n  n_char[(first_decreasing + 1):length(n_char)] <- sort(n_char[(first_decreasing + 1):length(n_char)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[-(1:i)][n_char[-(1:i)] > n_char[i]]) + i\n  # Swap the digits at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Convert back to numeric\n  as.numeric(n_char)\n}\n",
    "\n  # Convert the number to a character vector.\n  n_char <- as.character(n)\n  \n  # Find the first digit from the right that is smaller than the digit to its right.\n  # If no such digit exists, the number is the largest possible permutation.\n  for (i in (length(n_char) - 1):1) {\n    if (n_char[i] < n_char[i + 1]) {\n      break\n    }\n  }\n  \n  # If no such digit exists, return -1.\n  if (i == 1 && n_char[i] >= n_char[i + 1]) {\n    return(-1)\n  }\n  \n  # Find the smallest digit to the right of the pivot that is larger than the pivot.\n  # Swap the pivot with this digit.\n  for (j in (length(n_char)):(i + 1)) {\n    if (n_char[j] > n_char[i]) {\n      break\n    }\n  }\n  \n  # Swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot.\n  n_char[i] <- n_char[j]\n  n_char[j] <- n_char[i]\n  \n  # Reverse the digits to the right of the pivot.\n  n_char[(i + 1):length(n_char)] <- rev(n_char[(i + 1):length(n_char)])\n  \n  # Return the rearranged number.\n  return(as.numeric(n_char))\n}\n"
  ]
}