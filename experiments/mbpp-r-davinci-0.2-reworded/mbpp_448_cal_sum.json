{
  "name": "mbpp_448_cal_sum",
  "language": "r",
  "prompt": "# Write a function to calculate the sum of perrin numbers.\ncal_sum <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- cal_sum\n    if(!identical(candidate(9), 49)){quit('no', 1)}\n    if(!identical(candidate(10), 66)){quit('no', 1)}\n    if(!identical(candidate(11), 88)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin_numbers <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin_numbers[i] <- perrin_numbers[i-2] + perrin_numbers[i-3]\n  }\n  sum(perrin_numbers)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3,0,2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 0) {\n    return(0)\n  } else {\n    return(perrin(n) + cal_sum(n - 1))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  # Initialize the vector to store the perrin numbers.\n  perrin <- c(3, 0, 2)\n  # Calculate the perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  # Return the sum of perrin numbers.\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  sum(perrin(n))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  if (n < 3) {\n    return(perrin[n])\n  } else {\n    for (i in 4:n) {\n      perrin[3] <- perrin[1] + perrin[2]\n      perrin[1] <- perrin[2]\n      perrin[2] <- perrin[3]\n    }\n    return(perrin[3])\n  }\n}\n",
    "\n  if (n < 3) {\n    return(0)\n  }\n  else {\n    return(perrin(n) + cal_sum(n-1))\n  }\n}\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n    perrin <- c(3, 0, 2)\n    for (i in 4:n) {\n        perrin[i] <- perrin[i-2] + perrin[i-3]\n    }\n    return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n    if (n == 1) {\n        return(3)\n    } else if (n == 2) {\n        return(0)\n    } else if (n == 3) {\n        return(2)\n    } else {\n        return(cal_sum(n - 2) + cal_sum(n - 3))\n    }\n}\n",
    "\n    # Initialize the first three numbers.\n    perrin <- c(3, 0, 2)\n    # Calculate the sum of perrin numbers.\n    for (i in 4:n) {\n        perrin[i] <- perrin[i - 2] + perrin[i - 3]\n    }\n    # Return the sum of perrin numbers.\n    return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(2)\n  } else if (n == 3) {\n    return(3)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  # Write your code here\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n    if (n == 1) {\n        return(3)\n    } else if (n == 2) {\n        return(0)\n    } else if (n == 3) {\n        return(2)\n    } else {\n        return(cal_sum(n-2) + cal_sum(n-3))\n    }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n    # Initialize the first three perrin numbers.\n    p <- c(3, 0, 2)\n    # Initialize the sum of perrin numbers.\n    sum_p <- 3\n    # Loop over the perrin numbers.\n    for (i in 4:n) {\n        # Calculate the next perrin number.\n        p <- c(p[2], p[3], p[1] + p[2])\n        # Add the next perrin number to the sum.\n        sum_p <- sum_p + p[3]\n    }\n    # Return the sum of perrin numbers.\n    return(sum_p)\n}\n",
    "\n  perrin <- rep(0, n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(20)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n    # Initialize the vector\n    perrin <- c(3, 0, 2)\n    # Loop to calculate the perrin numbers\n    for (i in 4:n) {\n        perrin[i] <- perrin[i-2] + perrin[i-3]\n    }\n    # Return the sum of perrin numbers\n    return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n    if (n == 1) {\n        return(3)\n    } else if (n == 2) {\n        return(0)\n    } else if (n == 3) {\n        return(2)\n    } else {\n        return(cal_sum(n - 2) + cal_sum(n - 3))\n    }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  perrin <- rep(0, n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  if (n < 3) {\n    return(perrin[n])\n  }\n  for (i in 4:n) {\n    perrin[3] <- perrin[1] + perrin[2]\n    perrin[1] <- perrin[2]\n    perrin[2] <- perrin[3]\n  }\n  return(perrin[3])\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n    if (n == 1) {\n        return(3)\n    } else if (n == 2) {\n        return(0)\n    } else if (n == 3) {\n        return(2)\n    } else {\n        return(cal_sum(n-2) + cal_sum(n-3))\n    }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(100)\n",
    "\n  # Initialize the vector.\n  perrin <- c(3, 0, 2)\n  # Calculate the sum of perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  # Return the sum of perrin numbers.\n  return(sum(perrin))\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  # Initialize the perrin numbers.\n  perrin <- c(3, 0, 2)\n  # Initialize the sum.\n  sum <- 0\n  # Loop over the perrin numbers.\n  for (i in 4:n) {\n    # Calculate the next perrin number.\n    perrin[i %% 3 + 1] <- perrin[(i - 2) %% 3 + 1] + perrin[(i - 3) %% 3 + 1]\n    # Add the perrin number to the sum.\n    sum <- sum + perrin[i %% 3 + 1]\n  }\n  # Return the sum.\n  return(sum)\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1:3] <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(0)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(3)\n  }\n  return(cal_sum(n-2) + cal_sum(n-3))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\ncal_sum(100)\ncal_sum(1000)\ncal_sum(10000)\ncal_sum(100000)\ncal_sum(1000000)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  # Create a vector to store the perrin numbers.\n  perrin <- c(3, 0, 2)\n  # Create a vector to store the sum of perrin numbers.\n  sum_perrin <- c(3, 3, 5)\n  # Create a loop to calculate the perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n    sum_perrin[i] <- sum_perrin[i - 1] + perrin[i]\n  }\n  # Return the sum of perrin numbers.\n  return(sum_perrin[n])\n}\n",
    "\n  perrin <- rep(0, n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  if (n < 3) {\n    return(0)\n  }\n  else {\n    return(perrin(n) + cal_sum(n - 1))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  if (n <= 3) {\n    return(perrin[n])\n  }\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\ncal_sum(10)\n",
    "\n  # Initialize a vector to store the perrin numbers.\n  perrin <- c(3, 0, 2)\n  # Calculate the perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  # Return the sum of perrin numbers.\n  return(sum(perrin))\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(20)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n    perrin <- numeric(n)\n    perrin[1] <- 3\n    perrin[2] <- 0\n    perrin[3] <- 2\n    for (i in 4:n) {\n        perrin[i] <- perrin[i-2] + perrin[i-3]\n    }\n    sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n - 2) + cal_sum(n - 3))\n  }\n}\n",
    "\n  # Initialize the vector.\n  perrin <- c(3, 0, 2)\n  \n  # Loop to calculate the perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  \n  # Return the sum of perrin numbers.\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(100)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(0)\n  }\n  else if (n == 2) {\n    return(2)\n  }\n  else if (n == 3) {\n    return(3)\n  }\n  else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n",
    "\n  # Initialize the vector.\n  perrin <- c(3, 0, 2)\n  \n  # Calculate the perrin numbers.\n  for (i in 4:n) {\n    perrin[i] <- perrin[i - 2] + perrin[i - 3]\n  }\n  \n  # Calculate the sum of perrin numbers.\n  sum(perrin)\n}\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  if (n == 1) {\n    return(3)\n  } else if (n == 2) {\n    return(0)\n  } else if (n == 3) {\n    return(2)\n  } else {\n    return(cal_sum(n-2) + cal_sum(n-3))\n  }\n}\n",
    "\n  perrin_numbers <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin_numbers[i] <- perrin_numbers[i-2] + perrin_numbers[i-3]\n  }\n  sum(perrin_numbers)\n}\n\ncal_sum(100)\n",
    "\n  perrin <- numeric(n)\n  perrin[1] <- 3\n  perrin[2] <- 0\n  perrin[3] <- 2\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n\ncal_sum(10)\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  sum(perrin)\n}\n",
    "\n  perrin <- c(3, 0, 2)\n  for (i in 4:n) {\n    perrin[i] <- perrin[i-2] + perrin[i-3]\n  }\n  return(sum(perrin))\n}\n\ncal_sum(10)\n"
  ]
}