{
  "name": "mbpp_781_count_divisors",
  "language": "r",
  "prompt": "# Write a rthon function to check whether the count of divisors is even. https://www.w3resource.com/rthon-exercises/basic/rthon-basic-1-exercise-24.php\ncount_divisors <- function(n) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- count_divisors\n    if(!identical(candidate(10), TRUE)){quit('no', 1)}\n    if(!identical(candidate(100), FALSE)){quit('no', 1)}\n    if(!identical(candidate(125), TRUE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncheck_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_even(10)\ncheck_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\nis_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\nis_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncheck_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors_even <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncount_divisors_even(10)\ncount_divisors_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors_even <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncount_divisors_even(10)\ncount_divisors_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\neven_divisors <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\neven_divisors(10)\neven_divisors(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors_even <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncount_divisors_even(6)\ncount_divisors_even(8)\ncount_divisors_even(9)\n",
    "\n  divisors <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- divisors + 1\n    }\n  }\n  return(divisors)\n}\n\ncount_divisors(10)\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors_even <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncount_divisors_even(10)\ncount_divisors_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\neven_divisors <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\neven_divisors(10)\neven_divisors(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors_even <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncount_divisors_even(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_divisors(6)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nis_even <- function(n) {\n  if (count_divisors(n) %% 2 == 0) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n\nis_even(10)\nis_even(11)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\neven_divisors <- function(n) {\n  count <- count_divisors(n)\n  if (count %% 2 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\neven_divisors(6)\neven_divisors(7)\n"
  ]
}