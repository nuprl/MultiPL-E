{
  "name": "mbpp_743_rotate_right",
  "language": "r",
  "prompt": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/rthon-program-right-rotate-list-n/\nrotate_right <- function(list, m) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- rotate_right\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3), list(8, 9, 10, 1, 2, 3, 4, 5, 6, 7))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2), list(9, 10, 1, 2, 3, 4, 5, 6, 7, 8))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5), list(6, 7, 8, 9, 10, 1, 2, 3, 4, 5))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n\nrotate_right(1:10, 3)\n",
    "\n  if(m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  list\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list)-m+1):length(list)]\n}\n\nrotate_right(list, 3)\n",
    "\n  return(c(list[(m+1):length(list)], list[1:m]))\n}\n",
    "\n  # Write your code here\n  if(m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  for (i in 1:m) {\n    list <- c(list[length(list)], list[-length(list)])\n  }\n  return(list)\n}\n\nrotate_right(list, 2)\n",
    "\n  # Create a new list\n  new_list <- list()\n  \n  # Get the length of the list\n  n <- length(list)\n  \n  # Loop through the list\n  for (i in 1:n) {\n    # Get the new index\n    new_index <- (i + m) %% n\n    \n    # Add the element to the new list\n    new_list[new_index] <- list[i]\n  }\n  \n  # Return the new list\n  return(new_list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  if (length(list) == 0) {\n    return(list)\n  }\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n"
  ]
}