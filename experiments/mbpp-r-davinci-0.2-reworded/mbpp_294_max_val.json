{
  "name": "mbpp_294_max_val",
  "language": "r",
  "prompt": "# Write a function to find the maximum value in a given heterogeneous list.\nmax_val <- function(listval) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- max_val\n    if(!identical(candidate(list('Python', 3, 2, 4, 5, 'version')), 5)){quit('no', 1)}\n    if(!identical(candidate(list('Python', 15, 20, 25)), 25)){quit('no', 1)}\n    if(!identical(candidate(list('Python', 30, 20, 40, 50, 'version')), 50)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  max(unlist(listval))\n}\n",
    "\n    max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5))\nmax_val(list(1,2,3,4,5, list(1,2,3,4,5)))\nmax_val(list(1,2,3,4,5, list(1,2,3,4,5, list(1,2,3,4,5))))\n",
    "\n    max(unlist(listval))\n}\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(c(1,2,3), c(4,5,6), c(7,8,9)))\n",
    "\n  max(unlist(listval))\n}\nmax_val(list(1,2,3,4,5,6,7,8,9,10))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"))\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1, 2, 3, 4))\nmax_val(list(c(1, 2), c(3, 4), c(5, 6)))\nmax_val(list(list(1, 2), list(3, 4), list(5, 6)))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(c(1,2,3), c(4,5,6), c(7,8,9)))\n",
    "\n  max <- listval[[1]]\n  for (i in 2:length(listval)) {\n    if (listval[[i]] > max) {\n      max <- listval[[i]]\n    }\n  }\n  return(max)\n}\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(c(1,2,3), c(4,5,6), c(7,8,9)))\n",
    "\n  max(unlist(listval))\n}\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5,6,7,8,9))\n",
    "\n  max(unlist(listval))\n}\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10))\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10, list(1,2,3,4,5,6,7,8,9,10)))\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10, list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10)))\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10, list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10)))\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10, list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10)))\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10, list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10), list(1,2,3,4,5,6,7,8,9,10)))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1, 2, 3, 4, 5))\nmax_val(list(1, 2, 3, 4, 5, list(6, 7, 8, 9, 10)))\nmax_val(list(1, 2, 3, 4, 5, list(6, 7, 8, 9, 10, list(11, 12, 13, 14, 15))))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1,2,3,4,5,6,7,8,9,10))\n",
    "\n    max(unlist(listval))\n}\n\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n",
    "\n  max(unlist(listval))\n}\n\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\nmax_val(list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))\n"
  ]
}