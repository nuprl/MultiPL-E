{
  "name": "mbpp_12_sort_matrix",
  "language": "r",
  "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\nsort_matrix <- function(M) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- sort_matrix\n    if(!identical(candidate(list(list(1, 2, 3), list(2, 4, 5), list(1, 1, 1))), list(list(1, 1, 1), list(1, 2, 3), list(2, 4, 5)))){quit('no', 1)}\n    if(!identical(candidate(list(list(1, 2, 3), list(-2, 4, -5), list(1, -1, 1))), list(list(-2, 4, -5), list(1, -1, 1), list(1, 2, 3)))){quit('no', 1)}\n    if(!identical(candidate(list(list(5, 8, 9), list(6, 4, 3), list(2, 1, 4))), list(list(2, 1, 4), list(6, 4, 3), list(5, 8, 9)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Sort the rows according to the sum of the row elements\n  M[order(rowSums(M)), ]\n}\n",
    "\n    M[order(rowSums(M)), ]\n}\n",
    "\n  # Your code goes here\n  M[order(rowSums(M)),]\n}\n",
    "\n  M[order(rowSums(M)),]\n}\n",
    "\n  # Create a vector of row sums\n  row_sums <- apply(M, 1, sum)\n  # Sort the matrix according to the row sums\n  M[order(row_sums), ]\n}\n",
    "\n  # Create a vector of row sums\n  row_sums <- apply(M, 1, sum)\n  # Sort the matrix according to the row sums\n  M[order(row_sums), ]\n}\n",
    "\n  sort(M, decreasing = FALSE, by = rowSums)\n}\n",
    "\n  M[order(rowSums(M)),]\n}\n",
    "\n  # Create a vector of row sums\n  row_sums <- apply(M, 1, sum)\n  # Sort the matrix by the row sums\n  M[order(row_sums), ]\n}\n",
    "\n  M[order(apply(M, 1, sum)), ]\n}\n",
    "\n  # Create a vector of the row sums\n  row_sums <- apply(M, 1, sum)\n  # Sort the matrix by the row sums\n  M[order(row_sums), ]\n}\n",
    "\n  # Your code here\n  M[order(rowSums(M)),]\n}\n",
    "\n  # Get the sum of each row\n  sums <- rowSums(M)\n  # Sort the matrix by the sums of the rows\n  M[order(sums), ]\n}\n\nsort_matrix(M)\n",
    "\n  M[order(rowSums(M)), ]\n}\n",
    "\n  # Create a vector of row sums\n  row_sums <- apply(M, 1, sum)\n  # Sort the matrix according to the row sums\n  M[order(row_sums), ]\n}\n",
    "\n  M[order(rowSums(M)),]\n}\n",
    "\n  M[order(rowSums(M)),]\n}\n",
    "\n    # Write your code here\n    M[order(rowSums(M)),]\n}\n",
    "\n  M[order(rowSums(M)), ]\n}\n",
    "\n  # Get the sum of each row\n  sums <- rowSums(M)\n  # Sort the sums\n  sorted_sums <- sort(sums)\n  # Get the indices of the sorted sums\n  sorted_indices <- order(sums)\n  # Sort the matrix\n  M[sorted_indices,]\n}\n"
  ]
}