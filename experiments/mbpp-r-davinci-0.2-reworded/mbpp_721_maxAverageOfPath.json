{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "r",
  "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nmaxAverageOfPath <- function(cost) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- maxAverageOfPath\n    if(!identical(candidate(list(list(1, 2, 3), list(6, 5, 4), list(7, 3, 9))), 5.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(2, 3, 4), list(7, 6, 5), list(8, 4, 10))), 6.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(3, 4, 5), list(8, 7, 6), list(9, 5, 11))), 7.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))), 5.8)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  max_avg <- 0\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 && j == 1) {\n        cost[i,j] <- cost[i,j]\n      } else if (i == 1) {\n        cost[i,j] <- cost[i,j] + cost[i,j-1]\n      } else if (j == 1) {\n        cost[i,j] <- cost[i,j] + cost[i-1,j]\n      } else {\n        cost[i,j] <- cost[i,j] + max(cost[i-1,j], cost[i,j-1])\n      }\n    }\n  }\n  max_avg <- cost[n,n] / (n*n)\n  return(max_avg)\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j-1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  # Create a matrix to store results of subproblems\n  dp <- matrix(0, n, n)\n  # Fill the enteries for 0'th column\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the enteries for 0'th row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill rest of the enteries in bottom up manner\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  # Return maximum value\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  path <- matrix(0, n, n)\n  path[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    path[1,i] <- path[1,i-1] + cost[1,i]\n    path[i,1] <- path[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      path[i,j] <- max(path[i-1,j], path[i,j-1]) + cost[i,j]\n    }\n  }\n  return(path[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  mat <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  mat[1, ] <- cumsum(cost[1, ])\n  mat[, 1] <- cumsum(cost[, 1])\n  # Fill the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      mat[i, j] <- cost[i, j] + max(mat[i - 1, j], mat[i, j - 1])\n    }\n  }\n  # Return the maximum average\n  return(mat[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the cost of the path\n  pathCost <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths\n  pathCount <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  pathCost[1, 1] <- cost[1, 1]\n  pathCount[1, 1] <- 1\n  for (i in 2:n) {\n    pathCost[1, i] <- pathCost[1, i - 1] + cost[1, i]\n    pathCount[1, i] <- 1\n  }\n  for (i in 2:n) {\n    pathCost[i, 1] <- pathCost[i - 1, 1] + cost[i, 1]\n    pathCount[i, 1] <- 1\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      pathCost[i, j] <- max(pathCost[i - 1, j], pathCost[i, j - 1]) + cost[i, j]\n      pathCount[i, j] <- pathCount[i - 1, j] + pathCount[i, j - 1]\n    }\n  }\n  # Return the average\n  return(pathCost[n, n] / pathCount[n, n])\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n ",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # initialize the matrix of size n*n with 0\n  dp <- matrix(0, n, n)\n  # initialize the first row and first column\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # return the maximum average\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  for (i in 1:n) {\n    for (j in 1:m) {\n      if (i == 1 && j == 1) {\n        cost[i, j] <- cost[i, j]\n      } else if (i == 1) {\n        cost[i, j] <- cost[i, j] + cost[i, j - 1]\n      } else if (j == 1) {\n        cost[i, j] <- cost[i, j] + cost[i - 1, j]\n      } else {\n        cost[i, j] <- cost[i, j] + max(cost[i - 1, j], cost[i, j - 1])\n      }\n    }\n  }\n  return(cost[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  m <- matrix(0, n, n)\n  m[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    m[1,i] <- m[1,i-1] + cost[1,i]\n    m[i,1] <- m[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i,j] <- max(m[i-1,j], m[i,j-1]) + cost[i,j]\n    }\n  }\n  return(m[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    # Write your code here\n    # Return the maximum average cost of a path\n    n <- length(cost)\n    dp <- matrix(0, nrow = n, ncol = n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (n * n))\n}\n ",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Your code goes here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  # Initialize the first row\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  # Initialize the first column\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the result\n  return(dp[n, n] / (n * n))\n}",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  # Your code here\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return (dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  if (n != m) {\n    stop(\"The matrix is not square\")\n  }\n  if (n == 1) {\n    return(cost[1,1])\n  }\n  if (n == 2) {\n    return(max(cost[1,1]+cost[1,2], cost[1,1]+cost[2,1]))\n  }\n  # We will use dynamic programming to solve this problem\n  # We will create a matrix of size n*n, where each cell will contain the maximum average of a path that ends in that cell\n  maxAvg <- matrix(0, n, n)\n  # We will initialize the first row and the first column\n  maxAvg[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    maxAvg[1,i] <- maxAvg[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    maxAvg[i,1] <- maxAvg[i-1,1] + cost[i,1]\n  }\n  # Now we will fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      maxAvg[i,j] <- max(maxAvg[i-1,j], maxAvg[i,j-1]) + cost[i,j]\n    }\n  }\n  return(maxAvg[n,n]/(n*n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  # Fill the first row\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n, n] / (n * n))\n}\n ",
    "\n  # Your code here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0,n,m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for(i in 2:n){\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for(j in 2:n){\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for(i in 2:n){\n        for(j in 2:n){\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  average <- matrix(0, n, n)\n  average[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    average[1,i] <- average[1,i-1] + cost[1,i]\n    average[i,1] <- average[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      average[i,j] <- max(average[i-1,j], average[i,j-1]) + cost[i,j]\n    }\n  }\n  average[n,n] / (n*n)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m]/(n+m-1))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,m] / (n+m-1)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(cost)\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  print(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n+n-1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 && j == 1) {\n        next\n      }\n      if (i == 1) {\n        dp[i, j] <- dp[i, j - 1] + cost[i, j]\n      } else if (j == 1) {\n        dp[i, j] <- dp[i - 1, j] + cost[i, j]\n      } else {\n        dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n      }\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  m <- matrix(0, n, n)\n  m[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    m[1, i] <- m[1, i - 1] + cost[1, i]\n    m[i, 1] <- m[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i, j] <- max(m[i - 1, j], m[i, j - 1]) + cost[i, j]\n    }\n  }\n  m[n, n] / (n * n)\n}\n",
    "\n  # write your code in Rcpp\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n ",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return(cost[[1]][[1]])\n  }\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[[1]][[1]]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[[1]][[i]]\n    dp[i,1] <- dp[i-1,1] + cost[[i]][[1]]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[[i]][[j]]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  # Your code goes here\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][[n]]/(n*n))\n}\n ",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return (dp[n, m] / (n + m - 1))\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (j in 2:m) {\n        dp[1, j] <- dp[1, j - 1] + cost[1, j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    dp[n, m] / (n + m - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (j in 2:m) {\n        dp[1, j] <- dp[1, j - 1] + cost[1, j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    dp[n, m] / (n + m - 1)\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix for storing results of subproblems\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # Fill the first row of dp matrix\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column of dp matrix\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill rest of the entries in dp matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  # Return maximum average\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i-1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2*n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  # Initialize the first row and column\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  # Return the maximum average\n  dp[n, n] / (2 * n - 1)\n}",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    # Write your code here\n    # Return the maximum average\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n]/(2*n-1))\n}\n ",
    "\n  # Your code here\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (n * n))\n}\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  path <- matrix(0, n, n)\n  path[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    path[1, i] <- path[1, i - 1] + cost[1, i]\n    path[i, 1] <- path[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      path[i, j] <- max(path[i - 1, j], path[i, j - 1]) + cost[i, j]\n    }\n  }\n  path[n, n] / (n * n)\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n+n-1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (n*n))\n}\n",
    "\n    n <- nrow(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n        }\n    }\n    return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  # Your code here\n  # cost is a list of lists\n  # each list is a row of the matrix\n  # each element of the list is a column of the matrix\n  # the matrix is square\n  # the matrix is NxN\n  # the matrix is a cost matrix\n  # a path is a sequence of cells that starts at the top left cell\n  # a path can only move right or down\n  # a path ends at the bottom right cell\n  # the average of a path is the total cost of the path divided by the number of cells visited in the path\n  # we want to find the path with the maximum average\n  \n  # create a matrix of the same size as the cost matrix\n  # each element of the matrix is a list\n  # the list contains the cost of the path to that cell\n  # the list contains the number of cells visited in the path to that cell\n  # the list contains the average of the path to that cell\n  # the list contains the path to that cell\n  # the first element of the list is the cost of the path to that cell\n  # the second element of the list is the number of cells visited in the path to that cell\n  # the third element of the list is the average of the path to that cell\n  # the fourth element of the list is the path to that cell\n  # the first element of the list is the cost of the path to the top left cell\n  # the second element of the list is the number of cells visited in the path to the top left cell\n  # the third element of the list is the average of the path to the top left cell\n  # the fourth element of the list is the path to the top left cell\n  # the first element of the list is the cost of the path to the bottom right cell\n  # the second element of the list is the number of cells visited in the path to the bottom right cell\n  # the third element of the list is the average of the path to the bottom right cell\n  # the fourth element of the list is the path to the bottom right cell\n  # the first element of the list is the cost of the path to the cell\n  # the second element of the list is the number of cells visited in the path to the cell\n  # the third element of the list is the average of the path",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 && j == 1) {\n        next\n      }\n      if (i == 1) {\n        dp[i, j] <- dp[i, j - 1] + cost[i, j]\n      } else if (j == 1) {\n        dp[i, j] <- dp[i - 1, j] + cost[i, j]\n      } else {\n        dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n      }\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n) {\n    for(j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix of size n*n\n  average <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  average[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    average[1, i] <- average[1, i - 1] + cost[1, i]\n    average[i, 1] <- average[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      average[i, j] <- cost[i, j] + max(average[i - 1, j], average[i, j - 1])\n    }\n  }\n  # Return the maximum average\n  return(average[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n - 1))\n}\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, m] / (n + m - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  m <- matrix(0, nrow = n, ncol = n)\n  m[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    m[1, i] <- m[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    m[i, 1] <- m[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i, j] <- max(m[i - 1, j], m[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(m[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the sum of the path\n  sum_matrix <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths\n  n_paths <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the average of the path\n  avg_matrix <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column of the sum matrix\n  sum_matrix[1, 1] <- cost[1, 1]\n  n_paths[1, 1] <- 1\n  for (i in 2:n) {\n    sum_matrix[1, i] <- sum_matrix[1, i - 1] + cost[1, i]\n    n_paths[1, i] <- 1\n  }\n  for (i in 2:n) {\n    sum_matrix[i, 1] <- sum_matrix[i - 1, 1] + cost[i, 1]\n    n_paths[i, 1] <- 1\n  }\n  # Compute the sum matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      sum_matrix[i, j] <- sum_matrix[i - 1, j] + cost[i, j]\n      n_paths[i, j] <- n_paths[i - 1, j]\n      if (sum_matrix[i, j - 1] + cost[i, j] > sum_matrix[i, j]) {\n        sum_matrix[i, j] <- sum_matrix[i, j - 1] + cost[i, j]\n        n_paths[i, j] <- n_paths[i, j - 1]\n      } else if (sum_matrix[i, j - 1] + cost[i, j] == sum_matrix[i, j]) {\n        n_paths[i, j] <- n_paths[i, j] + n_paths[i, j - 1]\n      }",
    "\n    n <- length(cost)\n    dp <- matrix(0, nrow = n, ncol = n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the costs\n  costMat <- matrix(0, nrow = n, ncol = n)\n  costMat[1,1] <- cost[[1]][[1]]\n  # Fill the first row\n  for (i in 2:n) {\n    costMat[1,i] <- costMat[1,i-1] + cost[[1]][[i]]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    costMat[i,1] <- costMat[i-1,1] + cost[[i]][[1]]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      costMat[i,j] <- max(costMat[i-1,j], costMat[i,j-1]) + cost[[i]][[j]]\n    }\n  }\n  # Return the maximum average\n  return(costMat[n,n]/(2*n-1))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return (dp[n,n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  # Fill the first row\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the answer\n  return (dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  # Create a matrix to store results of subproblems\n  dp <- matrix(0, n, n)\n  # Fill the entries for 0th column\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the entries for 0th row\n  for (j in 2:n) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  # Fill rest of the entries in dp[][]\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  # Return maximum average\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (2*n-1)\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n+n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  dp[n,n] / (n*n)\n}\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  avg <- matrix(0, n, n)\n  avg[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    avg[1, i] <- avg[1, i - 1] + cost[1, i]\n    avg[i, 1] <- avg[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i, j] <- max(avg[i - 1, j], avg[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(avg[n, n] / (n * n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow=n, ncol=n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n        }\n    }\n    return(dp[n,n] / (2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(cost)\n  n <- length(cost)\n  m <- matrix(0, nrow = n, ncol = n)\n  m[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    m[1,i] <- m[1,i-1] + cost[1,i]\n    m[i,1] <- m[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i,j] <- max(m[i-1,j], m[i,j-1]) + cost[i,j]\n    }\n  }\n  return(m[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- nrow(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n",
    "\n  # Your code goes here\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n",
    "\n  n <- length(cost)\n  m <- matrix(0, nrow = n, ncol = n)\n  m[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    m[1,i] <- m[1,i-1] + cost[1,i]\n    m[i,1] <- m[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i,j] <- max(m[i-1,j], m[i,j-1]) + cost[i,j]\n    }\n  }\n  return(m[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow=n, ncol=n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  print(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)\nmaxAverageOfPath(cost)\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25), nrow=5, ncol=5)\nmaxAverageOfPath(cost)\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  # Initialize the matrix with the first row and column\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n, n] / (n * n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    dp[n,n] / (n*n)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][n]/(2*n-1))\n}\n\ncost <- list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    # Initialize the matrix to store the average cost of each cell\n    avgCost <- matrix(0, n, n)\n    # Initialize the matrix to store the number of paths that can reach each cell\n    numPaths <- matrix(0, n, n)\n    # Initialize the first row and first column\n    avgCost[1, 1] <- cost[1, 1]\n    numPaths[1, 1] <- 1\n    for (i in 2:n) {\n        avgCost[1, i] <- avgCost[1, i - 1] + cost[1, i]\n        numPaths[1, i] <- 1\n    }\n    for (i in 2:n) {\n        avgCost[i, 1] <- avgCost[i - 1, 1] + cost[i, 1]\n        numPaths[i, 1] <- 1\n    }\n    # Fill the rest of the matrix\n    for (i in 2:n) {\n        for (j in 2:n) {\n            avgCost[i, j] <- max(avgCost[i - 1, j], avgCost[i, j - 1]) + cost[i, j]\n            numPaths[i, j] <- numPaths[i - 1, j] + numPaths[i, j - 1]\n        }\n    }\n    # Return the average cost of the last cell\n    return(avgCost[n, n] / numPaths[n, n])\n}",
    "\n  n <- length(cost)\n  # Initialize a matrix to store results of subproblems\n  dp <- matrix(0, n, n)\n  # Fill the entries for 0th row and 0th column\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill rest of the entries in bottom up manner\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  # Return maximum average\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(4,2,3,1,5,6,9,2,7,2,8,4,4,3,2,5), 4, 4)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for(i in 2:n) {\n    dp[1, i] <- dp[1, i-1] + cost[1, i]\n    dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n]/(2*n-1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (2*n-1))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average over all paths\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for(i in 2:n){\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for(i in 2:n){\n        for(j in 2:n){\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n]/(n+n-1))\n}\n ",
    "\n  # Your code here\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i, j - 1], dp[i - 1, j]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][[n]] / (n*n))\n}",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the maximum average\n  # of all paths from (0,0) to (i,j)\n  maxAvg <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths\n  # from (0,0) to (i,j)\n  numPaths <- matrix(0, nrow = n, ncol = n)\n  # Initialize the base cases\n  maxAvg[1,1] <- cost[1,1]\n  numPaths[1,1] <- 1\n  # Fill the first row\n  for (j in 2:n) {\n    maxAvg[1,j] <- maxAvg[1,j-1] + cost[1,j]\n    numPaths[1,j] <- 1\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    maxAvg[i,1] <- maxAvg[i-1,1] + cost[i,1]\n    numPaths[i,1] <- 1\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      # If the average from (i-1,j) is greater than\n      # the average from (i,j-1), then we will choose\n      # the path from (i-1,j)\n      if (maxAvg[i-1,j]/numPaths[i-1,j] > maxAvg[i,j-1]/numPaths[i,j-1]) {\n        maxAvg[i,j] <- maxAvg[i-1,j] + cost[i,j]\n        numPaths[i,j] <- numPaths[i-1,j]\n      } else if (maxAvg[i-1,j]/numPaths[i-1,j] < maxAvg[i,j-1]/numPaths[i,j-1]) {\n        maxAvg[i,j] <- maxAvg[i,j-1] + cost[i,j]\n        numPaths[i",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/((n-1)*2+1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the average cost of the path\n  avg <- matrix(0, n, n)\n  # Initialize the first cell\n  avg[1, 1] <- cost[1, 1]\n  # Initialize the first row\n  for (i in 2:n) {\n    avg[1, i] <- avg[1, i - 1] + cost[1, i]\n  }\n  # Initialize the first column\n  for (i in 2:n) {\n    avg[i, 1] <- avg[i - 1, 1] + cost[i, 1]\n  }\n  # Compute the average cost for the rest of the cells\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i, j] <- max(avg[i - 1, j], avg[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the average cost of the path\n  return(avg[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  sum <- matrix(0, n, n)\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 && j == 1) {\n        sum[i, j] <- cost[i, j]\n      } else if (i == 1) {\n        sum[i, j] <- sum[i, j - 1] + cost[i, j]\n      } else if (j == 1) {\n        sum[i, j] <- sum[i - 1, j] + cost[i, j]\n      } else {\n        sum[i, j] <- max(sum[i - 1, j], sum[i, j - 1]) + cost[i, j]\n      }\n    }\n  }\n  sum[n, n] / (n * n)\n}\n",
    "\n  n <- length(cost)\n  maxAvg <- 0\n  for (i in 1:n) {\n    for (j in 1:n) {\n      avg <- cost[i, j]\n      if (i == n & j == n) {\n        maxAvg <- max(maxAvg, avg)\n      } else if (i == n) {\n        avg <- avg + maxAverageOfPath(cost[, -j])\n        maxAvg <- max(maxAvg, avg)\n      } else if (j == n) {\n        avg <- avg + maxAverageOfPath(cost[-i, ])\n        maxAvg <- max(maxAvg, avg)\n      } else {\n        avg <- avg + max(maxAverageOfPath(cost[-i, ]), maxAverageOfPath(cost[, -j]))\n        maxAvg <- max(maxAvg, avg)\n      }\n    }\n  }\n  return(maxAvg / n)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    dp <- matrix(0, nrow = n, ncol = n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n]/(2*n-1))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i-1] + cost[1, i]\n        dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- cost[i, j] + max(dp[i-1, j], dp[i, j-1])\n        }\n    }\n    return(dp[n, n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n"
  ]
}