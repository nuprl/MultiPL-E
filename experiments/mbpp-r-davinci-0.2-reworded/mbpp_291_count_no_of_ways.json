{
  "name": "mbpp_291_count_no_of_ways",
  "language": "r",
  "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ncount_no_of_ways <- function(n, k) {",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "test_humaneval <- function() {\ncandidate <- count_no_of_ways\n    if(!identical(candidate(2, 4), 16)){quit('no', 1)}\n    if(!identical(candidate(3, 2), 6)){quit('no', 1)}\n    if(!identical(candidate(4, 4), 228)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return (same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    same_color_count_old = same_color_count\n    same_color_count = diff_color_count\n    diff_color_count = (same_color_count_old + diff_color_count) * (k - 1)\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return (k)\n  }\n  if (n == 2) {\n    return (k * k)\n  }\n  diff_color_counts = k * (k - 1)\n  same_color_counts = k\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (diff_color_counts + same_color_counts) * (k - 1)\n    same_color_counts = temp\n  }\n  return (diff_color_counts + same_color_counts)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  total_count = same_color_count + diff_color_count\n  for (i in 3:n) {\n    same_color_count = diff_color_count\n    diff_color_count = total_count * (k - 1)\n    total_count = same_color_count + diff_color_count\n  }\n  return(total_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k * k)\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return (same_color_count + diff_color_count)\n}\n",
    "\n    if (n == 1) {\n        return(k)\n    }\n    if (n == 2) {\n        return(k*k)\n    }\n    same = k\n    diff = k*(k-1)\n    for (i in 3:n) {\n        temp = diff\n        diff = (same + diff)*(k-1)\n        same = temp\n    }\n    return(same + diff)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  diff_color_counts = k * (k - 1)\n  same_color_counts = k\n  total_count = diff_color_counts + same_color_counts\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (diff_color_counts + same_color_counts) * (k - 1)\n    same_color_counts = temp\n    total_count = (diff_color_counts + same_color_counts)\n  }\n  return(total_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color = k\n  diff_color = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k-1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n    if (n == 1) {\n        return(k)\n    }\n    if (n == 2) {\n        return(k*k)\n    }\n    same_color = k\n    diff_color = k*(k-1)\n    for (i in 3:n) {\n        temp = diff_color\n        diff_color = (same_color + diff_color) * (k-1)\n        same_color = temp\n    }\n    return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same <- k\n  diff <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff)*(k-1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k + k * (k - 1))\n  }\n  return(count_no_of_ways(n - 1, k) * (k - 1) + count_no_of_ways(n - 2, k) * (k - 1))\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return (same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0 || k == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_counts = k\n  diff_color_counts = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (same_color_counts + diff_color_counts) * (k - 1)\n    same_color_counts = temp\n  }\n  return(same_color_counts + diff_color_counts)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k + k * (k - 1))\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if(n == 0) return 0\n  if(n == 1) return k\n  if(n == 2) return k * k\n  same <- k\n  diff <- k * (k - 1)\n  for(i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color = k\n  diff_color = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k-1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k*k\n  }\n  same_color = k\n  diff_color = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k-1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count)*(k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k + k*(k-1))\n  }\n  same <- k\n  diff <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k-1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k * k)\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color <- k\n  diff_color <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff_color\n    diff_color <- (same_color + diff_color) * (k-1)\n    same_color <- temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_counts = k\n  diff_color_counts = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (same_color_counts + diff_color_counts) * (k - 1)\n    same_color_counts = temp\n  }\n  return(same_color_counts + diff_color_counts)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  # Create a matrix to store results of subproblems\n  dp <- matrix(0, n+1, k+1)\n  \n  # There are k ways to color first post\n  dp[1, 1:k] <- 1\n  \n  # There are 0 ways for any other post to violate\n  # the problem statement\n  dp[2:n, 1] <- 0\n  \n  # Fill rest of the entries in dp[][]\n  for (i in 2:n) {\n    for (j in 2:k) {\n      # Ways when last two posts have same color\n      same <- dp[i-1, j] * 1\n      \n      # Ways when last two posts have different colors\n      diff <- dp[i-1, j-1] * (k-1)\n      \n      # Total ways till i\n      dp[i, j] <- same + diff\n    }\n  }\n  \n  # Return total ways\n  return(dp[n, k])\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n    if (n == 1) {\n        return(k)\n    }\n    if (n == 2) {\n        return(k * k)\n    }\n    same_color_count = k\n    diff_color_count = k * (k - 1)\n    for (i in 3:n) {\n        temp = diff_color_count\n        diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n        same_color_count = temp\n    }\n    return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return (k)\n  }\n  if (n == 2) {\n    return (k*k)\n  }\n  same = k\n  diff = k*(k-1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff)*(k-1)\n    same = temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  # Write your code here\n  if(n==1) return k\n  if(n==2) return k*k\n  same <- k\n  diff <- k*(k-1)\n  for(i in 3:n){\n    temp <- diff\n    diff <- (same + diff)*(k-1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k*k\n  }\n  same <- k\n  diff <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff)*(k-1)\n    same <- temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  diff_color_counts = k * (k - 1)\n  same_color_counts = k\n  total_count = diff_color_counts + same_color_counts\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (diff_color_counts + same_color_counts) * (k - 1)\n    same_color_counts = temp\n    total_count = diff_color_counts + same_color_counts\n  }\n  return(total_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  diff_color_counts = k * (k - 1)\n  same_color_counts = k\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (diff_color_counts + same_color_counts) * (k - 1)\n    same_color_counts = temp\n  }\n  return(diff_color_counts + same_color_counts)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  diff_color_counts <- k * (k - 1)\n  same_color_counts <- k\n  total_counts <- diff_color_counts + same_color_counts\n  for (i in 3:n) {\n    temp <- diff_color_counts\n    diff_color_counts <- (diff_color_counts * (k - 1)) + (same_color_counts * (k - 1))\n    same_color_counts <- temp\n    total_counts <- diff_color_counts + same_color_counts\n  }\n  return(total_counts)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  total_count = same_color_count + diff_color_count\n  for (i in 3:n) {\n    same_color_count = diff_color_count\n    diff_color_count = total_count * (k - 1)\n    total_count = same_color_count + diff_color_count\n  }\n  return(total_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count <- k\n  diff_color_count <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k-1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff_color_count\n    diff_color_count <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k*k)\n  same <- k\n  diff <- k*(k-1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff)*(k-1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if(n == 0) {\n    return 0\n  }\n  if(n == 1) {\n    return k\n  }\n  if(n == 2) {\n    return k * k\n  }\n  same_color_count <- k\n  diff_color_count <- k * (k - 1)\n  for(i in 3:n) {\n    same_color_count_new <- diff_color_count\n    diff_color_count_new <- (same_color_count + diff_color_count) * (k - 1)\n    same_color_count <- same_color_count_new\n    diff_color_count <- diff_color_count_new\n  }\n  return same_color_count + diff_color_count\n}\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  diff_color_counts = k * (k - 1)\n  same_color_counts = k\n  total_counts = diff_color_counts + same_color_counts\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (diff_color_counts * (k - 1)) + (same_color_counts * (k - 1))\n    same_color_counts = temp\n    total_counts = diff_color_counts + same_color_counts\n  }\n  return(total_counts)\n}\ncount_no_of_ways(4, 3)\n",
    "\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return same_color + diff_color\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k * k)\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k*k)\n  }\n  same_color_count = k\n  diff_color_count = k*(k-1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k-1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(4, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return (same_color + diff_color)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return (same_color + diff_color)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return(same_color + diff_color)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k + k * (k - 1)\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_counts = k\n  diff_color_counts = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_counts\n    diff_color_counts = (same_color_counts + diff_color_counts) * (k - 1)\n    same_color_counts = temp\n  }\n  return(same_color_counts + diff_color_counts)\n}\n\ncount_no_of_ways(2, 3)\n",
    "\n  if (n == 0)\n    return 0\n  if (n == 1)\n    return k\n  if (n == 2)\n    return k*k\n  same = k\n  diff = k*(k-1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff)*(k-1)\n    same = temp\n  }\n  return same + diff\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k * k)\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return (same + diff)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return k\n  if (n == 2) return k * k\n  same_color = k\n  diff_color = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color\n    diff_color = (same_color + diff_color) * (k - 1)\n    same_color = temp\n  }\n  return (same_color + diff_color)\n}\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) return(k)\n  if (n == 2) return(k * k)\n  same <- k\n  diff <- k * (k - 1)\n  for (i in 3:n) {\n    temp <- diff\n    diff <- (same + diff) * (k - 1)\n    same <- temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(3, 2)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return(same_color_count + diff_color_count)\n}\n\ncount_no_of_ways(3, 3)\n",
    "\n  if (n == 1) {\n    return(k)\n  }\n  if (n == 2) {\n    return(k * k)\n  }\n  same = k\n  diff = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  }\n  return(same + diff)\n}\n\ncount_no_of_ways(4, 2)\n",
    "\n  if (n == 0 || k == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return k\n  }\n  if (n == 2) {\n    return k * k\n  }\n  same_color_count = k\n  diff_color_count = k * (k - 1)\n  for (i in 3:n) {\n    temp = diff_color_count\n    diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n    same_color_count = temp\n  }\n  return same_color_count + diff_color_count\n}\n\ncount_no_of_ways(3, 2)\n"
  ]
}