{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the last digit in factorial of a given number.\n    public static long LastDigitFactorial(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigitFactorial((4L)) == (4L));\n    Debug.Assert(LastDigitFactorial((21L)) == (0L));\n    Debug.Assert(LastDigitFactorial((30L)) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] factorials = new long[] { 1, 1, 2, 6, 24 };\n        long[] powersOfFive = new long[] { 1, 5, 25, 125, 625 };\n        long[] powersOfTwo = new long[] { 1, 2, 4, 8, 16 };\n        long[] powersOfTen = new long[] { 1, 10, 100, 1000, 10000 };\n        long[] powersOfTwenty = new long[] { 1, 20, 400, 8000, 160000 };\n        long[] powersOfFifty = new long[] { 1, 50, 2500, 125000, 6250000 };\n        long[] powersOfHundred = new long[] { 1, 100, 10000, 1000000, 100000000 };\n        long[] powersOfTwoHundred = new long[] { 1, 200, 40000, 8000000, 1600000000 };\n        long[] powersOfFiveHundred = new long[] { 1, 500, 250000, 125000000, 62500000000 };\n        long[] powersOfThousand = new long[] { 1, 1000, 1000000, 10000000000, 1000000000000 };\n        long[] powersOfTwoThousand = new long[] { 1, 2000, 4000000, 80000000000, 16000000000000 };\n        long[] powersOfFiveThousand = new long[] { 1, 5000, 25000000, 1250000000000, 625000000000000 };\n        long[] powersOfTenThousand = new long[] { 1, 10000, 100000000, 100000000000000, 10000000000000000 };\n        long[] powersOfTwentyThousand = new long[] { 1, 20000, 400000000, 800000000000000, 160000000000000000 };\n        long[] powersOfFiftyThousand = new long[] { 1, 50000, 2500000000, 12500000000000000, 6250000000000000000 };\n        long[] powersOfHundredThousand = new long[] { 1, 100000, 10000000000, 1000000000000000000, 100000000000000000000 };\n        long[] powersOfTwoHundredThousand = new long[] { 1, 200000, 40000000000, 8000000000000000000, 1600000000000000000000 };\n        long[] powers",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        BigInteger fact = 1;\n        for (long i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact % 10;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        while (n > 1) {\n            result = (result * n) % 10;\n            n--;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        long result = 1;\n        while (n > 0) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        BigInteger factorial = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial % 10;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        BigInteger factorial = 1;\n        for (long i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return (long)(factorial % 10);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be positive\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = i * factorials[i - 1];\n        }\n        long result = 1;\n        while (n > 1) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long result = 1;\n        long p = 0;\n        while (n > 0) {\n            p = n % 5;\n            result = (result * lastDigits[p]) % 10;\n            n = n / 5;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) return -1;\n        if (n <= 1) return 1;\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long result = 1;\n        long p = 0;\n        while (n > 0) {\n            if (n % 5 == 0) {\n                result = (result * lastDigits[(n % 100) / 20]) % 10;\n                n /= 5;\n            } else {\n                result = (result * lastDigits[(n % 100) / 20]) % 10;\n                n -= 1;\n            }\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n            result %= 10;\n        }\n        return result;",
    "        BigInteger fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return (long)(fact % 10);",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long last = 1;\n        for (long i = 2; i <= n; i++) {\n            last *= i;\n            last %= 10;\n        }\n        return last;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return 0;\n        } else if (n <= 1) {\n            return 1;\n        } else {\n            long[] factorials = new long[n + 1];\n            factorials[0] = 1;\n            factorials[1] = 1;\n            for (int i = 2; i <= n; i++) {\n                factorials[i] = factorials[i - 1] * i;\n                while (factorials[i] % 10 == 0) {\n                    factorials[i] /= 10;\n                }\n                factorials[i] %= 100;\n            }\n            return factorials[n] % 10;\n        }",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit *= i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        BigInteger fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact % 10;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] lastDigits2 = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8 };\n        long[] lastDigits3 = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8, 8, 8, 2, 6, 8, 4, 4, 4, 8 };\n        long[] lastDigits4 = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8, 8, 8, 2, 6, 8, 4, 4, 4, 8, 8, 6, 6, 4, 2, 6, 2, 6, 4, 8, 6, 4, 6, 2, 2, 4, 2, 4, 2, 8, 6, 2, 8, 4, 4, 8, 6, 4, 6, 2, 2, 6, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 8, 4, 6, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 4, 2, 4, 2, 8, 4, 6, 2, 6, 4, 6, 6, 4, 2, 6, 4, 6, 2, 4, 2, 4, 2, 8, 6, 2, 6, 4, 2, 6, 2, 6, 4, 8, 6, 4, 6, 2, 2, 4, 2, 4, 2, 8, 6, 2, 8, 4, 4, 8, 6, 4, 6, 2, 2, 6, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 8, 4, 6, 6, 4, 6, 2, 4, 6, 2, 6",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) return -1;\n        if (n <= 1) return 1;\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long last = 1;\n        for (long i = 2; i <= n; i++) {\n            last = (last * i) % 10;\n        }\n        return last;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = i * factorials[i - 1];\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = factorials[i - 1] * i;\n        }\n        long lastDigit = 1;\n        while (n > 0) {\n            lastDigit = (lastDigit * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = i * factorials[i - 1];\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long res = 1;\n        for (int i = 2; i <= n; i++) {\n            res = (res * i) % 10;\n        }\n        return res;",
    "        // Write your code here\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long res = 1;\n        for (long i = 2; i <= n; i++) {\n            res = (res * i) % 10;\n        }\n        return res;",
    "        BigInteger fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long res = 1;\n        for (long i = 2; i <= n; i++) {\n            res = (res * i) % 10;\n        }\n        return res;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = i * factorials[i - 1];\n        }\n        long result = 1;\n        while (n > 0) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigits[i] = (i * lastDigits[i - 1]) % 10;\n        }\n        return lastDigits[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        long last = 1;\n        for (long i = 2; i <= n; i++) {\n            last = (last * i) % 10;\n        }\n        return last;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] cycle = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8 };\n        long cycleLength = cycle.Length;\n        long cycleIndex = n % cycleLength;\n        long lastDigit = cycle[cycleIndex];\n        return lastDigit;",
    "        BigInteger factorial = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = i * factorials[i - 1];\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * (i % 10)) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long res = 1;\n        for (long i = 2; i <= n; i++) {\n            res = (res * i) % 10;\n        }\n        return res;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = i * factorials[i - 1];\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigits[i] = (i * lastDigits[i - 1]) % 10;\n        }\n        return lastDigits[n];",
    "        if (n < 0) return -1;\n        if (n <= 1) return 1;\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long last = 1;\n        for (long i = 2; i <= n; i++) {\n            last = (last * i) % 10;\n        }\n        return last;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) return -1;\n        if (n < 2) return 1;\n        long last = 1;\n        for (long i = 2; i <= n; i++) {\n            last = (last * i) % 10;\n        }\n        return last;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = (factorials[i-1] * i) % 10;\n        }\n        long lastDigit = 1;\n        while (n > 0) {\n            lastDigit = (lastDigit * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        // Create a list of numbers from 1 to n\n        List<long> nums = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        // Multiply all the numbers in the list together\n        long result = 1;\n        foreach (long num in nums) {\n            result *= num;\n        }\n        // Return the last digit of the result\n        return result % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        long result = 1;\n        while (n > 0) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8 };\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * (i % 10)) % 10;\n            if (lastDigit == 0) {\n                return 0;\n            }\n        }\n        return lastDigit;",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        BigInteger factorial = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial % 10;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        // We can use the fact that the last digit of a number repeats every 4 numbers.\n        // For example, the last digit of 5! is the same as the last digit of 9!\n        // This is because 5! = 120, and 9! = 362880, and 120 % 10 = 0, and 362880 % 10 = 0\n        // So we can just calculate the last digit of n % 4!\n        // This is because 4! = 24, and 24 % 10 = 4\n        // So we can just calculate the last digit of n % 4\n        // This is because 4 % 10 = 4\n        // So we can just calculate the last digit of n\n        // This is because n % 10 = n\n        // So we can just return n\n        return n;",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4, 2, 2, 4, 2, 8 };\n        long lastDigit = 1;\n        long p = 0;\n        while (n > 0) {\n            p = n % 10;\n            if (p != 0) {\n                lastDigit = (lastDigit * lastDigits[p]) % 10;\n            }\n            n /= 10;\n        }\n        return lastDigit;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        BigInteger factorial = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigits[i] = (i * lastDigits[i - 1]) % 10;\n        }\n        return lastDigits[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = i * factorials[i - 1];\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        } else if (n <= 1) {\n            return 1;\n        } else {\n            long[] factorials = new long[n + 1];\n            factorials[0] = 1;\n            factorials[1] = 1;\n            for (int i = 2; i <= n; i++) {\n                factorials[i] = factorials[i - 1] * i;\n                factorials[i] %= 10;\n            }\n            return factorials[n];\n        }",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] factorials = new long[] { 1, 1, 2, 6, 24 };\n        long[] remainders = new long[] { 1, 1, 2, 4, 2 };\n        long[] powers = new long[] { 1, 1, 2, 4, 8 };\n        long[] divisors = new long[] { 1, 1, 2, 6, 24 };\n        long[] divisorPowers = new long[] { 1, 1, 2, 6, 24 };\n        long[] divisorRemainders = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowers = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverse = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModModMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModModModMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModModModModMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModModModModModMod = new long[] { 1, 1, 2, 4, 2 };\n        long[] divisorRemainderPowersModInverseModModModModModModMod = new long[] { 1, 1, 2, 4",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit *= i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long res = 1;\n        for (long i = 2; i <= n; i++) {\n            res = (res * i) % 10;\n        }\n        return res;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        BigInteger factorial = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial % 10;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = i * factorials[i - 1];\n        }\n        long result = 1;\n        while (n > 0) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;"
  ]
}