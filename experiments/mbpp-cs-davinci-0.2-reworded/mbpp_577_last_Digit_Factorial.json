{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the last digit in factorial of a given number.\n    public static long LastDigitFactorial(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigitFactorial((4L)) == (4L));\n    Debug.Assert(LastDigitFactorial((21L)) == (0L));\n    Debug.Assert(LastDigitFactorial((30L)) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        return (n * LastDigitFactorial(n - 1)) % 10;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] factorials = new long[] { 1, 1, 2, 6, 24 };\n        long[] powersOfFive = new long[] { 1, 5, 25, 125, 625 };\n        long[] powersOfTwo = new long[] { 1, 2, 4, 8, 16 };\n        long[] powersOfTen = new long[] { 1, 10, 100, 1000, 10000 };\n        long[] powersOfTwenty = new long[] { 1, 20, 400, 8000, 160000 };\n        long[] powersOfFifty = new long[] { 1, 50, 2500, 125000, 6250000 };\n        long[] powersOfHundred = new long[] { 1, 100, 10000, 1000000, 100000000 };\n        long[] powersOfTwoHundred = new long[] { 1, 200, 40000, 8000000, 1600000000 };\n        long[] powersOfFiveHundred = new long[] { 1, 500, 250000, 125000000, 62500000000 };\n        long[] powersOfThousand = new long[] { 1, 1000, 1000000, 10000000000, 1000000000000 };\n        long[] powersOfTwoThousand = new long[] { 1, 2000, 4000000, 80000000000, 16000000000000 };\n        long[] powersOfFiveThousand = new long[] { 1, 5000, 25000000, 1250000000000, 625000000000000 };\n        long[] powersOfTenThousand = new long[] { 1, 10000, 100000000, 100000000000000, 10000000000000000 };\n        long[] powersOfTwentyThousand = new long[] { 1, 20000, 400000000, 800000000000000, 160000000000000000 };\n        long[] powersOfFiftyThousand = new long[] { 1, 50000, 2500000000, 12500000000000000, 6250000000000000000 };\n        long[] powersOfHundredThousand = new long[] { 1, 100000, 10000000000, 1000000000000000000, 100000000000000000000 };\n        long[] powersOfTwoHundredThousand = new long[] { 1, 200000, 40000000000, 8000000000000000000, 1600000000000000000000 };\n        long[] powers",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        BigInteger fact = 1;\n        for (long i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact % 10;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        while (n > 1) {\n            result = (result * n) % 10;\n            n--;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[n + 1];\n        lastDigits[0] = 1;\n        lastDigits[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigits[i] = (lastDigits[i - 1] * i) % 10;\n        }\n        return lastDigits[n];",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[10];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i < 10; i++) {\n            factorials[i] = (factorials[i - 1] * i) % 10;\n        }\n        long result = 1;\n        while (n > 0) {\n            result = (result * factorials[n % 10]) % 10;\n            n /= 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;"
  ]
}