{
  "name": "mbpp_424_extract_rear",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    public static List<string> ExtractRear(string test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractRear(Tuple.Create(\"Mers\", \"for\", \"Vers\")).Equals((new List<string>(new string[]{(string)\"s\", (string)\"r\", (string)\"s\"}))));\n    Debug.Assert(ExtractRear(Tuple.Create(\"Avenge\", \"for\", \"People\")).Equals((new List<string>(new string[]{(string)\"e\", (string)\"r\", (string)\"e\"}))));\n    Debug.Assert(ExtractRear(Tuple.Create(\"Gotta\", \"get\", \"go\")).Equals((new List<string>(new string[]{(string)\"a\", (string)\"t\", (string)\"o\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var temp = test_tuple.Split(',');\n        foreach (var item in temp) {\n            result.Add(item.Substring(item.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        for (int i = 0; i < split.Length; i++) {\n            result.Add(split[i].Substring(split[i].Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var list = new List<string>();\n        var tuple = test_tuple.Split(' ');\n        foreach (var item in tuple) {\n            list.Add(item[item.Length - 1].ToString());\n        }\n        return list;",
    "        List<string> result = new List<string>();\n        string[] split = test_tuple.Split(',');\n        foreach (string s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        List<string> result = new List<string>();\n        string[] words = test_tuple.Split(',');\n        foreach (string word in words) {\n            result.Add(word[word.Length - 1].ToString());\n        }\n        return result;",
    "        // Your code here\n        List<string> result = new List<string>();\n        string[] words = test_tuple.Split(',');\n        foreach (string word in words) {\n            result.Add(word[word.Length - 1].ToString());\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var parts = test_tuple.Split(',');\n        foreach (var part in parts) {\n            var trimmed = part.Trim();\n            if (trimmed.Length > 0) {\n                result.Add(trimmed[trimmed.Length - 1].ToString());\n            }\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var item in split) {\n            result.Add(item.Substring(item.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        List<string> result = new List<string>();\n        string[] words = test_tuple.Split(',');\n        foreach (string word in words) {\n            result.Add(word.Substring(word.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var s in split) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var tuple = test_tuple.Split(',');\n        foreach (var item in tuple) {\n            result.Add(item.Substring(item.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        foreach (var item in split) {\n            result.Add(item.Substring(item.Length - 1));\n        }\n        return result;",
    "        List<string> result = new List<string>();\n        string[] test_tuple_array = test_tuple.Split(',');\n        foreach (string s in test_tuple_array) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;",
    "        var result = new List<string>();\n        var split = test_tuple.Split(',');\n        for (int i = 0; i < split.Length; i++) {\n            result.Add(split[i][split[i].Length - 1].ToString());\n        }\n        return result;",
    "        List<string> result = new List<string>();\n        string[] test_tuple_array = test_tuple.Split(',');\n        foreach (string s in test_tuple_array) {\n            result.Add(s.Substring(s.Length - 1));\n        }\n        return result;"
  ]
}