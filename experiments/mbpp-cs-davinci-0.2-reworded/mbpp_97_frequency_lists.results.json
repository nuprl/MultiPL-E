{
  "name": "mbpp_97_frequency_lists",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        var dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long num in list2) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2db5ec855e4e4848a35b5545a6571f7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2db5ec855e4e4848a35b5545a6571f7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (dict.ContainsKey(i)) {\n                    dict[i] += 1;\n                } else {\n                    dict[i] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bb6dfeb1dc5460b87319f13790f27ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bb6dfeb1dc5460b87319f13790f27ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict.Add(item,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eacab30fb75049608585cf7e712dd024>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eacab30fb75049608585cf7e712dd024>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> sublist in list1) {\n            foreach (long i in sublist) {\n                if (freq.ContainsKey(i)) {\n                    freq[i] += 1;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c178d55d7410471cb0567f8dc36c393a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c178d55d7410471cb0567f8dc36c393a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8932a51dece428b8ba5fa4c8fc085d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8932a51dece428b8ba5fa4c8fc085d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (!result.ContainsKey(element)) {\n                    result[element] = 0;\n                }\n                result[element]++;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae26a4a128f74089bd11ae1cc7e150ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae26a4a128f74089bd11ae1cc7e150ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq.Add(i,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4237b6a6413346669444c6becf4e9e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4237b6a6413346669444c6becf4e9e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0a76a97f51dc4fa5bd7f60491e54393f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0a76a97f51dc4fa5bd7f60491e54393f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61d61741af1145c2949041dd34e05bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61d61741af1145c2949041dd34e05bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (freq.ContainsKey(i)) {\n                    freq[i] += 1;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6384549385d64d6ba6ae341f33d6ca61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6384549385d64d6ba6ae341f33d6ca61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <741f2eb776c1444aae5883197c5a9b75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <741f2eb776c1444aae5883197c5a9b75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> d = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (d.ContainsKey(i)) {\n                    d[i]++;\n                } else {\n                    d[i] = 1;\n                }\n            }\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a957e379683947b093a76bdcfe139e8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a957e379683947b093a76bdcfe139e8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68cf7779592d423998b0a146d722fc69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68cf7779592d423998b0a146d722fc69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61d61741af1145c2949041dd34e05bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61d61741af1145c2949041dd34e05bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq.Add(i,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4237b6a6413346669444c6becf4e9e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4237b6a6413346669444c6becf4e9e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result.Add(item, 1);\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ebd2ce5f7ba4e8cb211babe3b85b203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ebd2ce5f7ba4e8cb211babe3b85b203>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> l in list1) {\n            foreach(long i in l) {\n                if(freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq.Add(i,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f207908461b4d6682de4acac63eb2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f207908461b4d6682de4acac63eb2b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f87f658b68d549b881df33130005cd16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f87f658b68d549b881df33130005cd16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long item in list) {\n                if(freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac7bed9510264f0192d10ed2ff68d524>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac7bed9510264f0192d10ed2ff68d524>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict.Add(num,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3f3ab2fbea274638ad073b35fb64ccd1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3f3ab2fbea274638ad073b35fb64ccd1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item] += 1;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <022be59f5bdd49918e350cb2a56c5e7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long i in list) {\n                if(dict.ContainsKey(i)) {\n                    dict[i]++;\n                } else {\n                    dict.Add(i,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d2d733128ac243eba4a86c93f3efa050>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d2d733128ac243eba4a86c93f3efa050>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long element in list2) {\n                if (freq.ContainsKey(element)) {\n                    freq[element]++;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <31ca7e12449742978cb1ec28c2f5014b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <31ca7e12449742978cb1ec28c2f5014b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long elem in list) {\n                if (freq.ContainsKey(elem)) {\n                    freq[elem]++;\n                } else {\n                    freq[elem] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63febf30a34442228afb48a27783ed7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63febf30a34442228afb48a27783ed7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <896ea9b2de104422b74ebcee3d72b6a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <896ea9b2de104422b74ebcee3d72b6a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element] += 1;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1644a3e288f45358b50b74e7f250139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1644a3e288f45358b50b74e7f250139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element] += 1;\n                } else {\n                    freq.Add(element, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b1a22e2f6234ed0b195ea85e4d01dee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b1a22e2f6234ed0b195ea85e4d01dee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (dict.ContainsKey(element)) {\n                    dict[element]++;\n                } else {\n                    dict[element] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7753da5a0644454a9aaf4ab510df159f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7753da5a0644454a9aaf4ab510df159f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict.Add(item, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc6d66b911b040cfa6e51afc3a6cd1db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc6d66b911b040cfa6e51afc3a6cd1db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i] += 1;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c0f8d7029554920b99c213a3a4d1ab1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i] += 1;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long x in list) {\n                if (freq.ContainsKey(x)) {\n                    freq[x]++;\n                } else {\n                    freq[x] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result.Add(element,1);\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <149fee98988a4c038c934c58c96180e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <149fee98988a4c038c934c58c96180e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (dict.ContainsKey(element)) {\n                    dict[element]++;\n                } else {\n                    dict[element] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c46c10283a4d3db36b69bf2acb7d51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c46c10283a4d3db36b69bf2acb7d51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38274ff5b13c4ba485b60a8693ccae28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38274ff5b13c4ba485b60a8693ccae28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long element in list) {\n                if(dict.ContainsKey(element)) {\n                    dict[element]++;\n                }\n                else {\n                    dict.Add(element,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3da8c8a1a379465e8ec56bc29e16a7dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3da8c8a1a379465e8ec56bc29e16a7dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long x in list) {\n                if (freq.ContainsKey(x)) {\n                    freq[x]++;\n                } else {\n                    freq[x] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <89c112730a2e4e7c8ef746b9053ac942>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <89c112730a2e4e7c8ef746b9053ac942>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list2 in list1) {\n            foreach(long num in list2) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b21c681617c74a3e9f9e7189265a05c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b21c681617c74a3e9f9e7189265a05c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (dict.ContainsKey(i)) {\n                    dict[i] += 1;\n                } else {\n                    dict[i] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bb6dfeb1dc5460b87319f13790f27ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bb6dfeb1dc5460b87319f13790f27ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long x in list) {\n                if (freq.ContainsKey(x)) {\n                    freq[x]++;\n                } else {\n                    freq[x] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ebf6b2890b3d4bd0bfb8cc2374e25df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long l in list) {\n                if (freq.ContainsKey(l)) {\n                    freq[l] += 1;\n                } else {\n                    freq[l] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7ad032b412cf42f2a6148059febdf3d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7ad032b412cf42f2a6148059febdf3d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        var dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long num in list2) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3e7a7811f94122bebc786353eef084>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3e7a7811f94122bebc786353eef084>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        var dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> result = new Dictionary<long, long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab3738b160442dc91bac3c7c3c2e601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab3738b160442dc91bac3c7c3c2e601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d8d44954c76a407d9787ba078d2a66e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long elem in list) {\n                if (freq.ContainsKey(elem)) {\n                    freq[elem]++;\n                } else {\n                    freq[elem] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63febf30a34442228afb48a27783ed7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63febf30a34442228afb48a27783ed7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element]++;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d0c2ee25de34e889fbe4728f5fcc07e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d0c2ee25de34e889fbe4728f5fcc07e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i] += 1;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <867abfa4e0744cd98f1eacff5c72389a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a1954aa5382e4a8986468dd74baec912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfdadad2a04f49babad085ae4b09bf46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (dict.ContainsKey(i)) {\n                    dict[i]++;\n                } else {\n                    dict.Add(i,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <563e2fa4c7df496f8ffe6eabc5e94118>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <563e2fa4c7df496f8ffe6eabc5e94118>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        var dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> sublist in list1) {\n            foreach (long element in sublist) {\n                if (freq.ContainsKey(element)) {\n                    freq[element] += 1;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd66d7a51b68406aa323a85fa86b895e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd66d7a51b68406aa323a85fa86b895e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b71d8768440d453d98e7c54fec93abf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b71d8768440d453d98e7c54fec93abf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                }\n                else {\n                    dict.Add(num,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <daffc2a951254847b54bef4b2730bc29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <daffc2a951254847b54bef4b2730bc29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num] += 1;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f87f658b68d549b881df33130005cd16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f87f658b68d549b881df33130005cd16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element]++;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long element in list) {\n                if(result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68947bfb4c364cada24ec1dab08945fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <68947bfb4c364cada24ec1dab08945fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (dict.ContainsKey(element)) {\n                    dict[element] += 1;\n                } else {\n                    dict[element] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4f092a0d85554719bd7d607fb914a7a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4f092a0d85554719bd7d607fb914a7a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfd01a3e58df479a860c62535c306b31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dfd01a3e58df479a860c62535c306b31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long num in list2) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3e7a7811f94122bebc786353eef084>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3e7a7811f94122bebc786353eef084>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element]++;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long i in list) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00c495f2079d4090bb208eebd52f8ee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result.Add(element, 1);\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2188f6b5785c4a9bafa36ea62a78cc7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2188f6b5785c4a9bafa36ea62a78cc7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach(List<long> sublist in list1) {\n            foreach(long element in sublist) {\n                if(result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43aadf219b1449519c5baa9f883fae98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43aadf219b1449519c5baa9f883fae98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result.Add(element, 1);\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5db51df188149399fc733791b3885ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5db51df188149399fc733791b3885ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element]++;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a99b073ae63447c9ac62184710231cd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item] = result[item] + 1;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e0a77522ec1473981fdde7e0abd216d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e0a77522ec1473981fdde7e0abd216d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long item in list2) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq.Add(item, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a77c286e66b146e2bf771a883b99c60d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a77c286e66b146e2bf771a883b99c60d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59e28cc91b8940e3a21f339a09472346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long n in l) {\n                if (freq.ContainsKey(n)) {\n                    freq[n]++;\n                } else {\n                    freq[n] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f1d20d16e4ae4377bed752f04c27d7d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f1d20d16e4ae4377bed752f04c27d7d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long item in list) {\n                if(result.ContainsKey(item)) {\n                    result[item]++;\n                } else {\n                    result[item] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94f9cf934223428796427ca8f67b060f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94f9cf934223428796427ca8f67b060f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> sublist in list1) {\n            foreach(long element in sublist) {\n                if(dict.ContainsKey(element)) {\n                    dict[element]++;\n                } else {\n                    dict.Add(element,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fa5ba9890b6494d86522a5f570b8823>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fa5ba9890b6494d86522a5f570b8823>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long item in list2) {\n                if (freq.ContainsKey(item)) {\n                    freq[item] += 1;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <78a56a12a25845d4978b3014fb7e33e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <78a56a12a25845d4978b3014fb7e33e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f587106d0a53442d94d79ad0b913096f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict.Add(item, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc6d66b911b040cfa6e51afc3a6cd1db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc6d66b911b040cfa6e51afc3a6cd1db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1796c867781d4403b7df23845f97f633>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1796c867781d4403b7df23845f97f633>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element] += 1;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1644a3e288f45358b50b74e7f250139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1644a3e288f45358b50b74e7f250139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item] += 1;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> l in list1) {\n            foreach (long i in l) {\n                if (freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <896ea9b2de104422b74ebcee3d72b6a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <896ea9b2de104422b74ebcee3d72b6a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num,1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c46c10283a4d3db36b69bf2acb7d51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c46c10283a4d3db36b69bf2acb7d51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        var dict = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item]++;\n                } else {\n                    dict[item] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ade8e222f9014de9b370f86865d42b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item] += 1;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (dict.ContainsKey(item)) {\n                    dict[item] += 1;\n                } else {\n                    dict.Add(item, 1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <649fbb0c57b84cd18d74c42432d3a728>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <649fbb0c57b84cd18d74c42432d3a728>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (dict.ContainsKey(element)) {\n                    dict[element]++;\n                } else {\n                    dict[element] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <18eb2b96ee094168b237324a0515720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long i in list) {\n                if(freq.ContainsKey(i)) {\n                    freq[i]++;\n                } else {\n                    freq[i] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <06c82d75f8b34b3a844bc08c889eda08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <06c82d75f8b34b3a844bc08c889eda08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f62ab31179748b5b524c506898be9dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num]++;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1a30471351b49ecacabd3a1864026a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (var list in list1) {\n            foreach (var item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7d34136b2534e1b9072f73751629f27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq.Add(num, 1);\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ebc3c0340de4c72af6e138c7e5dd025>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ebc3c0340de4c72af6e138c7e5dd025>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> result = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (result.ContainsKey(element)) {\n                    result[element] += 1;\n                } else {\n                    result[element] = 1;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd88199fb1bf45afb4a59c8e7390fc8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list2 in list1) {\n            foreach (long num in list2) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123602,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d37a395c8f16457ab89fa4ca15d1ac4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d37a395c8f16457ab89fa4ca15d1ac4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach(List<long> list in list1) {\n            foreach(long num in list) {\n                if(dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict.Add(num,1);\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38274ff5b13c4ba485b60a8693ccae28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38274ff5b13c4ba485b60a8693ccae28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item]++;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a09920d4415047ea8e4982518381772d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long item in list) {\n                if (freq.ContainsKey(item)) {\n                    freq[item] += 1;\n                } else {\n                    freq[item] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee06d09328047f4bf84157e5f877f7b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (freq.ContainsKey(num)) {\n                    freq[num] += 1;\n                } else {\n                    freq[num] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123600,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0c2ef5aa0d654891954f4db39c488ed2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long num in list) {\n                if (dict.ContainsKey(num)) {\n                    dict[num]++;\n                } else {\n                    dict[num] = 1;\n                }\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <11d2173cb8d24f1b808f1992991bf8ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n        Dictionary<long,long> freq = new Dictionary<long,long>();\n        foreach (List<long> list in list1) {\n            foreach (long element in list) {\n                if (freq.ContainsKey(element)) {\n                    freq[element]++;\n                } else {\n                    freq[element] = 1;\n                }\n            }\n        }\n        return freq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008cc144f9c64a519884d7b9d223114e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}