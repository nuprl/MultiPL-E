{
  "name": "mbpp_446_count_Occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, object lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new object(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new object(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new object(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code goes here\n        return 0;",
    "        long count = 0;\n        foreach (object elem in (List<object>)lst) {\n            if (((List<object>)tup).Contains(elem)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        return 0;",
    "        // Your code here\n        return 0;",
    "        if (tup is Tuple<object, object>) {\n            return CountOccurrence(((Tuple<object, object>)tup).Item1, lst) + CountOccurrence(((Tuple<object, object>)tup).Item2, lst);\n        }\n        if (lst is List<object>) {\n            return ((List<object>)lst).Count(x => x.Equals(tup));\n        }\n        return 0;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        return lst_list.Count(x => tup_list.Contains(x));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Item1.Equals(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)lst) {\n            foreach (object t in (IEnumerable<object>)tup) {\n                if (o.Equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_lst = (List<object>)tup;\n        var lst_lst = (List<object>)lst;\n        return lst_lst.Count(x => tup_lst.Contains(x));",
    "        return 0;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var tup_list = tup as IEnumerable<object>;\n        var lst_list = lst as IEnumerable<object>;\n        return tup_list.Count(x => lst_list.Contains(x));",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        return lst_list.Count(x => tup_list.Contains(x));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1) + l.Count(x => x == t.Item2) + l.Count(x => x == t.Item3) + l.Count(x => x == t.Item4) + l.Count(x => x == t.Item5) + l.Count(x => x == t.Item6) + l.Count(x => x == t.Item7) + l.Count(x => x == t.Rest.Item1);",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        foreach (var i in l) {\n            if (i == t.Item1) c++;\n            if (i == t.Item2) c++;\n            if (i == t.Item3) c++;\n            if (i == t.Item4) c++;\n            if (i == t.Item5) c++;\n            if (i == t.Item6) c++;\n            if (i == t.Item7) c++;\n            if (i == t.Rest.Item1) c++;\n        }\n        return c;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        if (lst == null) return 0;\n        if (tup == null) return 0;\n        if (tup is string) {\n            string s = (string)tup;\n            if (lst is string) {\n                string l = (string)lst;\n                return s.Count(c => c == l[0]);\n            }\n            if (lst is List<object>) {\n                List<object> l = (List<object>)lst;\n                return s.Count(c => l.Contains(c));\n            }\n            return 0;\n        }\n        if (tup is List<object>) {\n            List<object> s = (List<object>)tup;\n            if (lst is string) {\n                string l = (string)lst;\n                return s.Count(c => c == l[0]);\n            }\n            if (lst is List<object>) {\n                List<object> l = (List<object>)lst;\n                return s.Count(c => l.Contains(c));\n            }\n            return 0;\n        }\n        return 0;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup2 = (Tuple<object, object>)tup;\n        var lst2 = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst2) {\n            if (item.Equals(tup2.Item1) || item.Equals(tup2.Item2)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (item == t.Item1 || item == t.Item2) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (tup is IEnumerable<object>) {\n                foreach (object tupitem in (IEnumerable<object>)tup) {\n                    if (item.Equals(tupitem)) {\n                        count++;\n                    }\n                }\n            } else {\n                if (item.Equals(tup)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(i => i == item);\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x);",
    "        var t = tup as Tuple<object, object>;\n        var l = lst as List<object>;\n        if (t == null || l == null) {\n            return 0;\n        }\n        var c = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1)) {\n                c++;\n            }\n            if (e.Equals(t.Item2)) {\n                c++;\n            }\n        }\n        return c;",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(i => i == t.Item1 || i == t.Item2 || i == t.Item3 || i == t.Item4);",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long count = 0;\n        if (l.Contains(t.Item1)) count++;\n        if (l.Contains(t.Item2)) count++;\n        if (l.Contains(t.Item3)) count++;\n        if (l.Contains(t.Item4)) count++;\n        if (l.Contains(t.Item5)) count++;\n        if (l.Contains(t.Item6)) count++;\n        if (l.Contains(t.Item7)) count++;\n        if (l.Contains(t.Rest.Item1)) count++;\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x || t.Item5 == x || t.Item6 == x || t.Item7 == x || t.Rest.Item1 == x);",
    "        var t = tup as Tuple<int, int, int, int, int, int, int, Tuple<int>>;\n        var l = lst as List<int>;\n        long count = 0;\n        if (t.Item1 == l[0]) count++;\n        if (t.Item2 == l[0]) count++;\n        if (t.Item3 == l[0]) count++;\n        if (t.Item4 == l[0]) count++;\n        if (t.Item5 == l[0]) count++;\n        if (t.Item6 == l[0]) count++;\n        if (t.Item7 == l[0]) count++;\n        if (t.Rest.Item1 == l[0]) count++;\n        if (t.Item1 == l[1]) count++;\n        if (t.Item2 == l[1]) count++;\n        if (t.Item3 == l[1]) count++;\n        if (t.Item4 == l[1]) count++;\n        if (t.Item5 == l[1]) count++;\n        if (t.Item6 == l[1]) count++;\n        if (t.Item7 == l[1]) count++;\n        if (t.Rest.Item1 == l[1]) count++;\n        if (t.Item1 == l[2]) count++;\n        if (t.Item2 == l[2]) count++;\n        if (t.Item3 == l[2]) count++;\n        if (t.Item4 == l[2]) count++;\n        if (t.Item5 == l[2]) count++;\n        if (t.Item6 == l[2]) count++;\n        if (t.Item7 == l[2]) count++;\n        if (t.Rest.Item1 == l[2]) count++;\n        if (t.Item1 == l[3]) count++;\n        if (t.Item2 == l[3]) count++;\n        if (t.Item3 == l[3]) count++;\n        if (t.Item4 == l[3]) count++;\n        if (t.Item5 == l[3]) count++;\n        if (t.Item6 == l[3]) count++;\n        if (t",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        // Your code here\n        return 0;",
    "        // Your code goes here\n        return 0;",
    "        var t = tup as Tuple<int, int, int>;\n        var l = lst as List<int>;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long count = 0;\n        count += l.Count(x => x == t.Item1);\n        count += l.Count(x => x == t.Item2);\n        count += l.Count(x => x == t.Item3);\n        count += l.Count(x => x == t.Item4);\n        count += l.Count(x => x == t.Item5);\n        count += l.Count(x => x == t.Item6);\n        count += l.Count(x => x == t.Item7);\n        count += l.Count(x => x == t.Rest.Item1);\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        foreach (var i in l) {\n            if (t.Item1 == i) c++;\n            if (t.Item2 == i) c++;\n            if (t.Item3 == i) c++;\n            if (t.Item4 == i) c++;\n            if (t.Item5 == i) c++;\n        }\n        return c;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var c = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                c += 1;\n            }\n        }\n        return c;",
    "        long count = 0;\n        foreach (object x in (IEnumerable<object>)tup) {\n            foreach (object y in (IEnumerable<object>)lst) {\n                if (x.Equals(y)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        // Your code here\n        return 0;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            return 0;\n        }\n        return l.Count(x => t.Contains(x));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (i.Equals(t.Item1) || i.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (item == tup) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((Tuple<object, object>)tup).Item1.Equals(item) ? 1 : 0;\n            count += ((Tuple<object, object>)tup).Item2.Equals(item) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (List<object>)lst) {\n            if (((Tuple<object, object>)tup).Item1.Equals(o)) {\n                count += (long)((Tuple<object, object>)tup).Item2;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        throw new NotImplementedException();",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            foreach (var tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_lst = (tup as IEnumerable<object>).ToList();\n        var lst_lst = (lst as IEnumerable<object>).ToList();\n        return lst_lst.Count(x => tup_lst.Contains(x));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item == item2) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Item1 == item || t.Item2 == item || t.Item3 == item) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var tuple = (Tuple<object, object>)tup;\n        var list = (List<object>)lst;\n        return list.Count(x => x.Equals(tuple.Item1) || x.Equals(tuple.Item2));",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item == tupItem) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long count = 0;\n        if (l.Contains(t.Item1)) count++;\n        if (l.Contains(t.Item2)) count++;\n        if (l.Contains(t.Item3)) count++;\n        if (l.Contains(t.Item4)) count++;\n        if (l.Contains(t.Item5)) count++;\n        if (l.Contains(t.Item6)) count++;\n        if (l.Contains(t.Item7)) count++;\n        if (l.Contains(t.Rest.Item1)) count++;\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long count = 0;\n        foreach (var i in l) {\n            if (i == t.Item1 || i == t.Item2 || i == t.Item3 || i == t.Item4 || i == t.Item5 || i == t.Item6 || i == t.Item7 || i == t.Rest.Item1) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((Tuple<object, object>)tup).Item1.Equals(item)) {\n                count += (long)((Tuple<object, object>)tup).Item2;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        // Your code here\n        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var cnt = 0;\n        foreach (var el in lst_list) {\n            if (tup_list.Contains(el)) {\n                cnt++;\n            }\n        }\n        return cnt;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long count = 0;\n        if (l.Contains(t.Item1)) count++;\n        if (l.Contains(t.Item2)) count++;\n        if (l.Contains(t.Item3)) count++;\n        if (l.Contains(t.Item4)) count++;\n        if (l.Contains(t.Item5)) count++;\n        if (l.Contains(t.Item6)) count++;\n        if (l.Contains(t.Item7)) count++;\n        if (l.Contains(t.Rest.Item1)) count++;\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((Tuple<object, object>)tup).Item1.Equals(item)) {\n                count += (long)((Tuple<object, object>)tup).Item2;\n            }\n        }\n        return count;",
    "        return 0;",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3 || x == t.Item4);",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = tup as Tuple<int, int, int, int>;\n        var l = lst as List<int>;\n        long count = 0;\n        foreach (var i in l) {\n            if (t.Item1 == i) {\n                count++;\n            }\n            if (t.Item2 == i) {\n                count++;\n            }\n            if (t.Item3 == i) {\n                count++;\n            }\n            if (t.Item4 == i) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (tup.Equals(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            foreach (var tupItem in (List<object>)tup) {\n                if (item == tupItem) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x || t.Item5 == x || t.Item6 == x || t.Item7 == x || t.Rest.Item1 == x);",
    "        // Your code here\n        return 0;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1) + l.Count(x => x == t.Item2) + l.Count(x => x == t.Item3) + l.Count(x => x == t.Item4) + l.Count(x => x == t.Item5) + l.Count(x => x == t.Item6) + l.Count(x => x == t.Item7) + l.Count(x => x == t.Rest.Item1);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tuple = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var list = (List<int>)lst;\n        long count = 0;\n        foreach (var item in list) {\n            if (tuple.Item1 == item) count++;\n            if (tuple.Item2 == item) count++;\n            if (tuple.Item3 == item) count++;\n            if (tuple.Item4 == item) count++;\n            if (tuple.Item5 == item) count++;\n            if (tuple.Item6 == item) count++;\n            if (tuple.Item7 == item) count++;\n            if (tuple.Rest.Item1 == item) count++;\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        // Your code here\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x || t.Item5 == x || t.Item6 == x || t.Item7 == x || t.Rest.Item1 == x);",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        long count = 0;\n        foreach (var item in l) {\n            if (item.Equals(t.Item1) || item.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_len = len(tup);\n        var lst_len = len(lst);\n        var count = 0;\n        for (var i = 0; i < tup_len; i++) {\n            for (var j = 0; j < lst_len; j++) {\n                if (tup[i] == lst[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (IEnumerable<object>)tup;\n        var lst_list = (IEnumerable<object>)lst;\n        var tup_count = tup_list.Count();\n        var lst_count = lst_list.Count();\n        var count = 0;\n        for (int i = 0; i < tup_count; i++) {\n            for (int j = 0; j < lst_count; j++) {\n                if (tup_list.ElementAt(i) == lst_list.ElementAt(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as Tuple<object>;\n        var l = lst as List<object>;\n        long count = 0;\n        foreach (var item in l) {\n            foreach (var item2 in t) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object, object, object>)tup;\n        return list.Count(x => x.Equals(tuple.Item1) || x.Equals(tuple.Item2) || x.Equals(tuple.Item3));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var cnt = 0;\n        foreach (var x in l) {\n            if (x == t.Item1 || x == t.Item2 || x == t.Item3 || x == t.Item4 || x == t.Item5 || x == t.Item6 || x == t.Item7 || x == t.Rest.Item1) {\n                cnt++;\n            }\n        }\n        return cnt;",
    "        // Your code here\n        return 0;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object, object, object>)tup;\n        long count = 0;\n        foreach (var item in list) {\n            if (item.Equals(tuple.Item1) || item.Equals(tuple.Item2) || item.Equals(tuple.Item3)) {\n                count++;\n            }\n        }\n        return count;",
    "        return 0;",
    "        // Your code goes here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        if (lst == null) {\n            return 0;\n        }\n        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (i.Equals(t.Item1)) {\n                count++;\n            }\n        }\n        return count + CountOccurrence(t.Rest, l);",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException(\"Invalid arguments\");\n        }\n        return l.Count(x => t.Contains(x));",
    "        var t = tup as Tuple<object, object>;\n        var l = lst as List<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException(\"Invalid arguments\");\n        }\n        return l.Count(x => x.Equals(t.Item1)) + CountOccurrence(t.Item2, l);",
    "        var tup_lst = tup as IEnumerable<object>;\n        var lst_lst = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in tup_lst) {\n            count += lst_lst.Count(x => x.Equals(item));\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x);",
    "        var tup_lst = (tup as IEnumerable<object>).ToList();\n        var lst_lst = (lst as IEnumerable<object>).ToList();\n        return lst_lst.Count(x => tup_lst.Contains(x));",
    "        // Your code here\n        return 0;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1) + l.Count(x => x == t.Item2) + l.Count(x => x == t.Item3) + l.Count(x => x == t.Item4) + l.Count(x => x == t.Item5) + l.Count(x => x == t.Item6) + l.Count(x => x == t.Item7) + l.Count(x => x == t.Rest.Item1);",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object obj in (IEnumerable<object>)tup) {\n            foreach (object obj2 in (IEnumerable<object>)lst) {\n                if (obj.Equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            var tup_item = (IEnumerable<object>)tup;\n            foreach (var tup_item_item in tup_item) {\n                if (tup_item_item.Equals(item)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        return lst_list.Count(x => tup_list.Contains(x));",
    "        long count = 0;\n        foreach(object i in (IEnumerable<object>)tup) {\n            foreach(object j in (IEnumerable<object>)lst) {\n                if(i.Equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup is Tuple<int, int, int, int, int, int, int, Tuple<int>>) {\n            var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n            if (lst is List<int>) {\n                var l = (List<int>)lst;\n                foreach (var i in l) {\n                    if (i == t.Item1 || i == t.Item2 || i == t.Item3 || i == t.Item4 || i == t.Item5 || i == t.Item6 || i == t.Item7 || i == t.Rest.Item1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        long cnt = 0;\n        if (l.Contains(t.Item1)) cnt++;\n        if (l.Contains(t.Item2)) cnt++;\n        if (l.Contains(t.Item3)) cnt++;\n        if (l.Contains(t.Item4)) cnt++;\n        if (l.Contains(t.Item5)) cnt++;\n        if (l.Contains(t.Item6)) cnt++;\n        if (l.Contains(t.Item7)) cnt++;\n        if (l.Contains(t.Rest.Item1)) cnt++;\n        return cnt;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return 0;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Item1 == item) count++;\n            if (t.Item2 == item) count++;\n            if (t.Item3 == item) count++;\n            if (t.Item4 == item) count++;\n            if (t.Item5 == item) count++;\n            if (t.Item6 == item) count++;\n            if (t.Item7 == item) count++;\n            if (t.Rest.Item1 == item) count++;\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x);",
    "        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((Tuple<object, object>)tup).Item1.Equals(item)) {\n                count += (long)((Tuple<object, object>)tup).Item2;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Item1 == item || t.Item2 == item || t.Item3 == item) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        foreach (var i in l) {\n            if (i == t.Item1 || i == t.Item2 || i == t.Item3 || i == t.Item4 || i == t.Item5 || i == t.Item6 || i == t.Item7 || i == t.Rest.Item1) {\n                c++;\n            }\n        }\n        return c;",
    "        long count = 0;\n        foreach (object item in (List<object>)lst) {\n            if (((Tuple<object, object>)tup).Item1.Equals(item)) {\n                count += (long)((Tuple<object, object>)tup).Item2;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            foreach (var tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (item.Equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = tup as IEnumerable<object>;\n        var lst_list = lst as IEnumerable<object>;\n        if (tup_list == null || lst_list == null) {\n            throw new ArgumentException(\"Arguments must be enumerable\");\n        }\n        var tup_set = new HashSet<object>(tup_list);\n        var lst_set = new HashSet<object>(lst_list);\n        return tup_set.Intersect(lst_set).Count();",
    "        // Your code goes here\n        return 0;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object, object, object>)tup;\n        long count = 0;\n        foreach (var item in list) {\n            if (item.Equals(tuple.Item1) || item.Equals(tuple.Item2) || item.Equals(tuple.Item3)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var tup_ = (Tuple<object>)tup;\n        var lst_ = (List<object>)lst;\n        long count = 0;\n        foreach (var item in tup_) {\n            count += lst_.Count(x => x == item);\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var tup_list = (IEnumerable<object>)tup;\n        var lst_list = (IEnumerable<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_arr = (object[])tup;\n        var lst_arr = (object[])lst;\n        long count = 0;\n        foreach (var item in lst_arr) {\n            foreach (var tup_item in tup_arr) {\n                if (item == tup_item) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException(\"Arguments must be enumerable\");\n        }\n        return l.Count(x => t.Contains(x));"
  ]
}