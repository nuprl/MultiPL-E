{
  "name": "mbpp_446_count_Occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, object lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new object(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new object(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new object(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code goes here\n        return 0;",
    "        long count = 0;\n        foreach (object elem in (List<object>)lst) {\n            if (((List<object>)tup).Contains(elem)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        return 0;",
    "        // Your code here\n        return 0;",
    "        if (tup is Tuple<object, object>) {\n            return CountOccurrence(((Tuple<object, object>)tup).Item1, lst) + CountOccurrence(((Tuple<object, object>)tup).Item2, lst);\n        }\n        if (lst is List<object>) {\n            return ((List<object>)lst).Count(x => x.Equals(tup));\n        }\n        return 0;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        return lst_list.Count(x => tup_list.Contains(x));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Item1.Equals(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)lst) {\n            foreach (object t in (IEnumerable<object>)tup) {\n                if (o.Equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_lst = (List<object>)tup;\n        var lst_lst = (List<object>)lst;\n        return lst_lst.Count(x => tup_lst.Contains(x));",
    "        return 0;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var tup_list = tup as IEnumerable<object>;\n        var lst_list = lst as IEnumerable<object>;\n        return tup_list.Count(x => lst_list.Contains(x));",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;"
  ]
}