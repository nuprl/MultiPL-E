{
  "name": "mbpp_160_find_solution",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z4t6978.cs(13,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7z4t6978.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7z4t6978.cs(38,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_n104elz.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_n104elz.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_n104elz.cs(16,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp_n104elz.cs(19,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long u1 = 1;\n            long v1 = 0;\n            long u2 = 0;\n            long v2 = 1;\n            while (a != 0) {\n                long q = b / a;\n                long r = b % a;\n                long m = u2 - q * u1;\n                long n = v2 - q * v1;\n                b = a;\n                a = r;\n                u2 = u1;\n                v2 = v1;\n                u1 = m;\n                v1 = n;\n            }\n            x = u2;\n            y = v2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4j6q7uru.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp4j6q7uru.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp4j6q7uru.cs(26,22): error CS0136: A local or parameter named 'n' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long x1, y1;\n        long d1 = ExtendedEuclid(a1, b1, out x1, out y1);\n        x = x1 * n1;\n        y = y1 * n1;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpugn_j_ni.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpugn_j_ni.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpugn_j_ni.cs(16,19): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / gcd;\n        y *= n / gcd;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkoz66zhh.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpkoz66zhh.cs(39,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long s = 0;\n            long old_s = 1;\n            long t = 1;\n            long old_t = 0;\n            long r = b;\n            long old_r = a;\n            while (r != 0) {\n                long quotient = old_r / r;\n                long temp = r;\n                r = old_r - quotient * r;\n                old_r = temp;\n                temp = s;\n                s = old_s - quotient * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - quotient * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        }\n        else {\n            x = (n / d) * b / a;\n            y = (n / d) - x * a / b;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfz7htpt5.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpfz7htpt5.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <da78a0e4d3ea4a45b8f5d42924f87751>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <da78a0e4d3ea4a45b8f5d42924f87751>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return (x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmgjl6dky.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpmgjl6dky.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpmgjl6dky.cs(20,20): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n/tmp/tmpmgjl6dky.cs(24,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long a1 = a / d;\n        long b1 = b / d;\n        long q = a1 / b1;\n        long r = a1 % b1;\n        while (r > 0) {\n            long temp = x1;\n            x1 = x - q * x1;\n            x = temp;\n            temp = y1;\n            y1 = y - q * y1;\n            y = temp;\n            a1 = b1;\n            b1 = r;\n            q = a1 / b1;\n            r = a1 % b1;\n        }\n        x = x * (n / d);\n        y = y * (n / d);\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5onn3cce.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5onn3cce.cs(37,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        while (a % d != 0) {\n            long q = a / d;\n            long r = a % d;\n            long m = x1 - q * x2;\n            long n = y1 - q * y2;\n            x1 = x2;\n            x2 = m;\n            y1 = y2;\n            y2 = n;\n            a = d;\n            d = r;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3he0aktq.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp3he0aktq.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp3he0aktq.cs(21,18): error CS0136: A local or parameter named 'n' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp3he0aktq.cs(31,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long x1 = 0, y1 = 1;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x2 = x1 - q * x;\n            long y2 = y1 - q * y;\n            x1 = x;\n            y1 = y;\n            x = x2;\n            y = y2;\n            b1 = a1;\n            a1 = r;\n        }\n        return x * n1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7auz2spo.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7auz2spo.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpourx5enb.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpourx5enb.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpourx5enb.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpourx5enb.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpourx5enb.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (b == 1) {\n            x *= n;\n            y *= n;\n            return x + y;\n        }\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5catfqkl.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5catfqkl.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp5catfqkl.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5asceaub.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5asceaub.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5asceaub.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp5asceaub.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp5asceaub.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpewdktu4a.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            if (n == 0) {\n                return 0;\n            } else {\n                return null;\n            }\n        }\n        if (a == 0) {\n            if (n % b == 0) {\n                return (n / b, 0);\n            } else {\n                return null;\n            }\n        }\n        if (b == 0) {\n            if (n % a == 0) {\n                return (0, n / a);\n            } else {\n                return null;\n            }\n        }\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x, y;\n        long d = ExtendedGCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5wsbssah.cs(20,24): error CS0029: Cannot implicitly convert type '(long, int)' to 'long?'\n/tmp/tmp5wsbssah.cs(27,24): error CS0029: Cannot implicitly convert type '(int, long)' to 'long?'\n/tmp/tmp5wsbssah.cs(32,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5wsbssah.cs(37,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n/tmp/tmp5wsbssah.cs(40,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long[] result = ExtendedEuclidean(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzn6quazc.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzn6quazc.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzn6quazc.cs(15,25): error CS0103: The name 'ExtendedEuclidean' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69b8fb2fc32e46c1b4db347da78ca61b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69b8fb2fc32e46c1b4db347da78ca61b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are both even, then there is no solution.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a is even, then x must be even and y must be odd.\n        if (a % 2 == 0) {\n            return FindSolution(a / 2, b, n / 2);\n        }\n        // If b is even, then x must be odd and y must be even.\n        if (b % 2 == 0) {\n            return FindSolution(a, b / 2, n / 2);\n        }\n        // If a and b are both odd, then x must be odd and y must be even.\n        return FindSolution(a, b / 2, n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long m = a;\n            long s = 1;\n            long t = 0;\n            long r = b;\n            long old_m = 1;\n            long old_s = 0;\n            long old_t = 1;\n            long old_r = a;\n            while (r != 0) {\n                long q = m / r;\n                long temp = r;\n                r = m % r;\n                m = temp;\n                temp = s;\n                s = old_s - q * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - q * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzs8k85l.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpmzs8k85l.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpmzs8k85l.cs(22,18): warning CS0219: The variable 'old_m' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Find the greatest common divisor of a and b\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the greatest common divisor, there is no solution\n        if (n % gcd != 0) {\n            return null;\n        }\n        // If a and b are both even, then x and y must both be even, so there is no solution\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a is even and b is odd, then x must be odd and y must be even, so there is no solution\n        if (a % 2 == 0 && b % 2 != 0) {\n            return null;\n        }\n        // If a is odd and b is even, then x must be even and y must be odd, so there is no solution\n        if (a % 2 != 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then x and y must both be odd, so there is a solution\n        if (a % 2 != 0 && b % 2 != 0) {\n            // Find the solution for a'x + b'y = n'\n            long aPrime = a / gcd;\n            long bPrime = b / gcd;\n            long nPrime = n / gcd;\n            // Find the solution for a'x + b'y = n'\n            long xPrime = FindSolution(aPrime, bPrime, nPrime).Value;\n            // Find the solution for ax + by = n\n            long x = xPrime * gcd;\n            long y = (n - a * x) / b;\n            return x;\n        }\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0k0nqpne.cs(12,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbkyw2ext.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbjz1q290.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpbjz1q290.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpbjz1q290.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpbjz1q290.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        }\n        else {\n            x = ModInverse(a / d, b / d);\n            y = (n - a * x) / b;\n            x *= d;\n            y *= d;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkfk_gqy.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmppkfk_gqy.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmppkfk_gqy.cs(17,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmppkfk_gqy.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedGCD(a, b, out x, out y);\n        if (d != 1) {\n            x *= n / d;\n            y *= n / d;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzc1l5a78.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzc1l5a78.cs(13,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return (a * x + b * y) == n ? x : null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxohwpfph.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpxohwpfph.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpxohwpfph.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpxohwpfph.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpxohwpfph.cs(24,16): error CS0173: Type of conditional expression cannot be determined because there is no implicit conversion between 'long' and '<null>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzqkspgkm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzqkspgkm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzqkspgkm.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpzqkspgkm.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % Gcd(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = Gcd(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe4f0lzed.cs(11,17): error CS0103: The name 'Gcd' does not exist in the current context\n/tmp/tmpe4f0lzed.cs(15,18): error CS0103: The name 'Gcd' does not exist in the current context\n/tmp/tmpe4f0lzed.cs(17,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpe4f0lzed.cs(20,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        ExtendedEuclid(a1, b1, ref x, ref y);\n        x *= n1;\n        y *= n1;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg76ob052.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpg76ob052.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpg76ob052.cs(15,9): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz4e_oxl4.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpz4e_oxl4.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpz4e_oxl4.cs(28,18): error CS0136: A local or parameter named 'n' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpz4e_oxl4.cs(33,17): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppzutfzds.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmppzutfzds.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpycmvyde3.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpycmvyde3.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpycmvyde3.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpagz36l2j.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long u1 = 1;\n            long v1 = 0;\n            long u2 = 0;\n            long v2 = 1;\n            while (a != 0) {\n                long q = b / a;\n                long r = b % a;\n                long m = u2 - q * u1;\n                long n = v2 - q * v1;\n                b = a;\n                a = r;\n                u2 = u1;\n                v2 = v1;\n                u1 = m;\n                v1 = n;\n            }\n            x = u2;\n            y = v2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm5am4pi9.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpm5am4pi9.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpm5am4pi9.cs(26,22): error CS0136: A local or parameter named 'n' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpm5am4pi9.cs(40,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are both even, then n must be even.\n        if (a % 2 == 0 && b % 2 == 0 && n % 2 != 0) {\n            return null;\n        }\n        // If a is even, then x must be even.\n        if (a % 2 == 0) {\n            long x = n / a;\n            long y = (n - a * x) / b;\n            if (a * x + b * y == n) {\n                return x;\n            }\n            return null;\n        }\n        // If b is even, then y must be even.\n        if (b % 2 == 0) {\n            long y = n / b;\n            long x = (n - b * y) / a;\n            if (a * x + b * y == n) {\n                return x;\n            }\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd.\n        if (a % 2 != 0 && b % 2 != 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be odd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplan83sw0.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        }\n        else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpygd5wp80.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpygd5wp80.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpygd5wp80.cs(16,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpygd5wp80.cs(20,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long a1 = a;\n        long b1 = b;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b1 = a1;\n            a1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / b1) * x2;\n        y = (n / b1) * y2;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaz8filj5.cs(14,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpaz8filj5.cs(27,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpaz8filj5.cs(28,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new long[] { x, y };\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7l9959mk.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7l9959mk.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7l9959mk.cs(20,20): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n/tmp/tmp7l9959mk.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = b / d;\n            y = a / d;\n        }\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeg19ht4t.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpeg19ht4t.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpeg19ht4t.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpeg19ht4t.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        long x1 = 0;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        if (a < 0) {\n            a = -a;\n            x1 = 1;\n            y2 = 1;\n        }\n        if (b < 0) {\n            b = -b;\n            x2 = 1;\n            y1 = 1;\n        }\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return x2 * (n / a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6854c30c7fb345159d6805529be05f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6854c30c7fb345159d6805529be05f0b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b) * n;\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn1h55yqw.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long x2 = 0;\n            long y1 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdykzl06m.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpdykzl06m.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpdykzl06m.cs(24,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpdykzl06m.cs(25,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphryl21rn.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        x = n / d * ModInverse(a / d, b / d);\n        y = (n - a * x) / b;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7vbb1xzz.cs(14,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7vbb1xzz.cs(19,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7vbb1xzz.cs(20,21): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        long q = 0, r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk6mms112.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpk6mms112.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpk6mms112.cs(35,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_8f22g7a.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvzk8mmnv.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpvzk8mmnv.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpvzk8mmnv.cs(21,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmpvzk8mmnv.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Tuple<long, long>(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp652mzg35.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp652mzg35.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp652mzg35.cs(20,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmp652mzg35.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // ax + by = n\n        // ax - n = -by\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplawl6uzr.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n == 0) {\n            return 0;\n        }\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        x = n / d * b / a;\n        y = (n - a * x) / b;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6raa5smd.cs(15,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp6raa5smd.cs(19,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        }\n        else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8u3gh3gb.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp8u3gh3gb.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp8u3gh3gb.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp8u3gh3gb.cs(22,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b) * n;\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn1h55yqw.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpn1h55yqw.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa3e42522.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // The solution is x = n/a - b/a * y\n        // We need to find a y such that n/a - b/a * y is an integer\n        // n/a - b/a * y = k\n        // n - b * y = k * a\n        // n - k * a = b * y\n        // y = (n - k * a) / b\n        // We need to find a k such that (n - k * a) % b == 0\n        // We can do this by trying all k from 0 to n/a\n        for (long k = 0; k <= n / a; k++) {\n            if ((n - k * a) % b == 0) {\n                return (n - k * a) / b;\n            }\n        }\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <465104f16cef481fb8ff503c24afdfbb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <465104f16cef481fb8ff503c24afdfbb>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedGCD(a, b, out x, out y);\n        if (d == 0) return null;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptygxouyz.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmptygxouyz.cs(13,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp56f7liyb.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp56f7liyb.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp56f7liyb.cs(16,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            if (n % b == 0) {\n                return 0;\n            }\n            return null;\n        }\n        if (b == 0) {\n            if (n % a == 0) {\n                return n / a;\n            }\n            return null;\n        }\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long[] xy = ExtendedGCD(a, b);\n        long x = xy[0];\n        long y = xy[1];\n        long k = n / gcd;\n        x *= k;\n        y *= k;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_cakvjmc.cs(26,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_cakvjmc.cs(30,21): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long r = ExtendedEuclid(a1, b1, ref x, ref y);\n        if (n1 % r != 0) return null;\n        x *= n1 / r;\n        y *= n1 / r;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo1pefilr.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpo1pefilr.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpo1pefilr.cs(15,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_8f22g7a.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        else {\n            x = n / d * b;\n            y = n / d * a;\n        }\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpygufotrz.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpygufotrz.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpygufotrz.cs(24,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long r = ExtendedEuclidean(a1, b1, ref x, ref y);\n        if (n1 % r != 0) return null;\n        x *= n1 / r;\n        y *= n1 / r;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsv2fshvt.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsv2fshvt.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsv2fshvt.cs(15,18): error CS0103: The name 'ExtendedEuclidean' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpytukhl_g.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpytukhl_g.cs(37,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long m = a;\n            long s = 1;\n            long t = 0;\n            long r = b;\n            long old_m = 1;\n            long old_s = 0;\n            long old_t = 1;\n            long old_r = a;\n            while (r != 0) {\n                long q = m / r;\n                long temp = r;\n                r = m % r;\n                m = temp;\n                temp = s;\n                s = old_s - q * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - q * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp840py4ap.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp840py4ap.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp840py4ap.cs(22,18): warning CS0219: The variable 'old_m' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphryl21rn.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            if (n == 0) {\n                return 0;\n            } else {\n                return null;\n            }\n        }\n        if (a == 0) {\n            if (n % b == 0) {\n                return (n / b, 0);\n            } else {\n                return null;\n            }\n        }\n        if (b == 0) {\n            if (n % a == 0) {\n                return (0, n / a);\n            } else {\n                return null;\n            }\n        }\n        var (x, y) = FindSolution(b, a % b, n);\n        if (x == null) {\n            return null;\n        }\n        return (y, x - (a / b) * y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpui4szjfg.cs(20,24): error CS0029: Cannot implicitly convert type '(long, int)' to 'long?'\n/tmp/tmpui4szjfg.cs(27,24): error CS0029: Cannot implicitly convert type '(int, long)' to 'long?'\n/tmp/tmpui4szjfg.cs(32,22): error CS1061: 'long?' does not contain a definition for 'Deconstruct' and no accessible extension method 'Deconstruct' accepting a first argument of type 'long?' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpui4szjfg.cs(32,22): error CS8129: No suitable 'Deconstruct' instance or extension method was found for type 'long?', with 2 out parameters and a void return type.\n/tmp/tmpui4szjfg.cs(32,14): error CS8130: Cannot infer the type of implicitly-typed deconstruction variable 'x'.\n/tmp/tmpui4szjfg.cs(32,17): error CS8130: Cannot infer the type of implicitly-typed deconstruction variable 'y'.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkjv8m_jd.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpkjv8m_jd.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpkjv8m_jd.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpkjv8m_jd.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long x, y;\n        long gcd = GCD(a, b, out x, out y);\n        if (n % gcd != 0) {\n            return null;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9pce143z.cs(21,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoojejwd1.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpoojejwd1.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpoojejwd1.cs(17,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpoojejwd1.cs(20,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x1 - q * x2;\n                long y = y1 - q * y2;\n                a = b;\n                b = r;\n                x1 = x2;\n                x2 = x;\n                y1 = y2;\n                y2 = y;\n            }\n            x = x1;\n            y = y1;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd5uat4ku.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpd5uat4ku.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpd5uat4ku.cs(20,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpd5uat4ku.cs(21,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5asceaub.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5asceaub.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5asceaub.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp5asceaub.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp5asceaub.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n        }\n        else {\n            x = n / d;\n            y = (b / d) - (a / d) * x;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmproyftu3m.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmproyftu3m.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n        }\n        else {\n            x = n / d;\n            y = (b / d) - (a / d) * x;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpor9v7mid.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpor9v7mid.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n            while (b > 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x1 - q * x2;\n                long y = y1 - q * y2;\n                a = b;\n                b = r;\n                x1 = x2;\n                x2 = x;\n                y1 = y2;\n                y2 = y;\n            }\n            x = x1;\n            y = y1;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyx7tzcro.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpyx7tzcro.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpyx7tzcro.cs(19,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpyx7tzcro.cs(20,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpyx7tzcro.cs(35,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Tuple<long, long>(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5n62ugqt.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5n62ugqt.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5n62ugqt.cs(21,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmp5n62ugqt.cs(25,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n / a) - (by / a)\n        // x = (n / a) - (b / a) * y\n        // y = (n - ax) / b\n        // y = (n - (a / b) * x) / b\n        // y = (n / b) - (a / b) * x\n        // y = (n / b) - (a / b) * ((n / a) - (b / a) * y)\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) - (a / b) * (n / a) + (a / b) * (b / a) * y\n        // y = (n / b) -\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2_68wii.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long s = 0;\n            long old_s = 1;\n            long t = 1;\n            long old_t = 0;\n            long r = b;\n            long old_r = a;\n            while (r != 0) {\n                long q = old_r / r;\n                long temp = r;\n                r = old_r - q * r;\n                old_r = temp;\n                temp = s;\n                s = old_s - q * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - q * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu6fqvmrm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpu6fqvmrm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Euclid's algorithm for finding the GCD of two numbers\n        long x = 0, y = 1, lastx = 1, lasty = 0, temp;\n        while (b != 0) {\n            long q = a / b;\n            long r = a % b;\n            a = b;\n            b = r;\n            temp = x;\n            x = lastx - q * x;\n            lastx = temp;\n            temp = y;\n            y = lasty - q * y;\n            lasty = temp;\n        }\n        if (n % a != 0) return null;\n        return lastx * (n / a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <374714dc19b14e138e9136fa6032ee6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <374714dc19b14e138e9136fa6032ee6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = b / d;\n            y = a / d;\n        }\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeg19ht4t.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpeg19ht4t.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpeg19ht4t.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpeg19ht4t.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Tuple<long, long>(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp652mzg35.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp652mzg35.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp652mzg35.cs(20,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmp652mzg35.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbjz1q290.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpbjz1q290.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpbjz1q290.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpbjz1q290.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvyik3cpr.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpvyik3cpr.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpvyik3cpr.cs(23,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpvyik3cpr.cs(24,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Euclidean algorithm\n        long x = 0;\n        long y = 1;\n        long lastX = 1;\n        long lastY = 0;\n        long temp;\n        while (b != 0) {\n            long q = a / b;\n            long r = a % b;\n            a = b;\n            b = r;\n            temp = x;\n            x = lastX - q * x;\n            lastX = temp;\n            temp = y;\n            y = lastY - q * y;\n            lastY = temp;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return lastX * (n / a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5149c2e30dd40859d278a938cf4e1c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5149c2e30dd40859d278a938cf4e1c2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (b1 != 0) {\n            q = a1 / b1;\n            r = a1 % b1;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a1 = b1;\n            b1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n1 * x2) / d;\n        y = (n1 * y2) / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn8lb2d5t.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpn8lb2d5t.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rm0yktp.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp4rm0yktp.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp4rm0yktp.cs(21,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmp4rm0yktp.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_obfkcp.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long rx = x2 - q * x1;\n            long ry = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = rx;\n            y2 = y1;\n            y1 = ry;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2s4fg7bj.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0)\n            return null;\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpti01yqol.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedGCD(a, b, out x, out y);\n        if (d == 0) return null;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptygxouyz.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmptygxouyz.cs(13,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        while (b != 0) {\n            q = a / b;\n            long r = a % b;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6eb0lci2.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp6eb0lci2.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp6eb0lci2.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long u1 = 0;\n            long v1 = 1;\n            long u2 = 1;\n            long v2 = 0;\n            long q = 0;\n            long r = 0;\n            while (a != 0) {\n                q = b / a;\n                r = b % a;\n                u = u2 - q * u1;\n                v = v2 - q * v1;\n                b = a;\n                a = r;\n                u2 = u1;\n                v2 = v1;\n                u1 = u;\n                v1 = v;\n            }\n            x = u2;\n            y = v2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb0ooxgjj.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(27,17): error CS0103: The name 'u' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(28,17): error CS0103: The name 'v' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(33,22): error CS0103: The name 'u' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(34,22): error CS0103: The name 'v' does not exist in the current context\n/tmp/tmpb0ooxgjj.cs(42,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Check if a solution exists\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        // Find a solution\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        // Find the smallest positive solution\n        long x0 = x % (b / d);\n        if (x0 < 0) {\n            x0 += b / d;\n        }\n        long y0 = (n - a * x0) / b;\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg1l4leza.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpg1l4leza.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnan4na11.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpnan4na11.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpnan4na11.cs(17,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpnan4na11.cs(20,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 0) return null;\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        while (a % d != 0 || b % d != 0) {\n            long q = a / d;\n            long r = a % d;\n            long x3 = x1 - q * x2;\n            long y3 = y1 - q * y2;\n            x1 = x2;\n            y1 = y2;\n            x2 = x3;\n            y2 = y3;\n            a = b;\n            b = r;\n        }\n        x = x2;\n        y = y2;\n        return x * n / d + y * n / d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprql31s0n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmprql31s0n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b, ref x, ref y);\n        if (n % gcd != 0) {\n            return null;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsjayiaml.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwp6pggk.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzwp6pggk.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpzwp6pggk.cs(18,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmpzwp6pggk.cs(21,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            if (n % b == 0) {\n                return new Tuple<long, long>(0, n / b);\n            }\n            else {\n                return null;\n            }\n        }\n        if (b == 0) {\n            if (n % a == 0) {\n                return new Tuple<long, long>(n / a, 0);\n            }\n            else {\n                return null;\n            }\n        }\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        if (a > b) {\n            d = a / b;\n            r = a % b;\n            s = 1;\n            t = -d;\n            u = 0;\n            v = 1;\n        }\n        else {\n            d = b / a;\n            r = b % a;\n            s = 0;\n            t = 1;\n            u = -d;\n            v = 1;\n        }\n        while (r != 0) {\n            q = d;\n            d = r;\n            r = q % r;\n            x = s;\n            s = u;\n            u = x - q * u;\n            y = t;\n            t = v;\n            v = y - q * v;\n        }\n        if (a > b) {\n            return new Tuple<long, long>(s, t);\n        }\n        else {\n            return new Tuple<long, long>(t, s);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiem7zd8e.cs(16,24): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmpiem7zd8e.cs(24,24): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmpiem7zd8e.cs(30,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpiem7zd8e.cs(71,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmpiem7zd8e.cs(74,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long x1 = 0, y1 = 1;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x2 = x1 - q * x;\n            long y2 = y1 - q * y;\n            x1 = x;\n            y1 = y;\n            x = x2;\n            y = y2;\n            b1 = a1;\n            a1 = r;\n        }\n        return x * n1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7auz2spo.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp7auz2spo.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphryl21rn.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppzutfzds.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmppzutfzds.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // a and b are coprime\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n\n        // a and b are not coprime\n        long x, y;\n        long d = ExtendedGCD(a, b, out x, out y);\n        if (n % d != 0) {\n            return null;\n        }\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwn9jok2d.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpwn9jok2d.cs(18,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0, y = 0;\n        long d = gcd(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0juoedv7.cs(12,18): error CS0103: The name 'gcd' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        ExtendedEuclid(a, b, ref d, ref x, ref y);\n        if (d == 1) {\n            x *= n / gcd;\n            y *= n / gcd;\n            return x;\n        }\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ujb8xpj.cs(11,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp9ujb8xpj.cs(18,9): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                x = x2 - q * x1;\n                y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_tkhdix.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpd_tkhdix.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) return null;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjaovbyz3.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnv_hy2ml.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpnv_hy2ml.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpnv_hy2ml.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpnv_hy2ml.cs(36,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long x, y;\n        long gcd = GCD(a, b, out x, out y);\n        if (n % gcd != 0) {\n            return null;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9pce143z.cs(21,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        // Find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the greatest common divisor, then no solution exists.\n        if (n % gcd != 0) return null;\n        // Find the solution to ax + by = gcd.\n        long x, y;\n        GCD(a, b, out x, out y);\n        // Multiply the solution by n/gcd.\n        x *= n / gcd;\n        y *= n / gcd;\n        // Return the solution.\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3n1bvfq6.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp3n1bvfq6.cs(18,9): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp3n1bvfq6.cs(23,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are both even, then there is no solution.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n\n        // If a is even, then we can divide by 2 and get a solution.\n        if (a % 2 == 0) {\n            long x = n / (2 * a);\n            long y = (n - a * x) / b;\n            return Tuple.Create(x, y);\n        }\n\n        // If b is even, then we can divide by 2 and get a solution.\n        if (b % 2 == 0) {\n            long y = n / (2 * b);\n            long x = (n - b * y) / a;\n            return Tuple.Create(x, y);\n        }\n\n        // If a and b are both odd, then we can use the extended Euclidean algorithm to get a solution.\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x0, y0;\n        ExtendedEuclidean(a, b, out x0, out y0);\n        long x = x0 * n / gcd;\n        long y = y0 * n / gcd;\n        return Tuple.Create(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wk3s0pz.cs(18,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp_wk3s0pz.cs(19,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp_wk3s0pz.cs(20,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmp_wk3s0pz.cs(25,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp_wk3s0pz.cs(26,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp_wk3s0pz.cs(27,20): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n/tmp/tmp_wk3s0pz.cs(31,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_wk3s0pz.cs(36,9): error CS0103: The name 'ExtendedEuclidean' does not exist in the current context\n/tmp/tmp_wk3s0pz.cs(39,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // The solution is x = n/a - b/a * y.\n        // We need to make sure that y is an integer.\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyieahffx.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n / a;\n            y = (n - a * x) / b;\n        } else {\n            x = n / (a / d);\n            y = (n - a * x) / (b / d);\n        }\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp93kym4ah.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp93kym4ah.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp93kym4ah.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b) * n;\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpewvme5z5.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpewvme5z5.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpewvme5z5.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpewvme5z5.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpewvme5z5.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa3e42522.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_obfkcp.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp55b0xeun.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp55b0xeun.cs(38,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_obfkcp.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are both even, then there is no solution.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a is even, then x must be even and y must be odd.\n        if (a % 2 == 0) {\n            return FindSolution(a / 2, b, n / 2);\n        }\n        // If b is even, then x must be odd and y must be even.\n        if (b % 2 == 0) {\n            return FindSolution(a, b / 2, n / 2);\n        }\n        // If a and b are both odd, then x must be odd and y must be even.\n        if (a % 2 == 1 && b % 2 == 1) {\n            return FindSolution(a, b / 2, n / 2);\n        }\n        // If a is odd and b is even, then x must be even and y must be odd.\n        if (a % 2 == 1 && b % 2 == 0) {\n            return FindSolution(a / 2, b, n / 2);\n        }\n        // If a is even and b is odd, then x must be odd and y must be even.\n        if (a % 2 == 0 && b % 2 == 1) {\n            return FindSolution(a, b / 2, n / 2);\n        }\n        // If a is odd and b is even, then x must be even and y must be odd.\n        if (a % 2 == 1 && b % 2 == 0) {\n            return FindSolution(a / 2, b, n / 2);\n        }\n        // If a is even and b is odd, then x must be odd and y must be even.\n        if (a % 2 == 0 && b % 2 == 1) {\n            return FindSolution(a, b / 2, n / 2);\n        }\n        // If a is odd and b is even, then x must be even and y must be odd.\n        if (a % 2 == 1 && b % 2 == 0) {\n            return FindSolution(a / 2, b, n / 2);\n        }\n        // If a is even and b is odd, then x must be odd and y\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf6s7kbxq.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1];\n        y = result[2];\n        if (a < 0) {\n            x = -x;\n        }\n        if (b < 0) {\n            y = -y;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2wt51aqi.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp2wt51aqi.cs(17,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmp2wt51aqi.cs(28,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_obfkcp.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = n / b;\n        long r = n % b;\n        while (r > 0) {\n            long q = b / r;\n            long t = b % r;\n            b = r;\n            r = t;\n            t = y;\n            y = x - q * y;\n            x = t;\n        }\n        if (b > 1) return null;\n        if (x < 0) {\n            x += n / b;\n            y -= a / b;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7770f8886a7141dcb75e595b5f6ed9c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7770f8886a7141dcb75e595b5f6ed9c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpycmvyde3.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpycmvyde3.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpycmvyde3.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn53elzsq.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) return null;\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoabtq2er.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpoabtq2er.cs(35,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1, y1;\n            ExtendedEuclid(a, b, out x1, out y1);\n            x = x1 * (n / d);\n            y = y1 * (n / d);\n        } else {\n            x = (n / d) * ExtendedEuclid(a / d, b / d);\n            y = (n / d) * ExtendedEuclid(b / d, a / d);\n        }\n        return x + b / d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdslq0v6o.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpdslq0v6o.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpdslq0v6o.cs(17,13): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmpdslq0v6o.cs(21,27): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmpdslq0v6o.cs(22,27): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuev2dqpa.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpuev2dqpa.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbt308x9q.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long rx = x2 - q * x1;\n            long ry = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = rx;\n            y2 = y1;\n            y1 = ry;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7ownrylj.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_obfkcp.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphryl21rn.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long[] r = ExtendedEuclid(a1, b1);\n        x = r[1] * n1;\n        y = r[2] * n1;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_dhbfwsf.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_dhbfwsf.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_dhbfwsf.cs(15,20): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8hf921tf.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp8hf921tf.cs(25,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp8hf921tf.cs(26,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsvb3vfy7.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsvb3vfy7.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long a1 = a / gcd;\n        long b1 = b / gcd;\n        long n1 = n / gcd;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = n1 * result[0];\n        y = n1 * result[1];\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjv9fnoy7.cs(14,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpjv9fnoy7.cs(21,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n/tmp/tmpjv9fnoy7.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) return null;\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwps0puqj.cs(13,18): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69b8fb2fc32e46c1b4db347da78ca61b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69b8fb2fc32e46c1b4db347da78ca61b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsiqi46qm.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpsiqi46qm.cs(25,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpsiqi46qm.cs(26,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n        } else {\n            x = n / d;\n            y = (b / d) - (a / d) * x;\n        }\n        return Tuple.Create(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1_4esx11.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp1_4esx11.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp1_4esx11.cs(24,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoycfya4i.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpoycfya4i.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpoycfya4i.cs(24,22): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpoycfya4i.cs(25,22): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        long temp = 0;\n        if (a < b) {\n            temp = a;\n            a = b;\n            b = temp;\n        }\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        d = a;\n        if (n % d != 0) {\n            return null;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c9bb9bd0e40540f9ad4272165803913f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c9bb9bd0e40540f9ad4272165803913f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are both even, then the solution is impossible.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a is even, swap a and b.\n        if (a % 2 == 0) {\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n        // If a is odd and b is even, then the solution is impossible.\n        if (b % 2 == 0) {\n            return null;\n        }\n        // If a is odd and b is odd, then the solution is possible.\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        // Find the greatest common divisor of a and b.\n        while (a % 2 == 0 && b % 2 == 0) {\n            a /= 2;\n            b /= 2;\n            d++;\n        }\n        // If a is even, divide a by 2.\n        while (a % 2 == 0) {\n            a /= 2;\n        }\n        // If b is even, divide b by 2.\n        while (b % 2 == 0) {\n            b /= 2;\n        }\n        // If a is odd and b is odd, then the solution is possible.\n        while (a != b) {\n            if (a > b) {\n                a -= b;\n                x += y;\n                // If a is even, divide a by 2.\n                while (a % 2 == 0) {\n                    a /= 2;\n                    x /= 2;\n                }\n            } else {\n                b -= a;\n                y += x;\n                // If b is even, divide b by 2.\n                while (b % 2 == 0) {\n                    b /= 2;\n                    y /= 2;\n                }\n            }\n        }\n        // If a is odd and b is odd, then the solution is possible.\n        if (a % 2 == 1 && b % 2 == 1) {\n            // If a is odd and b is odd, then the solution is possible.\n            long gcd = a;\n            long m = n / gcd;\n            x\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq64g2g3z.cs(68,14): error CS1002: ; expected\n/tmp/tmpq64g2g3z.cs(70,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpq64g2g3z.cs(76,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpewdktu4a.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppzutfzds.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmppzutfzds.cs(14,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % Gcd(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = Gcd(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl9fmhttm.cs(11,17): error CS0103: The name 'Gcd' does not exist in the current context\n/tmp/tmpl9fmhttm.cs(16,18): error CS0103: The name 'Gcd' does not exist in the current context\n/tmp/tmpl9fmhttm.cs(18,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpl9fmhttm.cs(21,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmpl9fmhttm.cs(24,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b, out x, out y);\n        if (n % gcd != 0) {\n            return null;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp040g8n29.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return (x * (n / gcd)) + (y * (n / gcd));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyn4uw1a1.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy1u_1yv_.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpy1u_1yv_.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Nullable<long>(x);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Nullable<long>(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpru4g896u.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpru4g896u.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return new Nullable<long>(x * (n / gcd));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkxnd7obh.cs(13,20): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // a = bq + r\n        // n = ax + by\n        // n = bqx + rx + by\n        // rx = n - bqx - by\n        // rx = (n - by) - bqx\n        // rx + bqx = n - by\n        // x(r + bq) = n - by\n        // x = (n - by) / (r + bq)\n        // y = -qx + (n - rx) / b\n        // y = -qx + (n - (n - by) / (r + bq)) / b\n        // y = -qx + (n - n + by) / (r + bq) / b\n        // y = -qx + by / (r + bq) / b\n        // y = -qx + by / r + bq / b\n        // y = -qx + by / r + q\n        // y = -qx + by / r + q\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -qx + (by + qr) / r\n        // y = -\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw4dl9z8d.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5xy7hmeu.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5xy7hmeu.cs(17,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp5xy7hmeu.cs(21,25): error CS0103: The name 'ExtendedEuclid' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If n is not a multiple of gcd(a, b), there is no solution.\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        // If n is a multiple of gcd(a, b), then there is a solution.\n        // We can find it by solving the equation ax + by = gcd(a, b) for x and y,\n        // and then multiplying x and y by n / gcd(a, b).\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9s3y9jbi.cs(12,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp9s3y9jbi.cs(20,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return new long[] { x, y };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp684imm3q.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp684imm3q.cs(15,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp684imm3q.cs(17,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp684imm3q.cs(20,17): error CS0103: The name 'ModInverse' does not exist in the current context\n/tmp/tmp684imm3q.cs(23,16): error CS0029: Cannot implicitly convert type 'long[]' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = ExtendedGCD(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt9ni4x30.cs(13,18): error CS0103: The name 'ExtendedGCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpagz36l2j.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long a1 = a;\n        long b1 = b;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b1 = a1;\n            a1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2 * (n / gcd);\n        y = y2 * (n / gcd);\n        return (x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6sp51rm3.cs(15,20): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp6sp51rm3.cs(28,18): error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp6sp51rm3.cs(29,18): error CS0136: A local or parameter named 'y' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp6sp51rm3.cs(39,16): error CS0029: Cannot implicitly convert type '(long x, long y)' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f15b792e5398409ab5e11fe697d2af59>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        while (a % d != 0 || b % d != 0) {\n            long q = a / d;\n            long r = a % d;\n            long x3 = x1 - q * x2;\n            long y3 = y1 - q * y2;\n            x1 = x2;\n            y1 = y2;\n            x2 = x3;\n            y2 = y3;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return new Tuple<long, long>(x, y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr1xqz6x6.cs(12,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpr1xqz6x6.cs(16,18): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpr1xqz6x6.cs(29,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpr1xqz6x6.cs(33,16): error CS0029: Cannot implicitly convert type 'System.Tuple<long, long>' to 'long?'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = 0;\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        d = b;\n        if (n % d != 0) {\n            return null;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49458e8c7ea944c0aa93ec336c261267>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49458e8c7ea944c0aa93ec336c261267>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // The solution is x = n * b^-1 (mod a), y = n * a^-1 (mod b).\n        // The inverse exists iff a and b are coprime.\n        if (GCD(a, b) != 1) {\n            return null;\n        }\n        long x = ModularMultiplicativeInverse(b, a);\n        long y = ModularMultiplicativeInverse(a, b);\n        return (n * x) % a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcaphtbyr.cs(13,13): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpcaphtbyr.cs(16,18): error CS0103: The name 'ModularMultiplicativeInverse' does not exist in the current context\n/tmp/tmpcaphtbyr.cs(17,18): error CS0103: The name 'ModularMultiplicativeInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long x, y;\n        long g = GCD(a, b, out x, out y);\n        if (n % g != 0) {\n            return null;\n        }\n        x *= n / g;\n        y *= n / g;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg02g51gd.cs(21,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1665510499,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk4v732n.cs(11,17): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmpqk4v732n.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Theorem: If a and b are relatively prime, then there exists integers x and y such that ax + by = n.\n        // Proof: By the Euclidean algorithm, there exists integers x and y such that ax + by = gcd(a, b).\n        //        Since gcd(a, b) | n, there exists an integer k such that gcd(a, b) = kn.\n        //        Thus, ax + by = kn.\n        //        Since a and b are relatively prime, gcd(a, b) = 1, so kn = 1.\n        //        Thus, ax + by = 1.\n        //        Thus, there exists integers x and y such that ax + by = n.\n        // Corollary: If a and b are not relatively prime, then there does not exist integers x and y such that ax + by = n.\n        // Proof: Suppose there exists integers x and y such that ax + by = n.\n        //        Then, gcd(a, b) | ax + by = n.\n        //        Thus, gcd(a, b) | n.\n        //        Thus, there exists an integer k such that gcd(a, b) = kn.\n        //        Thus, ax + by = kn.\n        //        Thus, there exists integers x and y such that ax + by = n.\n        //        Thus, a and b are relatively prime.\n        //        Thus, if a and b are not relatively prime, then there does not exist integers x and y such that ax + by = n.\n        if (a == 0 && b == 0) {\n            if (n == 0) {\n                return 0;\n            } else {\n                return null;\n            }\n        }\n        if (a == 0) {\n            if (n % b == 0) {\n                return 0;\n            } else {\n                return null;\n            }\n        }\n        if (b == 0) {\n            if (n % a == 0) {\n                return 0;\n            } else {\n                return null;\n            }\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long gcd = GCD(a, b);\n        if (n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph9ur385q.cs(52,14): error CS1026: ) expected\n/tmp/tmph9ur385q.cs(52,14): error CS1525: Invalid expression term '}'\n/tmp/tmph9ur385q.cs(52,14): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123236,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa3e42522.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // If a and b are relatively prime, then the solution is unique.\n        if (GCD(a, b) == 1) {\n            // Find the multiplicative inverse of a modulo b.\n            long x = ModularInverse(a, b);\n            // Multiply the multiplicative inverse by n and reduce modulo b.\n            x = (x * n) % b;\n            // Return the solution.\n            return x;\n        }\n        // If a and b are not relatively prime, then there are no solutions.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_ej0c6fd.cs(12,13): error CS0103: The name 'GCD' does not exist in the current context\n/tmp/tmp_ej0c6fd.cs(14,22): error CS0103: The name 'ModularInverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) return null;\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7260unuq.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // a and b are relatively prime, so we can use the extended Euclidean algorithm to find x and y.\n        // The extended Euclidean algorithm is a generalization of the Euclidean algorithm for finding the greatest common divisor of two integers.\n        // It finds integers x and y such that ax + by = gcd(a, b).\n        // We can use this to find x and y such that ax + by = n, by setting n = gcd(a, b).\n        // We can find gcd(a, b) using the Euclidean algorithm.\n        // The Euclidean algorithm is a method for finding the greatest common divisor of two integers.\n        // It is based on the fact that if r is the remainder when a is divided by b, then gcd(a, b) = gcd(b, r).\n        // As a base case, we can use gcd(a, 0) = a.\n        //\n        // The extended Euclidean algorithm is based on the fact that gcd(a, b) = gcd(b, r) = gcd(b, r) = gcd(r, r % b) = gcd(r, b % r) = gcd(b % r, r % (b % r)) = ...\n        // If we let a0 = a, b0 = b, and r0 = r, then we can write this as a sequence of equations:\n        // a0 = b0 * q0 + r0\n        // b0 = r0 * q1 + r1\n        // r0 = r1 * q2 + r2\n        // ...\n        // r(n-2) = r(n-1) * q(n) + r(n)\n        //\n        // We can solve this sequence of equations for x and y using the method of substitution.\n        // We start by writing the first two equations as:\n        // a0 = b0 * q0 + r0\n        // b0 = r0 * q1 + r1\n        //\n        // We can substitute the second equation into the first to get:\n        // a0 = (r0 * q1 + r1) * q0 + r0\n        // a0 = r0 * q1 * q\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpisx0hnob.cs(10,34): error CS0161: 'Problem.FindSolution(long, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long rx = x2 - q * x1;\n            long ry = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = rx;\n            y2 = y1;\n            y1 = ry;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz5wcfs5g.cs(13,18): error CS0103: The name 'GCD' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n        // Write your code here.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01c8d0f926164b3c893a3a15ef79e885>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}