{
  "name": "mbpp_283_validate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Validate((1234L)) == (true));\n    Debug.Assert(Validate((51241L)) == (false));\n    Debug.Assert(Validate((321L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => (int)Char.GetNumericValue(x)).ToList();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            freq[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var dict = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = n % 10;\n            if (dict.ContainsKey(digit)) {\n                dict[digit]++;\n            } else {\n                dict[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var item in dict) {\n            if (item.Value > item.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var dict = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (dict.ContainsKey(digit)) {\n                dict[digit]++;\n            } else {\n                dict.Add(digit, 1);\n            }\n            n /= 10;\n        }\n        foreach (var key in dict.Keys) {\n            if (dict[key] > key) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var freq = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (freq.ContainsKey(digit)) {\n                freq[digit]++;\n            } else {\n                freq[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kvp in freq) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        // Write your code here\n        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < digits.Length; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        int[] digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < digits.Length; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;"
  ]
}