{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                sum += a[i];\n                max = sum;\n                break;\n            }\n            if (a[i] < a[k]) {\n                sum += a[i];\n                max = Math.Max(max, sum);\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        maxSum = sum;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long sum = 0;\n        long max = 0;\n        for(long i = index; i < n; i++) {\n            if(a[i] < a[k]) {\n                sum += a[i];\n                if(sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k) + a[index];\n                if (sum > max) max = sum;\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[(int)index]);\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 0; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && i < k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n            sum = Math.Max(sum, a[k] + MaxSumIncreasingSubseq(a, n, k, k + 1));\n        }\n        else {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n        }\n        return sum;",
    "        if (index == n) return 0;\n        long max = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        if (index < k && a[index] < a[k]) {\n            max = Math.Max(max, a[k] + MaxSumIncreasingSubseq(a, n, index + 1, k));\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            if (maxIndex == index) {\n                sum += a[k];\n            }\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == n - 1) {\n            return a[(int)index];\n        }\n        if (index == k) {\n            return a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k + 1);\n        }\n        return MaxSumIncreasingSubseq(a, n, index + 1, k);",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index] + a[k];\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;"
  ]
}