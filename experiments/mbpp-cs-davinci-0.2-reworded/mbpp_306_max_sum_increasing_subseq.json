{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                sum += a[i];\n                max = sum;\n                break;\n            }\n            if (a[i] < a[k]) {\n                sum += a[i];\n                max = Math.Max(max, sum);\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        maxSum = sum;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long sum = 0;\n        long max = 0;\n        for(long i = index; i < n; i++) {\n            if(a[i] < a[k]) {\n                sum += a[i];\n                if(sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k) + a[index];\n                if (sum > max) max = sum;\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[(int)index]);\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 0; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && i < k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n            sum = Math.Max(sum, a[k] + MaxSumIncreasingSubseq(a, n, k, k + 1));\n        }\n        else {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n        }\n        return sum;",
    "        if (index == n) return 0;\n        long max = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        if (index < k && a[index] < a[k]) {\n            max = Math.Max(max, a[k] + MaxSumIncreasingSubseq(a, n, index + 1, k));\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            if (maxIndex == index) {\n                sum += a[k];\n            }\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == n - 1) {\n            return a[(int)index];\n        }\n        if (index == k) {\n            return a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k + 1);\n        }\n        return MaxSumIncreasingSubseq(a, n, index + 1, k);",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index] + a[k];\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long max = 0;\n        if (a[index] < a[k]) {\n            max = MaxSumIncreasingSubseq(a, n, index + 1, k + 1) + a[k];\n        }\n        max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index, k + 1));\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        max += a[k];\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[(int)index]);\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (sum > max && a[i] > a[index]) {\n                max = sum;\n            }\n        }\n        return a[index] + max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            } else if (i == k) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index + 1; i <= n; i++) {\n            if (a[(int)index] < a[(int)i]) {\n                long sum = a[(int)index] + MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long max = a[index];\n        long max_sum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max_sum = Math.Max(max_sum, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max_sum + max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, i) + a[k];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        // Base case\n        if (index == n) {\n            return 0;\n        }\n        // Recursive case\n        long ans = 0;\n        if (a[index] < a[k]) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        ans = Math.Max(ans, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return ans;",
    "        // dp[i] is the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && i < k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        maxSum = sum + a[k];\n        return maxSum;",
    "        // Write your code here\n        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        long maxIndex = 0;\n        long maxIndex2 = 0;\n        long max2 = 0;\n        long sum2 = 0;\n        long maxSum2 = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[index]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, index) + a[index];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                    maxIndex = i;\n                }\n            }\n        }\n        if (maxSum == 0) {\n            maxSum = a[index];\n        }\n        for (long i = index + 1; i < k; i++) {\n            if (a[i] > a[index]) {\n                sum2 = MaxSumIncreasingSubseq(a, n, i, k) + a[index];\n                if (sum2 > maxSum2) {\n                    maxSum2 = sum2;\n                    maxIndex2 = i;\n                }\n            }\n        }\n        if (maxSum2 == 0) {\n            maxSum2 = a[index];\n        }\n        return maxSum + maxSum2;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        if (index == k) {\n            return a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return Math.Max(a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, k));",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) max = sum;\n            }\n        }\n        return a[index] + max;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        if (maxIndex == -1) {\n            return 0;\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++)\n            dp[i] = a[i];\n        for (int i = 1; i < n; i++)\n            for (int j = 0; j < i; j++)\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i])\n                    dp[i] = dp[j] + a[i];\n        long max = 0;\n        for (int i = 0; i < n; i++)\n            if (dp[i] > max)\n                max = dp[i];\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index + 1; i <= n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k) + a[(int)index];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                max = Math.Max(max, a[i]);\n            } else {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = 0;\n        for (int i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long sum = 0;\n        if (index < n) {\n            sum = a[index];\n            long max = 0;\n            for (long i = index + 1; i < n; i++) {\n                if (a[i] > a[index] && i < k) {\n                    long temp = MaxSumIncreasingSubseq(a, n, i, k);\n                    if (temp > max) {\n                        max = temp;\n                    }\n                }\n            }\n            sum += max;\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long max = 0;\n        if (a[index] < a[k]) {\n            max = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[k];\n        }\n        max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index, k + 1));\n        return max;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n            else {\n                sum = 0;\n            }\n        }\n        return maxSum;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long sum = 0;\n        for (int i = 0; i < index; i++) {\n            sum += a[i];\n        }\n        sum += dp[k];\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            if (i == k) {\n                dp[i] = dp[index] + a[i];\n            } else {\n                dp[i] = Math.Max(dp[i - 1], dp[index] + a[i]);\n            }\n        }\n        return dp[n - 1];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = a[(int)index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long res = dp[index];\n        for (long i = index; i < k; i++) {\n            res += a[i];\n        }\n        return res;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long maxSum = a[index];\n        long sum = a[index];\n        for (long i = index + 1; i < n; i++) {\n            if (i == k) {\n                sum += a[i];\n            } else if (a[i] > a[i - 1]) {\n                sum += a[i];\n            } else {\n                sum = a[i];\n            }\n            maxSum = Math.Max(maxSum, sum);\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum = sum + a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, i) + a[k];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[(int)i];\n        }\n        return sum + MaxSumIncreasingSubseq(a, n, k, k + 1);",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) continue;\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] > a[index]) {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] > a[index]) {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        maxSum = a[k] + max;\n        return maxSum;",
    "        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        for (long i = index; i < k; i++) {\n            maxSumIncludingK = Math.Max(maxSumIncludingK, MaxSumIncreasingSubseq(a, n, i, k - 1) + a[k]);\n        }\n        maxSum = Math.Max(maxSum, maxSumIncludingK);\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        long max2 = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp2[i] > max2) {\n                max2 = dp2[i];\n            }\n        }\n        return max2;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        return max[index] + a[k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        max += a[k];\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] ans = new long[n];\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            ans[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long temp = maxIndex;\n        while (temp != -1) {\n            ans[temp] = dp[temp];\n            temp = prev[temp];\n        }\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            sum += ans[i];\n        }\n        sum += a[k];\n        return sum;",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[k];",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // dp[i] = max sum of increasing subsequence from prefix until ith index\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i]\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i] and dp[j] > 0\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i] and dp[j] > 0 and dp[j] + a[i] > 0\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i] and dp[j] > 0 and dp[j] + a[i] > 0 and dp[j] + a[i] > dp[i]\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i] and dp[j] > 0 and dp[j] + a[i] > 0 and dp[j] + a[i] > dp[i] and dp[j] > dp[i]\n        // dp[i] = max(dp[i], dp[j] + a[i]) for all j < i and j < k and a[j] < a[i] and dp[j] > 0 and dp[j] + a[i] > 0 and dp[j] + a[i] > dp[i] and dp[j] > d",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            for (long j = index; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[k];",
    "        var dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, i) + a[i];\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[k] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i] && i <= k) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        return dp[index];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long maxSum = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, i);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        maxSum = max + a[k];\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        maxSum = max + a[k];\n        return maxSum;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        if (index < k) {\n            maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index]);\n        }\n        return maxSum;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        maxSum = sum;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n            sum = Math.Max(sum, a[k] + MaxSumIncreasingSubseq(a, n, k, k + 1));\n        } else {\n            sum = MaxSumIncreasingSubseq(a, n, index, k + 1);\n        }\n        return sum;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        // dp[i] = max sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 0; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index] + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = a[k];\n        }\n        return Math.Max(MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, index) + sum);",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        dp[0] = a[0];\n        prev[0] = -1;\n        long maxSum = a[0];\n        long maxSumIndex = 0;\n        for (long i = 1; i < n; i++) {\n            long max = 0;\n            long maxIndex = -1;\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[j] > max) {\n                    max = dp[j];\n                    maxIndex = j;\n                }\n            }\n            dp[i] = max + a[i];\n            prev[i] = maxIndex;\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxSumIndex = i;\n            }\n        }\n        long sum = 0;\n        long i1 = maxSumIndex;\n        while (i1 != -1) {\n            sum += a[i1];\n            i1 = prev[i1];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n            else {\n                sum = 0;\n            }\n        }\n        maxSum += a[k];\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k) + a[(int)index];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)index] < a[(int)i]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[(int)index];",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = i - 1; j >= 0; j--) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else if (i < k) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            sum += a[i];\n        }\n        sum += max[k - 1];\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[k]);\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i <= index; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i <= index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum + a[i] > max) max = sum + a[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] > max) {\n                max = a[i];\n                maxIndex = i;\n            }\n        }\n        sum = max;\n        for (long i = index; i < maxIndex; i++) {\n            if (a[i] < max) {\n                sum += a[i];\n            }\n        }\n        maxSum = sum;\n        for (long i = maxIndex + 1; i < n; i++) {\n            sum = MaxSumIncreasingSubseq(a, n, maxIndex + 1, i);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n                } else {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[index]);\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i == k) {\n                    max = Math.Max(max, a[index] + a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                } else {\n                    max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        return Math.Max(sum, MaxSumIncreasingSubseq(a, n, index + 1, k));",
    "        // dp[i] = max sum of increasing subsequence from prefix until ith index\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n            max[i] = Math.Max(max[i - 1], dp[i]);\n        }\n        long sum = 0;\n        long i = index;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum + max[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        if (k > index) {\n            long sum = a[index] + MaxSumIncreasingSubseq(a, n, k, k);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // dp[i] = max sum of increasing subsequence from prefix until ith index\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index + 1; i < n; i++) {\n            if (a[i] > a[index]) {\n                maxSum = Math.Max(maxSum, dp[i]);\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum = sum + a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        maxSum = maxSum + a[k];\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = a[(int)index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = a[(int)index];\n        for (long i = index + 1; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k) + a[(int)index];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = Math.Max(MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index]);\n        } else {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return ans;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return a[index] + max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index + 1; i <= n; i++) {\n            if (a[i] > a[index]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[index]);\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        } else {\n            sum = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, i) + a[k];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (k == n) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum = Math.Max(sum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long max = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];",
    "        long max = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (a[index] < a[k]) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        ans = Math.Max(ans, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return ans;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long max = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                } else if (i == k) {\n                    max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                }\n            }\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                } else {\n                    max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                    max = Math.Max(max, a[k] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long ans = 0;\n        for (long i = index; i < k; i++) {\n            ans = Math.Max(ans, max[i]);\n        }\n        return ans;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n            max[i] = Math.Max(max[i - 1], dp[i]);\n        }\n        return max[index] + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = dp[index];\n        long maxIndex = index;\n        for (long i = index + 1; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[(int)index] < a[(int)i]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return a[(int)index] + maxSum;"
  ]
}