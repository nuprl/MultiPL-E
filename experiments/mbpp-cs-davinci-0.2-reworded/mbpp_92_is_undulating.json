{
  "name": "mbpp_92_is_undulating",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // TODO: Implement this function.\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var len = digits.Length;\n        for (int i = 0; i < len - 2; i++) {\n            if (digits[i] == digits[i + 2]) {\n                return true;\n            }\n        }\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        // TODO: Implement this function.\n        return false;",
    "        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        // TODO: Implement this function.\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        var s = n.ToString();\n        var len = s.Length;\n        var i = 0;\n        while (i < len - 1) {\n            if (s[i] == s[i + 1]) {\n                i++;\n                continue;\n            }\n            var j = i + 1;\n            while (j < len - 1 && s[j] == s[j + 1]) {\n                j++;\n            }\n            if (j == len - 1) {\n                return false;\n            }\n            if (s[i] > s[j] || s[i] < s[j]) {\n                return false;\n            }\n            i = j + 1;\n        }\n        return true;",
    "        var s = n.ToString();\n        var i = 0;\n        while (i < s.Length - 1) {\n            if (s[i] == s[i + 1]) {\n                i++;\n                continue;\n            }\n            if (i == s.Length - 2) {\n                return false;\n            }\n            if (s[i] < s[i + 1]) {\n                if (s[i + 1] > s[i + 2]) {\n                    return false;\n                }\n            } else {\n                if (s[i + 1] < s[i + 2]) {\n                    return false;\n                }\n            }\n            i += 2;\n        }\n        return true;",
    "        var s = n.ToString();\n        var last = s[0];\n        var lastWasSame = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                if (lastWasSame) return false;\n                lastWasSame = true;\n            } else {\n                lastWasSame = false;\n            }\n            last = s[i];\n        }\n        return true;",
    "        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Your code goes here.\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] != digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;"
  ]
}