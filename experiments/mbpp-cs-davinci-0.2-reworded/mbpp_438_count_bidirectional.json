{
  "name": "mbpp_438_count_bidirectional",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count bidirectional tuple pairs.\n    public static long CountBidirectional(List<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountBidirectional((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (3L));\n    Debug.Assert(CountBidirectional((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (2L));\n    Debug.Assert(CountBidirectional((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // TODO: Implement this function.\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        long count = 0;\n        for (int i = 0; i < test_list.Count; i++) {\n            for (int j = i + 1; j < test_list.Count; j++) {\n                if (test_list[i] == test_list[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < test_list.Count; i++) {\n            for (int j = i + 1; j < test_list.Count; j++) {\n                if (test_list[i] == test_list[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var count = 0;\n        var dict = new Dictionary<long, long>();\n        foreach (var item in test_list) {\n            if (dict.ContainsKey(item)) {\n                count += dict[item];\n                dict[item]++;\n            } else {\n                dict[item] = 1;\n            }\n        }\n        return count;",
    "        // Your code here.\n        return 0;",
    "        // TODO: Implement this function.\n        // Hint: You can use the built-in sorting function.\n        test_list.Sort();\n        long count = 0;\n        for (int i = 0; i < test_list.Count; i++)\n        {\n            for (int j = i + 1; j < test_list.Count; j++)\n            {\n                if (test_list[i] == test_list[j])\n                {\n                    count++;\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n        return count;",
    "        // Your code here.\n        return 0;",
    "        var count = 0;\n        for (var i = 0; i < test_list.Count; i++) {\n            for (var j = i + 1; j < test_list.Count; j++) {\n                if (test_list[i] == test_list[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here.\n        return 0;",
    "        long count = 0;\n        for (int i = 0; i < test_list.Count; i++) {\n            for (int j = i + 1; j < test_list.Count; j++) {\n                if (test_list[i] == test_list[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code goes here.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;"
  ]
}