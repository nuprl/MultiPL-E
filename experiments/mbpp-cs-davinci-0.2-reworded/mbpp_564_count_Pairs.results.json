{
  "name": "mbpp_564_count_Pairs",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphmik1dzm.cs(15,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmik1dzm.cs(15,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphmik1dzm.cs(15,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmik1dzm.cs(15,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        // Return the number of pairs\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5xjilj1y.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5xjilj1y.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        // Return the number of pairs\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69ccefa73b264aa292f9576f665197f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69ccefa73b264aa292f9576f665197f7>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphmik1dzm.cs(15,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmik1dzm.cs(15,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        // Your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqa9_0_yz.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqa9_0_yz.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploo68flk.cs(14,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmploo68flk.cs(14,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] != arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}