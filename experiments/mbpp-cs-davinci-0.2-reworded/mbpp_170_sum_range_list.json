{
  "name": "mbpp_170_sum_range_list",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the sum of numbers in a list within a range specified by two indices.\n    public static long SumRangeList(List<long> list1, long m, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (8L), (10L)) == (29L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (5L), (7L)) == (16L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (7L), (10L)) == (38L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = (int)m; i <= n; i++) {\n            sum += list1[i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = (int)m; i <= n; i++) {\n            sum += list1[i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = (int)m; i <= n; i++) {\n            sum += list1[i];\n        }\n        return sum;"
  ]
}