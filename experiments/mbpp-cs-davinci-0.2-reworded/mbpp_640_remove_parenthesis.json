{
  "name": "mbpp_640_remove_parenthesis",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static string RemoveParenthesis(List<string> items) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"python (chrome)\"}))).Equals((\"python\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"string(.abc)\"}))).Equals((\"string\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"alpha(num)\"}))).Equals((\"alpha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                int start = stack.Pop();\n                items[start] = \"\";\n                items[i] = \"\";\n            }\n        }\n        foreach (var item in items) {\n            if (item != \"\") {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else if (stack.Count == 0) {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        var result = new List<string>();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    result.Add(item);\n                }\n            }\n        }\n        return string.Join(\"\", result);",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else if (stack.Count == 0) {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        foreach (string item in items) {\n            if (item.Contains(\"(\")) {\n                result += item.Substring(0, item.IndexOf(\"(\"));\n            } else {\n                result += item;\n            }\n        }\n        return result;",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        // Create a stack to hold the items\n        Stack<string> stack = new Stack<string>();\n        // Create a string builder to hold the result\n        StringBuilder result = new StringBuilder();\n        // Iterate through the items\n        foreach (string item in items) {\n            // If the item is a parenthesis\n            if (item == \"(\" || item == \")\") {\n                // If the item is a closing parenthesis\n                if (item == \")\") {\n                    // Pop the stack until the opening parenthesis is found\n                    while (stack.Peek() != \"(\") {\n                        result.Append(stack.Pop());\n                    }\n                    // Pop the opening parenthesis\n                    stack.Pop();\n                }\n                // If the item is an opening parenthesis\n                else {\n                    // Push the item to the stack\n                    stack.Push(item);\n                }\n            }\n            // If the item is not a parenthesis\n            else {\n                // Push the item to the stack\n                stack.Push(item);\n            }\n        }\n        // Return the result\n        return result.ToString();",
    "        var result = new List<string>();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    result.Add(item);\n                }\n            }\n        }\n        return string.Join(\"\", result);",
    "        var result = new List<string>();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                while (stack.Count > 0 && stack.Peek() != \"(\") {\n                    stack.Pop();\n                }\n                if (stack.Count > 0 && stack.Peek() == \"(\") {\n                    stack.Pop();\n                }\n            } else {\n                result.Add(item);\n            }\n        }\n        return string.Join(\"\", result);",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                var start = stack.Pop();\n                items.RemoveRange(start, i - start + 1);\n                i = start;\n            }\n        }\n        return string.Join(\"\", items);",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else if (stack.Count == 0) {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        foreach (var item in items) {\n            if (item.Length == 1 && item[0] == '(') {\n                continue;\n            }\n            if (item.Length == 1 && item[0] == ')') {\n                continue;\n            }\n            sb.Append(item);\n        }\n        return sb.ToString();"
  ]
}