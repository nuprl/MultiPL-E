{
  "name": "mbpp_265_list_split",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static object ListSplit(object S, long step) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));\n    Debug.Assert(ListSplit((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new object(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var n = list.Count;\n        for (int i = 0; i < n; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < n; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        if (step == 0) {\n            return null;\n        }\n        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var r = new List<object>();\n        foreach (var x in L) {\n            if (i == step) {\n                R.Add(r);\n                r = new List<object>();\n                i = 0;\n            }\n            r.Add(x);\n            i++;\n        }\n        R.Add(r);\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (step == 0) {\n            return new List<object>();\n        }\n        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0) {\n                if (r.Count > 0) {\n                    R.Add(r);\n                }\n                r = new List<object>();\n            }\n            r.Add(L[i]);\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (var i = 0; i < L.Count; i++) {\n            r.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(r);\n                r = new List<object>();\n            }\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step <= 0) {\n            throw new ArgumentException(\"step must be positive\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        for (long i = 0; i < L.Count; i += step) {\n            var T = new List<object>();\n            for (long j = i; j < i + step && j < L.Count; j++) {\n                T.Add(L[(int)j]);\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (var i = 0; i < list.Count; i += step) {\n            var sublist = new List<object>();\n            for (var j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        long count = 0;\n        foreach (var item in list) {\n            sublist.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n            sublist.Add(item);\n            count++;\n        }\n        result.Add(sublist);\n        return result;",
    "        if (step < 1) {\n            throw new ArgumentException(\"step must be greater than 0\");\n        }\n        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<List<object>>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            temp.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (S is List<object>) {\n            List<object> L = (List<object>)S;\n            List<object> res = new List<object>();\n            for (int i = 0; i < L.Count; i += (int)step) {\n                res.Add(L.GetRange(i, (int)Math.Min(step, L.Count - i)));\n            }\n            return res;\n        }\n        else {\n            throw new Exception(\"ListSplit: S is not a list\");\n        }",
    "        var L = new List<object>();\n        var N = new List<object>();\n        var i = 0;\n        foreach (var x in (List<object>)S) {\n            if (i == step) {\n                L.Add(N);\n                N = new List<object>();\n                i = 0;\n            }\n            N.Add(x);\n            i++;\n        }\n        L.Add(N);\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (long i = 0; i < list.Count; i += step) {\n            var sublist = new List<object>();\n            for (long j = i; j < i + step; j++) {\n                if (j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[(int)j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        List<object> L = (List<object>)S;\n        List<object> R = new List<object>();\n        for (int i = 0; i < L.Count; i += (int)step) {\n            List<object> T = new List<object>();\n            for (int j = 0; j < step && i + j < L.Count; j++) {\n                T.Add(L[i + j]);\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        while (i < L.Count) {\n            var j = i + step;\n            if (j > L.Count) {\n                j = L.Count;\n            }\n            var sublist = L.GetRange(i, (int)(j - i));\n            R.Add(sublist);\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var N = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0) {\n                if (N.Count > 0) {\n                    R.Add(N);\n                }\n                N = new List<object>();\n            }\n            N.Add(L[i]);\n        }\n        if (N.Count > 0) {\n            R.Add(N);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                current = new List<object>();\n                result.Add(current);\n            }\n            current.Add(item);\n            i++;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (IList<object>)S;\n        var R = new List<object>();\n        var N = L.Count;\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            R.Add(L.Skip(i).Take(j - i).ToList());\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        object[] L = (object[])S;\n        object[] R = new object[L.Length / step];\n        for (long i = 0; i < L.Length; i += step) {\n            R[i / step] = L.Skip((int)i).Take((int)step).ToArray();\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in L) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        while (i < L.Count) {\n            var j = i + step;\n            if (j > L.Count) {\n                j = L.Count;\n            }\n            R.Add(L.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            i++;\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n            T.Add(L[i]);\n        }\n        R.Add(T);\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = 0;\n        var sublist = new List<object>();\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n            sublist.Add(item);\n            count++;\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var r = new List<object>();\n        while (i < L.Count) {\n            r.Add(L[i]);\n            i++;\n            j++;\n            if (j == step) {\n                R.Add(r);\n                r = new List<object>();\n                j = 0;\n            }\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n                temp.Add(list[i]);\n            } else {\n                temp.Add(list[i]);\n            }\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IList<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n            T.Add(L[i]);\n        }\n        R.Add(T);\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[(int)i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S is not a list\");\n        }\n        if (step <= 0) {\n            throw new ArgumentException(\"step must be positive\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        List<object> L = (List<object>)S;\n        List<object> result = new List<object>();\n        for (int i = 0; i < L.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < L.Count) {\n                    sublist.Add(L[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        if (S is IEnumerable<object>) {\n            var list = (IEnumerable<object>)S;\n            var result = new List<object>();\n            var sublist = new List<object>();\n            long i = 0;\n            foreach (var item in list) {\n                if (i % step == 0) {\n                    if (sublist.Count > 0) {\n                        result.Add(sublist);\n                    }\n                    sublist = new List<object>();\n                }\n                sublist.Add(item);\n                i++;\n            }\n            if (sublist.Count > 0) {\n                result.Add(sublist);\n            }\n            return result;\n        }\n        return null;",
    "        if (step == 0) {\n            return new List<object>();\n        }\n        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j = (j + 1) % step;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            current.Add(list[(int)i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        long i = 0;\n        while (i < list.Count) {\n            List<object> sublist = new List<object>();\n            for (long j = 0; j < step && i < list.Count; j++) {\n                sublist.Add(list[(int)i]);\n                i++;\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = new List<object>();\n        var N = new List<object>();\n        foreach (var x in (List<object>)S) {\n            N.Add(x);\n            if (N.Count == step) {\n                L.Add(N);\n                N = new List<object>();\n            }\n        }\n        if (N.Count > 0) {\n            L.Add(N);\n        }\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = S as IEnumerable<object>;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        // Your code goes here.\n        return null;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(temp);\n                temp = new List<object>();\n                count = 0;\n            }\n            temp.Add(item);\n            count++;\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var t = new List<object>();\n        for (long i = 0; i < L.Count; i++) {\n            t.Add(L[(int)i]);\n            if ((i + 1) % step == 0) {\n                R.Add(t);\n                t = new List<object>();\n            }\n        }\n        if (t.Count > 0) {\n            R.Add(t);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = S as IList<object>;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        if (S is IEnumerable<object>) {\n            var L = (IEnumerable<object>)S;\n            var R = new List<object>();\n            var T = new List<object>();\n            long i = 0;\n            foreach (var x in L) {\n                T.Add(x);\n                i++;\n                if (i == step) {\n                    R.Add(T);\n                    T = new List<object>();\n                    i = 0;\n                }\n            }\n            if (T.Count > 0) {\n                R.Add(T);\n            }\n            return R;\n        } else {\n            throw new Exception(\"ListSplit: S is not a list\");\n        }",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var l = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < l.Count; i++) {\n            current.Add(l[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0L;\n        var j = 0L;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[(int)j]).Add(L[(int)i]);\n            i++;\n            j = (j + 1) % step;\n        }\n        return R;",
    "        // Your code goes here.\n        return null;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        while (i < L.Count) {\n            var r = new List<object>();\n            for (var j = 0; j < step && i < L.Count; j++) {\n                r.Add(L[i]);\n                i++;\n            }\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        List<object> list = (List<object>)S;\n        List<object> result = new List<object>();\n        for (long i = 0; i < list.Count; i += step) {\n            List<object> sublist = new List<object>();\n            for (long j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[(int)j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = 0;\n        var sublist = new List<object>();\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n            sublist.Add(item);\n            count++;\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = list.Count;\n        var i = 0;\n        while (i < count) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step && i < count; j++) {\n                sublist.Add(list[i]);\n                i++;\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        if (step <= 0) {\n            throw new ArgumentException(\"Step must be greater than 0\");\n        }\n        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (var i = 0; i < L.Count; i++) {\n            temp.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        List<object> L = new List<object>();\n        List<object> R = new List<object>();\n        List<object> T = new List<object>();\n        List<object> U = new List<object>();\n        if (step == 0) {\n            return L;\n        }\n        if (step < 0) {\n            return L;\n        }\n        if (step == 1) {\n            return S;\n        }\n        if (step == 2) {\n            L = (List<object>)S;\n            for (int i = 0; i < L.Count; i += 2) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 1; i < L.Count; i += 2) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            return T;\n        }\n        if (step > 2) {\n            L = (List<object>)S;\n            for (int i = 0; i < L.Count; i += step) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 1; i < L.Count; i += step) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 2; i < L.Count; i += step) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 3; i < L.Count; i += step) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 4; i < L.Count; i += step) {\n                R.Add(L[i]);\n            }\n            T.Add(R);\n            R = new List<object>();\n            for (int i = 5; i",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (S is List<object>) {\n            List<object> L = (List<object>)S;\n            List<object> result = new List<object>();\n            for (int i = 0; i < L.Count; i += (int)step) {\n                result.Add(L.GetRange(i, (int)Math.Min(step, L.Count - i)));\n            }\n            return result;\n        } else {\n            throw new Exception(\"ListSplit: S is not a list\");\n        }",
    "        var L = new List<object>();\n        var N = new List<object>();\n        var i = 0;\n        foreach (var x in (IEnumerable<object>)S) {\n            if (i % step == 0) {\n                if (N.Count > 0) {\n                    L.Add(N);\n                }\n                N = new List<object>();\n            }\n            N.Add(x);\n            i++;\n        }\n        if (N.Count > 0) {\n            L.Add(N);\n        }\n        return L;",
    "        var L = new List<object>();\n        var l = new List<object>();\n        var i = 0;\n        foreach (var e in (List<object>)S) {\n            if (i == step) {\n                L.Add(l);\n                l = new List<object>();\n                i = 0;\n            }\n            l.Add(e);\n            i++;\n        }\n        if (l.Count > 0) {\n            L.Add(l);\n        }\n        return L;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in L) {\n            current.Add(item);\n            count += 1;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = new List<object>();\n        var N = new List<object>();\n        foreach (var i in (List<object>)S) {\n            N.Add(i);\n            if (N.Count == step) {\n                L.Add(N);\n                N = new List<object>();\n            }\n        }\n        if (N.Count > 0) {\n            L.Add(N);\n        }\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var r = new List<object>();\n        foreach (var e in L) {\n            if (i == step) {\n                R.Add(r);\n                r = new List<object>();\n                i = 0;\n            }\n            r.Add(e);\n            i++;\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var counter = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            counter += 1;\n            if (counter == step) {\n                result.Add(current);\n                current = new List<object>();\n                counter = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) R.Add(T);\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var subList = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            subList.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(subList);\n                subList = new List<object>();\n            }\n        }\n        if (subList.Count > 0) {\n            result.Add(subList);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[(int)i]);\n        }\n        result.Add(temp);\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> input = (List<object>)S;\n        for (int i = 0; i < input.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < input.Count) {\n                    sublist.Add(input[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var n = list.Count;\n        for (var i = 0; i < n; i += step) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step; j++) {\n                if (i + j < n) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        while (i < L.Count) {\n            var j = i + step;\n            if (j > L.Count) {\n                j = L.Count;\n            }\n            R.Add(L.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (var i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                    temp = new List<object>();\n                }\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        if (S is IEnumerable<object>) {\n            var list = (IEnumerable<object>)S;\n            var result = new List<object>();\n            var current = new List<object>();\n            var i = 0;\n            foreach (var item in list) {\n                if (i % step == 0) {\n                    result.Add(current);\n                    current = new List<object>();\n                }\n                current.Add(item);\n                i++;\n            }\n            result.Add(current);\n            return result;\n        } else {\n            return S;\n        }",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n            T.Add(L[i]);\n        }\n        R.Add(T);\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0)\n            result.Add(current);\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step <= 0) {\n            throw new ArgumentException(\"step must be positive\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            i++;\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = 0;\n        var current = new List<object>();\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var C = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                R.Add(C);\n                C = new List<object>();\n            }\n            C.Add(L[i]);\n        }\n        R.Add(C);\n        return R;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        long i = 0;\n        foreach (var item in L) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(item);\n            i++;\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (IList<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = list.Count;\n        var i = 0;\n        while (i < count) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step; j++) {\n                if (i < count) {\n                    sublist.Add(list[i]);\n                    i++;\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var N = L.Count;\n        var R = new List<object>();\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            R.Add(L.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            i++;\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = new List<object>();\n        var l = new List<object>();\n        var i = 0;\n        foreach (var x in (List<object>)S) {\n            l.Add(x);\n            i++;\n            if (i == step) {\n                L.Add(l);\n                l = new List<object>();\n                i = 0;\n            }\n        }\n        if (l.Count > 0) {\n            L.Add(l);\n        }\n        return L;",
    "        object[] lst = (object[])S;\n        object[] result = new object[(int)Math.Ceiling((double)lst.Length / step)];\n        int j = 0;\n        for (int i = 0; i < lst.Length; i += (int)step) {\n            result[j] = lst.Skip(i).Take((int)step).ToArray();\n            j++;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var x in L) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(x);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;"
  ]
}