{
  "name": "mbpp_265_list_split",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static object ListSplit(object S, long step) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));\n    Debug.Assert(ListSplit((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new object(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var n = list.Count;\n        for (int i = 0; i < n; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < n; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        if (step == 0) {\n            return null;\n        }\n        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var r = new List<object>();\n        foreach (var x in L) {\n            if (i == step) {\n                R.Add(r);\n                r = new List<object>();\n                i = 0;\n            }\n            r.Add(x);\n            i++;\n        }\n        R.Add(r);\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (step == 0) {\n            return new List<object>();\n        }\n        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0) {\n                if (r.Count > 0) {\n                    R.Add(r);\n                }\n                r = new List<object>();\n            }\n            r.Add(L[i]);\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (var i = 0; i < L.Count; i++) {\n            r.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(r);\n                r = new List<object>();\n            }\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step <= 0) {\n            throw new ArgumentException(\"step must be positive\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        for (long i = 0; i < L.Count; i += step) {\n            var T = new List<object>();\n            for (long j = i; j < i + step && j < L.Count; j++) {\n                T.Add(L[(int)j]);\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (var i = 0; i < list.Count; i += step) {\n            var sublist = new List<object>();\n            for (var j = i; j < i + step && j < list.Count; j++) {\n                sublist.Add(list[j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        long count = 0;\n        foreach (var item in list) {\n            sublist.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;"
  ]
}