{
  "name": "mbpp_755_second_smallest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the second smallest number in a list.\n    public static Nullable<float> SecondSmallest(object numbers) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)2L, (long)-8L, (long)-2L, (long)0L, (long)-2L}))).Equals(-2L));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)1L, (long)-0.5f, (long)0L, (long)2L, (long)-2L, (long)-2L}))).Equals(-0.5f));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L}))).Equals(null));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L, (long)2L}))).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        foreach (float number in (List<float>)numbers) {\n            if (smallest == null || number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (secondSmallest == null || number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float first = nums[0];\n            float second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IList<float>) {\n            var list = (IList<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float n in list) {\n                if (n < smallest) {\n                    secondSmallest = smallest;\n                    smallest = n;\n                } else if (n < secondSmallest) {\n                    secondSmallest = n;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        // If the list is empty, return null.\n        if (numbers == null) {\n            return null;\n        }\n\n        // If the list is a list of numbers, return the second smallest number.\n        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            list.Sort();\n            return list[1];\n        }\n\n        // If the list is a list of lists, return the second smallest number.\n        if (numbers is List<List<float>>) {\n            List<List<float>> list = (List<List<float>>)numbers;\n            List<float> flattened = new List<float>();\n            foreach (List<float> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists, return the second smallest number.\n        if (numbers is List<List<List<float>>>) {\n            List<List<List<float>>> list = (List<List<List<float>>>)numbers;\n            List<List<float>> flattened = new List<List<float>>();\n            foreach (List<List<float>> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists of lists, return the second smallest number.\n        if (numbers is List<List<List<List<float>>>>) {\n            List<List<List<List<float>>>> list = (List<List<List<List<float>>>>)numbers;\n            List<List<List<float>>> flattened = new List<List<List<float>>>();\n            foreach (List<List<List<float>>> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists of lists of lists, return the second smallest number.\n        if (n",
    "        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        List<float> nums = (List<float>)numbers;\n        if (nums.Count < 2) return null;\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float num in nums) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num < secondSmallest) {\n                secondSmallest = num;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = float.MaxValue;\n            var secondMin = float.MaxValue;\n            foreach (var num in nums) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            var smallest = nums[0];\n            var secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                var temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (var i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            foreach (float num in (IEnumerable<float>)numbers) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float[] nums = (float[])numbers;\n        if (nums.Length < 2) {\n            return null;\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < nums.Length; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            if (secondMin == float.MaxValue) {\n                return null;\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var nums = numbers as IEnumerable<float>;\n        if (nums == null) {\n            return null;\n        }\n        var numsList = nums.ToList();\n        if (numsList.Count < 2) {\n            return null;\n        }\n        var min = numsList[0];\n        var secondMin = numsList[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < numsList.Count; i++) {\n            var num = numsList[i];\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var sorted = nums.OrderBy(n => n);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var min = list.Min();\n        var secondMin = list.Where(x => x > min).Min();\n        return secondMin;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null)\n            return null;\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2)\n                return null;\n            int min = nums[0];\n            int secondMin = nums[1];\n            if (min > secondMin) {\n                int temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                }\n                else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        }\n        else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2)\n                return null;\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                }\n                else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        }\n        else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2)\n                return null;\n            double min = nums[0];\n            double secondMin = nums[1];\n            if (min > secondMin) {\n                double temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            float smallest = list.First();\n            float secondSmallest = list.First();\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float first = list[0];\n            float second = list[1];\n            if (first > second) {\n                first = list[1];\n                second = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < first) {\n                    second = first;\n                    first = list[i];\n                } else if (list[i] < second) {\n                    second = list[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sortedList = list.OrderBy(x => x);\n            return sortedList.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        // TODO: Implement this function.\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float second = nums[1];\n            if (smallest > second) {\n                float temp = smallest;\n                smallest = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    second = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var second = nums.Where(n => n != min).Min();\n            return second;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = float.MaxValue;\n            float second = float.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second && nums[i] != min) {\n                    second = nums[i];\n                }\n            }\n            if (second == float.MaxValue) {\n                return null;\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            else {\n                var sorted = list.OrderBy(x => x);\n                return sorted.ElementAt(1);\n            }\n        }\n        else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = new List<float>();\n        if (numbers is List<float>) {\n            list = (List<float>)numbers;\n        } else if (numbers is float[]) {\n            list = ((float[])numbers).ToList();\n        } else {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        list.Sort();\n        return list[1];",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var min = float.MaxValue;\n        var secondMin = float.MaxValue;\n        foreach (var num in list) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n        return secondMin;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            float smallest = list.First();\n            float secondSmallest = list.First();\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        // TODO: Implement\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                }\n                else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            var list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            var smallest = float.MaxValue;\n            var secondSmallest = float.MaxValue;\n            foreach (var number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float second = list[1];\n            if (min > second) {\n                min = list[1];\n                second = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    second = min;\n                    min = list[i];\n                } else if (list[i] < second) {\n                    second = list[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var n = (IEnumerable<float>)numbers;\n            var min = n.Min();\n            var min2 = n.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var min = float.MaxValue;\n        var secondMin = float.MaxValue;\n        foreach (var num in list) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            int first = nums[0];\n            int second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float first = nums[0];\n            float second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            double first = nums[0];\n            double second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) return null;\n            var min = list.Min();\n            var min2 = list.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                }\n                else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var smallest = list.Min();\n            return list.Where(n => n != smallest).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            float smallest = list[0];\n            float secondSmallest = list[0];\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            var min = list[0];\n            var secondMin = list[1];\n            if (min > secondMin) {\n                var temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    secondMin = min;\n                    min = list[i];\n                } else if (list[i] < secondMin) {\n                    secondMin = list[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (IEnumerable<float>)numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        var list = new List<float>();\n        if (numbers is List<float>) {\n            list = (List<float>)numbers;\n        } else if (numbers is float[]) {\n            list = ((float[])numbers).ToList();\n        } else {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var smallest = list[0];\n        var secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            var temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (var i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float secondMin = list[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    secondMin = min;\n                    min = list[i];\n                } else if (list[i] < secondMin) {\n                    secondMin = list[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var ordered = list.OrderBy(x => x);\n            return ordered.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float secondMin = list[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    secondMin = min;\n                    min = list[i];\n                }\n                else if (list[i] < secondMin) {\n                    secondMin = list[i];\n                }\n            }\n            return secondMin;\n        }\n        else {\n            return null;\n        }",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        foreach (float number in (float[])numbers) {\n            if (smallest == null) {\n                smallest = number;\n            } else if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (secondSmallest == null || number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = float.MaxValue;\n            var secondMin = float.MaxValue;\n            foreach (var n in list) {\n                if (n < min) {\n                    secondMin = min;\n                    min = n;\n                } else if (n < secondMin) {\n                    secondMin = n;\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) return null;\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            foreach (var num in nums) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        var list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (var number in list) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        // TODO: Implement this function.\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        var list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        float smallest = list[0];\n        float secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            smallest = list[1];\n            secondSmallest = list[0];\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest && number != smallest) {\n                secondSmallest = number;\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() == 0) return null;\n            if (list.Count() == 1) return list.First();\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                }\n                else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) return null;\n            int min = nums[0];\n            int second = nums[1];\n            if (min > second) {\n                int temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) return null;\n            float min = nums[0];\n            float second = nums[1];\n            if (min > second) {\n                float temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2) return null;\n            double min = nums[0];\n            double second = nums[1];\n            if (min > second) {\n                double temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var sorted = list.OrderBy(x => x);\n            var smallest = sorted.First();\n            var secondSmallest = sorted.Skip(1).First();\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[]) numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float num in list) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var first = nums.First();\n            var second = nums.First();\n            foreach (var num in nums) {\n                if (num < first) {\n                    second = first;\n                    first = num;\n                } else if (num < second) {\n                    second = num;\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            float smallest = nums[0];\n            float secondSmallest = nums[0];\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float[] nums = (float[])numbers;\n        if (nums.Length < 2) {\n            return null;\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        for (int i = 2; i < nums.Length; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest == float.MaxValue ? null : secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x > min).Min();\n        }\n        return null;",
    "        if (numbers is IList<float>) {\n            var list = numbers as IList<float>;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers.GetType() != typeof(List<float>)) {\n            return null;\n        }\n        List<float> nums = (List<float>)numbers;\n        if (nums.Count < 2) {\n            return null;\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < nums.Count; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var smallest = list.Min();\n            var secondSmallest = list.Where(x => x != smallest).Min();\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var sorted = list.OrderBy(x => x).ToList();\n        if (sorted.Count < 2) {\n            return null;\n        }\n        return sorted[1];",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) return null;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            float smallest = nums[0];\n            float secondSmallest = nums[0];\n            for (int i = 0; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x > min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var sorted = ((IEnumerable<float>)numbers).OrderBy(x => x);\n            if (sorted.Count() > 1) {\n                return sorted.ElementAt(1);\n            }\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            foreach (float num in nums) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin && num != min) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            double smallest = nums[0];\n            double secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                double temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest =",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var secondSmallest = list.Where(x => x > min).Min();\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is List<float>) {\n            var list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest && number != smallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            foreach (float num in list) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float first = float.MaxValue;\n            float second = float.MaxValue;\n            foreach (float num in nums) {\n                if (num < first) {\n                    second = first;\n                    first = num;\n                } else if (num < second && num != first) {\n                    second = num;\n                }\n            }\n            if (second == float.MaxValue) {\n                return null;\n            }\n            return second;\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        foreach (var number in (IEnumerable<float>)numbers) {\n            if (smallest == null || number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (secondSmallest == null || number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        List<float> list = new List<float>();\n        if (numbers is List<float>) {\n            list = (List<float>)numbers;\n        } else {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        float min = list[0];\n        float secondMin = list[1];\n        if (min > secondMin) {\n            float temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < min) {\n                secondMin = min;\n                min = list[i];\n            } else if (list[i] < secondMin) {\n                secondMin = list[i];\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IList<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = list[0];\n        var secondMin = list[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < min) {\n                secondMin = min;\n                min = list[i];\n            } else if (list[i] < secondMin) {\n                secondMin = list[i];\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var sorted = list.OrderBy(x => x);\n            if (sorted.Count() > 1) {\n                return sorted.ElementAt(1);\n            }\n        }\n        return null;"
  ]
}