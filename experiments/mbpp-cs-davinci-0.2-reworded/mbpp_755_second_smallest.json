{
  "name": "mbpp_755_second_smallest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the second smallest number in a list.\n    public static Nullable<float> SecondSmallest(object numbers) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)2L, (long)-8L, (long)-2L, (long)0L, (long)-2L}))).Equals(-2L));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)1L, (long)-0.5f, (long)0L, (long)2L, (long)-2L, (long)-2L}))).Equals(-0.5f));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L}))).Equals(null));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L, (long)2L}))).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        foreach (float number in (List<float>)numbers) {\n            if (smallest == null || number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (secondSmallest == null || number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float first = nums[0];\n            float second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IList<float>) {\n            var list = (IList<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float n in list) {\n                if (n < smallest) {\n                    secondSmallest = smallest;\n                    smallest = n;\n                } else if (n < secondSmallest) {\n                    secondSmallest = n;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        // If the list is empty, return null.\n        if (numbers == null) {\n            return null;\n        }\n\n        // If the list is a list of numbers, return the second smallest number.\n        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            list.Sort();\n            return list[1];\n        }\n\n        // If the list is a list of lists, return the second smallest number.\n        if (numbers is List<List<float>>) {\n            List<List<float>> list = (List<List<float>>)numbers;\n            List<float> flattened = new List<float>();\n            foreach (List<float> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists, return the second smallest number.\n        if (numbers is List<List<List<float>>>) {\n            List<List<List<float>>> list = (List<List<List<float>>>)numbers;\n            List<List<float>> flattened = new List<List<float>>();\n            foreach (List<List<float>> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists of lists, return the second smallest number.\n        if (numbers is List<List<List<List<float>>>>) {\n            List<List<List<List<float>>>> list = (List<List<List<List<float>>>>)numbers;\n            List<List<List<float>>> flattened = new List<List<List<float>>>();\n            foreach (List<List<List<float>>> sublist in list) {\n                flattened.AddRange(sublist);\n            }\n            return SecondSmallest(flattened);\n        }\n\n        // If the list is a list of lists of lists of lists of lists, return the second smallest number.\n        if (n",
    "        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        List<float> nums = (List<float>)numbers;\n        if (nums.Count < 2) return null;\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float num in nums) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num < secondSmallest) {\n                secondSmallest = num;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = float.MaxValue;\n            var secondMin = float.MaxValue;\n            foreach (var num in nums) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            var smallest = nums[0];\n            var secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                var temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (var i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;"
  ]
}