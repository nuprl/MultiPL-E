{
  "name": "mbpp_229_re_arrange_array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = (int)n - 1;\n        while (i < j) {\n            while (arr[i] < 0 && i < j) {\n                i++;\n            }\n            while (arr[j] >= 0 && i < j) {\n                j--;\n            }\n            if (i < j) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1cc52ae3d5f454d95c3a0c9c3c73dfc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1cc52ae3d5f454d95c3a0c9c3c73dfc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <299451aeac9247c8b9edbdedbf7631b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <299451aeac9247c8b9edbdedbf7631b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = (int)n - 1;\n        while (i < j) {\n            while (arr[i] < 0) {\n                i++;\n            }\n            while (arr[j] >= 0) {\n                j--;\n            }\n            if (i < j) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6dc5c0c180af412fa7fc8418c2f0d587>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6dc5c0c180af412fa7fc8418c2f0d587>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        // return arr;\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <565a6cd85dc14c4d896499b3207876eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <565a6cd85dc14c4d896499b3207876eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a511a550a745417f9f363ce3625d2d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a511a550a745417f9f363ce3625d2d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] temp = new long[n];\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp[j] = arr[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                temp[j] = arr[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            arr[i] = temp[i];\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee48e237566846ea8a075fa7cdc5fea3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee48e237566846ea8a075fa7cdc5fea3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a2952b98c45742208eb7e3cc68601a66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a2952b98c45742208eb7e3cc68601a66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        var result = new List<long>();\n        var positives = new List<long>();\n        var negatives = new List<long>();\n        for (var i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negatives.Add(arr[i]);\n            } else {\n                positives.Add(arr[i]);\n            }\n        }\n        result.AddRange(negatives);\n        result.AddRange(positives);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f3a652dc43e4c78bae2659611b57819>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f3a652dc43e4c78bae2659611b57819>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <426b1909562a468894ad4cb83e1121f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <426b1909562a468894ad4cb83e1121f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        long[] arr1 = arr.ToArray();\n        long[] arr2 = new long[n];\n        long[] arr3 = new long[arr.Count - n];\n        long[] arr4 = new long[arr.Count];\n        long[] arr5 = new long[arr.Count];\n        long[] arr6 = new long[arr.Count];\n        long[] arr7 = new long[arr.Count];\n        long[] arr8 = new long[arr.Count];\n        long[] arr9 = new long[arr.Count];\n        long[] arr10 = new long[arr.Count];\n        long[] arr11 = new long[arr.Count];\n        long[] arr12 = new long[arr.Count];\n        long[] arr13 = new long[arr.Count];\n        long[] arr14 = new long[arr.Count];\n        long[] arr15 = new long[arr.Count];\n        long[] arr16 = new long[arr.Count];\n        long[] arr17 = new long[arr.Count];\n        long[] arr18 = new long[arr.Count];\n        long[] arr19 = new long[arr.Count];\n        long[] arr20 = new long[arr.Count];\n        long[] arr21 = new long[arr.Count];\n        long[] arr22 = new long[arr.Count];\n        long[] arr23 = new long[arr.Count];\n        long[] arr24 = new long[arr.Count];\n        long[] arr25 = new long[arr.Count];\n        long[] arr26 = new long[arr.Count];\n        long[] arr27 = new long[arr.Count];\n        long[] arr28 = new long[arr.Count];\n        long[] arr29 = new long[arr.Count];\n        long[] arr30 = new long[arr.Count];\n        long[] arr31 = new long[arr.Count];\n        long[] arr32 = new long[arr.Count];\n        long[] arr33 = new long[arr.Count];\n        long[] arr34 = new long[arr.Count];\n        long[] arr35 = new long[arr.Count];\n        long[] arr36 = new long[arr.Count];\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4pvjuptj.cs(48,13): error CS1001: Identifier expected\n/tmp/tmp4pvjuptj.cs(48,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> pos = new List<long>();\n        List<long> neg = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        result.AddRange(neg);\n        result.AddRange(pos);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7893f20384a4e35906eedf7460f01a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7893f20384a4e35906eedf7460f01a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <188d508c97db4625b1d78849a4868d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <188d508c97db4625b1d78849a4868d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> negatives = new List<long>();\n        List<long> positives = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negatives.Add(arr[i]);\n            } else {\n                positives.Add(arr[i]);\n            }\n        }\n        List<long> result = new List<long>();\n        result.AddRange(negatives);\n        result.AddRange(positives);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63938841d740464697c9816bd9cc427f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63938841d740464697c9816bd9cc427f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee34a76c37fa4d52a181b9f8bd9ca455>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee34a76c37fa4d52a181b9f8bd9ca455>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var negative = arr.Take((int)n).Where(x => x < 0).ToList();\n        var positive = arr.Take((int)n).Where(x => x >= 0).ToList();\n        return negative.Concat(positive).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <88dbe0b446244c358760ff4a9f5c5568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <88dbe0b446244c358760ff4a9f5c5568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfeda523cff64676bf5d9507e7a23c38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfeda523cff64676bf5d9507e7a23c38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var negative = new List<long>();\n        var positive = new List<long>();\n        for (var i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        var result = new List<long>();\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b97e3fb6a6ea4387a07d3603d8528ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b97e3fb6a6ea4387a07d3603d8528ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9393e6707520406a98fba27dd48cd958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9393e6707520406a98fba27dd48cd958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] temp = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp[i] = arr[i];\n        }\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (temp[i] < 0) {\n                arr[j] = temp[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (temp[i] >= 0) {\n                arr[j] = temp[i];\n                j++;\n            }\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <66a2069a03984edf920b72642988c928>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <66a2069a03984edf920b72642988c928>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for(int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e0646d570de4ec693a05e71473716e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e0646d570de4ec693a05e71473716e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        var neg = arr.Take((int)n).Where(x => x < 0).ToList();\n        var pos = arr.Take((int)n).Where(x => x >= 0).ToList();\n        return neg.Concat(pos).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c9d39d16a1447f2bafa8aeb9dfaf40e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c9d39d16a1447f2bafa8aeb9dfaf40e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        var result = new List<long>();\n        var positive = new List<long>();\n        var negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <983a9070e7f04cf082afeb50b61c716e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <983a9070e7f04cf082afeb50b61c716e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] result = new long[arr.Count];\n        long j = 0;\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result[(int)j] = arr[(int)i];\n                j++;\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result[(int)j] = arr[(int)i];\n                j++;\n            }\n        }\n        return result.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e5c37fde0cb43428f39dca4f9918844>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e5c37fde0cb43428f39dca4f9918844>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                positive.Add(arr[i]);\n            } else {\n                negative.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = (int)n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6482fbb117481c9158d8d2efd463c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6482fbb117481c9158d8d2efd463c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2c74093b02bf48b9a62ede8e7a431f37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (j < n) {\n            if (arr[j] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n            }\n            j++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7118e776d3ca441ba3fc6b639afb8a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7118e776d3ca441ba3fc6b639afb8a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0775e2a1e93a41cc953ae670c9d151df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0775e2a1e93a41cc953ae670c9d151df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negatives = new List<long>();\n        List<long> positives = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negatives.Add(arr[(int)i]);\n            } else {\n                positives.Add(arr[(int)i]);\n            }\n        }\n        negatives.AddRange(positives);\n        return negatives;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a261720d25348368fe4fb99c3029920>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a261720d25348368fe4fb99c3029920>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9393e6707520406a98fba27dd48cd958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9393e6707520406a98fba27dd48cd958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce88304c3f63413fa8c705dee4178191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce88304c3f63413fa8c705dee4178191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        long[] arr1 = new long[n];\n        long[] arr2 = new long[arr.Count - n];\n        long[] arr3 = new long[arr.Count];\n        long j = 0;\n        long k = 0;\n        for (long i = 0; i < arr.Count; i++) {\n            if (i < n) {\n                arr1[i] = arr[i];\n            } else {\n                arr2[j] = arr[i];\n                j++;\n            }\n        }\n        for (long i = 0; i < arr1.Length; i++) {\n            if (arr1[i] < 0) {\n                arr3[k] = arr1[i];\n                k++;\n            }\n        }\n        for (long i = 0; i < arr1.Length; i++) {\n            if (arr1[i] >= 0) {\n                arr3[k] = arr1[i];\n                k++;\n            }\n        }\n        for (long i = 0; i < arr2.Length; i++) {\n            arr3[k] = arr2[i];\n            k++;\n        }\n        return arr3.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpknxpw5xg.cs(19,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpknxpw5xg.cs(21,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] arr1 = arr.ToArray();\n        long[] arr2 = new long[arr1.Length];\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] < 0) {\n                arr2[j] = arr1[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] >= 0) {\n                arr2[j] = arr1[i];\n                j++;\n            }\n        }\n        return arr2.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd26800fea8f42e4a8798f8e7e5733ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd26800fea8f42e4a8798f8e7e5733ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <188d508c97db4625b1d78849a4868d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <188d508c97db4625b1d78849a4868d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57a5f0cab99b48059b5d09e535497ce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15e526608efc4afbb8b0331a3faa8a23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphpt5qril.cs(26,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <83ed672dfcc346aca36dbc717037f34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <83ed672dfcc346aca36dbc717037f34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f48eff5acedc42de87bbd9888cb56f01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f48eff5acedc42de87bbd9888cb56f01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        List<long> result = new List<long>();\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4c3b2e67286434a8a09b8e7db2a561b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4c3b2e67286434a8a09b8e7db2a561b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                negative.Add(arr[(int)i]);\n            } else {\n                positive.Add(arr[(int)i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <441aed60e21e49f5b52d1261ad1a3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <441aed60e21e49f5b52d1261ad1a3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f833bef847e6494d8bc628d106959448>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f833bef847e6494d8bc628d106959448>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1bd013207e84b0ea994279dcdaf8195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var negative = new List<long>();\n        var positive = new List<long>();\n        for (var i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        var result = new List<long>();\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b97e3fb6a6ea4387a07d3603d8528ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b97e3fb6a6ea4387a07d3603d8528ce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e0b2e265db74620a9b140e6237ce9b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e0b2e265db74620a9b140e6237ce9b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] result = new long[arr.Count];\n        int i = 0;\n        int j = arr.Count - 1;\n        foreach (long num in arr) {\n            if (num < 0) {\n                result[i] = num;\n                i++;\n            } else {\n                result[j] = num;\n                j--;\n            }\n        }\n        return result.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b780cd7639f41d28b7cdcca3917df00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b780cd7639f41d28b7cdcca3917df00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        var result = new List<long>();\n        var negative = new List<long>();\n        var positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53f381b323e54cefa8c3d9754d89801d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53f381b323e54cefa8c3d9754d89801d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1a4fe3fc2935452f9921e7b1843844e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1a4fe3fc2935452f9921e7b1843844e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < arr.Count && j < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr.RemoveAt(i);\n                arr.Insert(j, temp);\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7eec407885f4eacbd230a8c9078e684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7eec407885f4eacbd230a8c9078e684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var negative = arr.Take((int)n).Where(x => x < 0).ToList();\n        var positive = arr.Take((int)n).Where(x => x >= 0).ToList();\n        var result = new List<long>();\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fddaa54d9f8f423499b10e6a5ed14c3b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fddaa54d9f8f423499b10e6a5ed14c3b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var left = 0;\n        var right = n - 1;\n        while (left < right) {\n            while (arr[left] < 0 && left < right) {\n                left++;\n            }\n            while (arr[right] >= 0 && left < right) {\n                right--;\n            }\n            if (left < right) {\n                var temp = arr[left];\n                arr[left] = arr[right];\n                arr[right] = temp;\n                left++;\n                right--;\n            }\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbdh7vn6s.cs(18,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbdh7vn6s.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbdh7vn6s.cs(24,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <47f2646135364e559dc9b718e7cb64e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <47f2646135364e559dc9b718e7cb64e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negatives = new List<long>();\n        List<long> positives = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negatives.Add(arr[i]);\n            } else {\n                positives.Add(arr[i]);\n            }\n        }\n        negatives.AddRange(positives);\n        return negatives;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <912d6dfceeb940c59e615d90b39e6dc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <912d6dfceeb940c59e615d90b39e6dc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        long[] a = new long[n];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while(i < n) {\n            if(arr[i] < 0) {\n                a[j] = arr[i];\n                j++;\n            } else {\n                a[n-1-k] = arr[i];\n                k++;\n            }\n            i++;\n        }\n        return a.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2987038ec98448e6ae12a28b73b3b34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2987038ec98448e6ae12a28b73b3b34e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfc9be35426241e68d415373712ec538>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfc9be35426241e68d415373712ec538>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <456dbd95a1f14749b3dc3d1695512690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] < 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] >= 0) {\n                result.Add(arr[(int)i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f83ae4fee804b53b941eb85b3fc1958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                positive.Add(arr[i]);\n            } else {\n                negative.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aa746f83ef1b4f5bbbfbd188fa688fad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aa746f83ef1b4f5bbbfbd188fa688fad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> res = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                res.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                res.Add(arr[i]);\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <273d15fbbd85481a92192bc6c86ed22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <273d15fbbd85481a92192bc6c86ed22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a511a550a745417f9f363ce3625d2d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a511a550a745417f9f363ce3625d2d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c97385386fa64a719d930a8502ae0128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce852c30ab43470095cc43d95f8cce94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a035332a5bd4cf99000b9feb00dd738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (j < n) {\n            if (arr[j] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n            }\n            j++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7118e776d3ca441ba3fc6b639afb8a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7118e776d3ca441ba3fc6b639afb8a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b32ff0e29b14aa0bd719e34df97cc14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc090d868b5e42edbc7abd613a935c1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5105988efaf549e484786ff2077086fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        var neg = arr.Where(x => x < 0).ToList();\n        var pos = arr.Where(x => x >= 0).ToList();\n        var res = new List<long>();\n        res.AddRange(neg);\n        res.AddRange(pos);\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be7afa2d4c80440a844b9b21d82a8810>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be7afa2d4c80440a844b9b21d82a8810>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = (int)n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a2086de1bffc4a0fa32aa4e80d00a648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a2086de1bffc4a0fa32aa4e80d00a648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphpt5qril.cs(26,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0vcutulc.cs(25,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2186b02ce2594699be80fcd937adf746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dd9d184699345edacda6eaa943c9e89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        long[] temp = new long[n];\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp[j] = arr[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                temp[j] = arr[i];\n                j++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            arr[i] = temp[i];\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee48e237566846ea8a075fa7cdc5fea3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ee48e237566846ea8a075fa7cdc5fea3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        for (int i = 0; i < n; i++) {\n            result.Add(negative[i]);\n        }\n        for (int i = n; i < arr.Count; i++) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122843,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0vcutulc.cs(25,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f833bef847e6494d8bc628d106959448>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f833bef847e6494d8bc628d106959448>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce88304c3f63413fa8c705dee4178191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce88304c3f63413fa8c705dee4178191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <33f7316da6ce40b89a04a6fa6f54474d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
      "timestamp": 1665517256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2902d88a944e91adb3d9a514549925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}