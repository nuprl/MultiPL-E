{
  "name": "mbpp_99_decimal_to_binary",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference not set to an instance of an object\n  at Problem.Main (System.String[] args) [0x00008] in <aa6a5403f6264cd2bcce9589ffa5faee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object\n  at Problem.Main (System.String[] args) [0x00008] in <aa6a5403f6264cd2bcce9589ffa5faee>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Insert(0, n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr_t0_8a.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code here\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d3ab677b85485fa5692332fcff05fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d3ab677b85485fa5692332fcff05fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code here\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d3ab677b85485fa5692332fcff05fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d3ab677b85485fa5692332fcff05fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code here.\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870d3220c2e34052ae0bebc95fe3fe22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870d3220c2e34052ae0bebc95fe3fe22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // TODO: Implement this function\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <170168df839044df9185c802a6b6afdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <170168df839044df9185c802a6b6afdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2) + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Insert(0, n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n != 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67a2dbae7e08430e9aba3ebf4df4762a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67a2dbae7e08430e9aba3ebf4df4762a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzx5jrrqs.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr_t0_8a.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80d22a95eaad4c698f499ad4b46d9a22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80d22a95eaad4c698f499ad4b46d9a22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append((n & 1) == 1 ? '1' : '0');\n            n >>= 1;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b81e0186fc094f5b9a03c8620c05190c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b81e0186fc094f5b9a03c8620c05190c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr_t0_8a.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2).ToString() + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return string.Join(\"\", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr_t0_8a.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code here.\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870d3220c2e34052ae0bebc95fe3fe22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870d3220c2e34052ae0bebc95fe3fe22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2) + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n = n / 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return Reverse(sb.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr_t0_8a.cs(16,16): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9b27d7f6a26461b8edc0a610383d04c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string s = \"\";\n        while (n > 0) {\n            s = (n % 2) + s;\n            n /= 2;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var result = new StringBuilder();\n        while (n > 0) {\n            result.Append(n % 2);\n            n /= 2;\n        }\n        return new string(result.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        // Your code goes here.\n        return Convert.ToString(n, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1666124314,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = (n % 2).ToString() + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        var sb = new StringBuilder();\n        while (n > 0) {\n            sb.Append(n % 2);\n            n /= 2;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (n % 2).ToString() + result;\n            n /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}