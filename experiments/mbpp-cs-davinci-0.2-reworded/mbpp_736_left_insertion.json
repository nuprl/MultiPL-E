{
  "name": "mbpp_736_left_insertion",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/csthon-exercises/data-structures-and-algorithms/csthon-data-structure-exercise-24.php\n    public static long LeftInsertion(List<long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] < x) lo = mid + 1;\n            else hi = mid - 1;\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count;\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x <= a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        int m = 0;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            }\n            if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x <= a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) return m;\n            if (a[(int)m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return r;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            }\n            if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int low = 0;\n        int high = n - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x > a[mid]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a[(int)mid] == x) return mid;\n            if (a[(int)mid] > x) r = mid - 1;\n            else l = mid + 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        // Binary search\n        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] >= x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long lo = 0, hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[mid] < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        // Binary search\n        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[mid] >= x) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (x > a[(int)mid]) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x <= a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        // Binary search for the insertion point\n        long low = 0;\n        long high = a.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            }\n            if (a[(int)mid] > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a[m] == x) return m;\n            if (a[m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) return m;\n            if (a[(int)m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int low = 0;\n        int high = a.Count - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        int m = 0;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) return m;\n            if (a[(int)m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) return m;\n            if (a[(int)m] > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            }\n            else if (a[(int)mid] > x) {\n                right = mid - 1;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] >= x) r = m;\n            else l = m + 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x <= a[(int)mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int l = 0, r = a.Count;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int low = 0;\n        int high = a.Count - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) return m;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long low = 0;\n        long high = a.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long l = -1, r = a.Count;\n        while (r - l > 1) {\n            long m = (l + r) / 2;\n            if (a[(int)m] >= x) {\n                r = m;\n            } else {\n                l = m;\n            }\n        }\n        return r;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        long mid = 0;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            }\n            else if (a[(int)mid] > x) {\n                right = mid - 1;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[mid] < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x <= a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;"
  ]
}