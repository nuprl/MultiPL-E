{
  "name": "mbpp_431_common_element",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    public static Nullable<bool> CommonElement(object list1, object list2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CommonElement((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new object(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals(true));\n    Debug.Assert(CommonElement((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new object(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))).Equals(null));\n    Debug.Assert(CommonElement((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})), (new object(new string[]{(string)\"d\", (string)\"b\", (string)\"e\"}))).Equals(true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> list1Int = (List<int>)list1;\n            List<int> list2Int = (List<int>)list2;\n            return list1Int.Intersect(list2Int).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> list1String = (List<string>)list1;\n            List<string> list2String = (List<string>)list2;\n            return list1String.Intersect(list2String).Any();\n        }\n        if (list1.GetType() == typeof(List<char>)) {\n            List<char> list1Char = (List<char>)list1;\n            List<char> list2Char = (List<char>)list2;\n            return list1Char.Intersect(list2Char).Any();\n        }\n        return null;",
    "        // If either list is null, return null.\n        if (list1 == null || list2 == null) {\n            return null;\n        }\n        // If either list is empty, return false.\n        if (list1.Count() == 0 || list2.Count() == 0) {\n            return false;\n        }\n        // If the lists are the same, return true.\n        if (list1 == list2) {\n            return true;\n        }\n        // If the lists are not the same, check if they have any common elements.\n        foreach (object element in list1) {\n            if (list2.Contains(element)) {\n                return true;\n            }\n        }\n        // If no common elements are found, return false.\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1 is int[] && list2 is int[]) {\n            int[] a = (int[])list1;\n            int[] b = (int[])list2;\n            for (int i = 0; i < a.Length; i++) {\n                for (int j = 0; j < b.Length; j++) {\n                    if (a[i] == b[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (list1 is string[] && list2 is string[]) {\n            string[] a = (string[])list1;\n            string[] b = (string[])list2;\n            for (int i = 0; i < a.Length; i++) {\n                for (int j = 0; j < b.Length; j++) {\n                    if (a[i] == b[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            var list1Int = (List<int>)list1;\n            var list2Int = (List<int>)list2;\n            return list1Int.Intersect(list2Int).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            var list1String = (List<string>)list1;\n            var list2String = (List<string>)list2;\n            return list1String.Intersect(list2String).Any();\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            var list1Int = (List<int>)list1;\n            var list2Int = (List<int>)list2;\n            return list1Int.Intersect(list2Int).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            var list1String = (List<string>)list1;\n            var list2String = (List<string>)list2;\n            return list1String.Intersect(list2String).Any();\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1 is IEnumerable<object> && list2 is IEnumerable<object>) {\n            var set1 = new HashSet<object>((IEnumerable<object>)list1);\n            var set2 = new HashSet<object>((IEnumerable<object>)list2);\n            return set1.Overlaps(set2);\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> l1 = (List<int>)list1;\n        List<int> l2 = (List<int>)list2;\n        foreach (int i in l1) {\n            if (l2.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        // If the lists are null, return null.\n        if (list1 == null || list2 == null) {\n            return null;\n        }\n\n        // If the lists are not arrays, return null.\n        if (!(list1 is Array) || !(list2 is Array)) {\n            return null;\n        }\n\n        // Cast the lists to arrays.\n        Array array1 = (Array)list1;\n        Array array2 = (Array)list2;\n\n        // If the arrays are empty, return false.\n        if (array1.Length == 0 || array2.Length == 0) {\n            return false;\n        }\n\n        // If the arrays are not the same type, return null.\n        if (array1.GetType() != array2.GetType()) {\n            return null;\n        }\n\n        // If the arrays are not the same length, return null.\n        if (array1.Length != array2.Length) {\n            return null;\n        }\n\n        // If the arrays are not the same type, return null.\n        if (array1.GetType() != array2.GetType()) {\n            return null;\n        }\n\n        // If the arrays are not the same length, return null.\n        if (array1.Length != array2.Length) {\n            return null;\n        }\n\n        // If the arrays are not the same type, return null.\n        if (array1.GetType() != array2.GetType()) {\n            return null;\n        }\n\n        // If the arrays are not the same length, return null.\n        if (array1.Length != array2.Length) {\n            return null;\n        }\n\n        // If the arrays are not the same type, return null.\n        if (array1.GetType() != array2.GetType()) {\n            return null;\n        }\n\n        // If the arrays are not the same length, return null.\n        if (array1.Length != array2.Length) {\n            return null;\n        }\n\n        // If the arrays are not the same type, return null.\n        if (array1.GetType() != array2.GetType()) {\n            return null;\n        }\n\n        // If the arrays are not",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> list1Int = (List<int>)list1;\n            List<int> list2Int = (List<int>)list2;\n            return list1Int.Intersect(list2Int).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> list1String = (List<string>)list1;\n            List<string> list2String = (List<string>)list2;\n            return list1String.Intersect(list2String).Any();\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(int[])) {\n            int[] array1 = (int[])list1;\n            int[] array2 = (int[])list2;\n            for (int i = 0; i < array1.Length; i++) {\n                for (int j = 0; j < array2.Length; j++) {\n                    if (array1[i] == array2[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (list1.GetType() == typeof(string[])) {\n            string[] array1 = (string[])list1;\n            string[] array2 = (string[])list2;\n            for (int i = 0; i < array1.Length; i++) {\n                for (int j = 0; j < array2.Length; j++) {\n                    if (array1[i] == array2[j]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n\n        var list1Enumerator = ((IEnumerable<object>)list1).GetEnumerator();\n        var list2Enumerator = ((IEnumerable<object>)list2).GetEnumerator();\n\n        while (list1Enumerator.MoveNext()) {\n            while (list2Enumerator.MoveNext()) {\n                if (list1Enumerator.Current == list2Enumerator.Current) {\n                    return true;\n                }\n            }\n        }\n\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        var list1Type = list1.GetType();\n        var list2Type = list2.GetType();\n        if (list1Type != list2Type) {\n            return null;\n        }\n        if (list1Type == typeof(string)) {\n            return ((string)list1).Intersect((string)list2).Any();\n        }\n        if (list1Type == typeof(int[])) {\n            return ((int[])list1).Intersect((int[])list2).Any();\n        }\n        if (list1Type == typeof(List<int>)) {\n            return ((List<int>)list1).Intersect((List<int>)list2).Any();\n        }\n        return null;",
    "        // Return true if there is a common element, false if there is not, and null if the lists are not of the same type.\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1 is int[]) {\n            int[] list1_int = (int[])list1;\n            int[] list2_int = (int[])list2;\n            foreach (int i in list1_int) {\n                foreach (int j in list2_int) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        } else if (list1 is string[]) {\n            string[] list1_string = (string[])list1;\n            string[] list2_string = (string[])list2;\n            foreach (string i in list1_string) {\n                foreach (string j in list2_string) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        } else if (list1 is double[]) {\n            double[] list1_double = (double[])list1;\n            double[] list2_double = (double[])list2;\n            foreach (double i in list1_double) {\n                foreach (double j in list2_double) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        } else if (list1 is char[]) {\n            char[] list1_char = (char[])list1;\n            char[] list2_char = (char[])list2;\n            foreach (char i in list1_char) {\n                foreach (char j in list2_char) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        } else if (list1 is bool[]) {\n            bool[] list1_bool = (bool[])list1;\n            bool[] list2_bool = (bool[])list2;\n            foreach (bool i in list",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        var list1Enumerator = ((IEnumerable<object>)list1).GetEnumerator();\n        var list2Enumerator = ((IEnumerable<object>)list2).GetEnumerator();\n        while (list1Enumerator.MoveNext()) {\n            while (list2Enumerator.MoveNext()) {\n                if (list1Enumerator.Current == list2Enumerator.Current) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> l1 = (List<int>)list1;\n        List<int> l2 = (List<int>)list2;\n        HashSet<int> set = new HashSet<int>(l1);\n        foreach (int i in l2) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> list1Int = (List<int>)list1;\n        List<int> list2Int = (List<int>)list2;\n        if (list1Int.Count == 0 || list2Int.Count == 0) {\n            return false;\n        }\n        HashSet<int> set = new HashSet<int>();\n        foreach (int i in list1Int) {\n            set.Add(i);\n        }\n        foreach (int i in list2Int) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> list1_ = (List<int>)list1;\n        List<int> list2_ = (List<int>)list2;\n        foreach (int i in list1_) {\n            foreach (int j in list2_) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(int[])) {\n            int[] l1 = (int[])list1;\n            int[] l2 = (int[])list2;\n            foreach (int i in l1) {\n                foreach (int j in l2) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (list1.GetType() == typeof(string[])) {\n            string[] l1 = (string[])list1;\n            string[] l2 = (string[])list2;\n            foreach (string i in l1) {\n                foreach (string j in l2) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> l1 = (List<int>)list1;\n        List<int> l2 = (List<int>)list2;\n        return l1.Intersect(l2).Any();",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> list1_int = (List<int>)list1;\n        List<int> list2_int = (List<int>)list2;\n        HashSet<int> set = new HashSet<int>();\n        foreach (int i in list1_int) {\n            set.Add(i);\n        }\n        foreach (int i in list2_int) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;"
  ]
}