{
  "name": "mbpp_74_is_samepatterns",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether it follows the sequence given in the patterns list.\n    public static bool IsSamepatterns(List<string> colors, List<string> patterns) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"green\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (true));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (false));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\"}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        return false;",
    "        if (colors.Count != patterns.Count) return false;\n        for (int i = 0; i < patterns.Count; i++) {\n            if (patterns[i] == \"even\") {\n                if (colors[i].Length % 2 != 0) return false;\n            } else if (patterns[i] == \"odd\") {\n                if (colors[i].Length % 2 == 0) return false;\n            }\n        }\n        return true;",
    "        // Write your code here.\n        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < colors.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < colors.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        return false;",
    "        bool isSame = true;\n        for (int i = 0; i < patterns.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                isSame = false;\n                break;\n            }\n        }\n        return isSame;",
    "        // Write your code here\n        return true;",
    "        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < colors.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        for (int i = 0; i < patterns.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int i = 0;\n        int j = 0;\n        while (i < colors.Count && j < patterns.Count) {\n            if (colors[i] == patterns[j]) {\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return i == colors.Count;",
    "        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < colors.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < colors.Count; i++) {\n            if (colors[i] != patterns[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        return false;",
    "        var pattern = string.Join(\"\", patterns);\n        var color = string.Join(\"\", colors);\n        return color.Contains(pattern);",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        return true;",
    "        // Write your code here\n        if (colors.Count == 0) {\n            return true;\n        }\n        if (patterns.Count == 0) {\n            return false;\n        }\n        if (colors.Count != patterns.Count) {\n            return false;\n        }\n        for (int i = 0; i < patterns.Count; i++) {\n            if (patterns[i] == \"even\") {\n                if (colors[i].Length % 2 != 0) {\n                    return false;\n                }\n            } else if (patterns[i] == \"odd\") {\n                if (colors[i].Length % 2 == 0) {\n                    return false;\n                }\n            } else if (patterns[i] == \"up\") {\n                if (colors[i] != colors[i].ToUpper()) {\n                    return false;\n                }\n            } else if (patterns[i] == \"down\") {\n                if (colors[i] != colors[i].ToLower()) {\n                    return false;\n                }\n            }\n        }\n        return true;"
  ]
}