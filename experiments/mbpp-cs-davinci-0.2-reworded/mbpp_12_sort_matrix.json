{
  "name": "mbpp_12_sort_matrix",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            int minIndex = sums.IndexOf(sums.Min());\n            sorted.Add(M[minIndex]);\n            sums.RemoveAt(minIndex);\n            M.RemoveAt(minIndex);\n        }\n        return sorted;",
    "        var N = M.Count;\n        var M2 = new List<List<long>>(M);\n        for (int i = 0; i < N; i++) {\n            var row = M[i];\n            var sum = row.Sum();\n            M2[i] = new List<long> { sum, i };\n        }\n        M2.Sort((a, b) => a[0].CompareTo(b[0]));\n        var M3 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            var row = M[M2[i][1]];\n            M3.Add(row);\n        }\n        return M3;",
    "        // Sort the rows of M according to the sum of the elements in each row.\n        // Return the sorted matrix.\n        //\n        // Example:\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        // SortMatrix(M) = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        //\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n        // SortMatrix(M) = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n        //\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n        // SortMatrix(M) = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n        //\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n        // SortMatrix(M) = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n        //\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\n        // SortMatrix(M) = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\n        //\n        // M = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16",
    "        var sorted = M.Select((r, i) => new { Row = r, Index = i })\n                      .OrderBy(r => r.Row.Sum())\n                      .Select(r => r.Index)\n                      .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        var sorted = M.Select((row, i) => new { row, i })\n            .OrderBy(x => x.row.Sum())\n            .Select(x => x.i)\n            .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        List<List<long>> sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        var sorted = M.OrderBy(row => row.Sum()).ToList();\n        return sorted;",
    "        // Sort the matrix by the sum of each row\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var rows = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        return rows.Select(x => M[x.i]).ToList();",
    "        var N = M.Count;\n        var M2 = new List<List<long>>();\n        for (var i = 0; i < N; i++) {\n            M2.Add(new List<long>());\n            for (var j = 0; j < N; j++) {\n                M2[i].Add(M[i][j]);\n            }\n        }\n        var sums = new List<long>();\n        for (var i = 0; i < N; i++) {\n            var sum = 0L;\n            for (var j = 0; j < N; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = sums.Select((x, i) => new KeyValuePair<long, int>(x, i)).OrderBy(x => x.Key).ToList();\n        for (var i = 0; i < N; i++) {\n            for (var j = 0; j < N; j++) {\n                M2[i][j] = M[sorted[i].Value][j];\n            }\n        }\n        return M2;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        // Sort the matrix by the sum of each row\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        List<long> sortedSums = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sortedSums.Count; i++) {\n            for (int j = 0; j < sums.Count; j++) {\n                if (sortedSums[i] == sums[j]) {\n                    result.Add(M[j]);\n                    sums[j] = -1;\n                    break;\n                }\n            }\n        }\n        return result;"
  ]
}