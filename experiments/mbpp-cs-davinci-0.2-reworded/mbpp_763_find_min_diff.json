{
  "name": "mbpp_763_find_min_diff",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    public static long FindMinDiff(long arr, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMinDiff((long)Tuple.Create(1L, 5L, 3L, 19L, 18L, 25L), (6L)) == (1L));\n    Debug.Assert(FindMinDiff((long)Tuple.Create(4L, 3L, 2L, 6L), (4L)) == (1L));\n    Debug.Assert(FindMinDiff((long)Tuple.Create(30L, 5L, 20L, 9L), (4L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long minDiff = long.MaxValue;\n        long diff = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++) {\n                diff = Math.Abs(arr[i] - arr[j]);\n                if (diff < minDiff) {\n                    minDiff = diff;\n                }\n            }\n        }\n        return minDiff;",
    "        // Sort array in non-decreasing order\n        Array.Sort(arr);\n\n        // Initialize difference as infinite\n        long diff = long.MaxValue;\n\n        // Find the min diff by comparing adjacent\n        // pairs in sorted array\n        for (int i = 0; i < n - 1; i++)\n            if (arr[i + 1] - arr[i] < diff)\n                diff = arr[i + 1] - arr[i];\n\n        // Return min diff\n        return diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = arr[0];\n        for (long i = 0; i < n - 1; i++) {\n            if (arr[i + 1] - arr[i] < diff) {\n                diff = arr[i + 1] - arr[i];\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        // Sort array in non-decreasing order\n        Array.Sort(arr);\n\n        // Initialize difference as infinite\n        long diff = long.MaxValue;\n\n        // Find the min diff by comparing adjacent\n        // pairs in sorted array\n        for (int i = 0; i < n - 1; i++)\n            if (arr[i + 1] - arr[i] < diff)\n                diff = arr[i + 1] - arr[i];\n\n        // Return min diff\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long min_diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < min_diff) {\n                    min_diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return min_diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (arr[i] == arr[j]) {\n                    return 0;\n                }\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        long min = long.MaxValue;\n        long max = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        long[] bucket = new long[max - min + 1];\n        for (long i = 0; i < n; i++) {\n            bucket[arr[i] - min]++;\n        }\n        long prev = 0;\n        for (long i = 0; i < bucket.Length; i++) {\n            if (bucket[i] > 0) {\n                if (prev != 0) {\n                    diff = Math.Min(diff, i - prev);\n                }\n                prev = i;\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        long diff = long.MaxValue;\n        for (long i = 0; i < n - 1; i++) {\n            for (long j = i + 1; j < n; j++) {\n                if (Math.Abs(arr[i] - arr[j]) < diff) {\n                    diff = Math.Abs(arr[i] - arr[j]);\n                }\n            }\n        }\n        return diff;",
    "        // Sort array in non-decreasing order\n        Array.Sort(arr);\n        // Initialize difference as infinite\n        long diff = long.MaxValue;\n        // Find the min diff by comparing adjacent\n        // pairs in sorted array\n        for (int i = 0; i < n - 1; i++)\n            if (arr[i + 1] - arr[i] < diff)\n                diff = arr[i + 1] - arr[i];\n        // Return min diff\n        return diff;"
  ]
}