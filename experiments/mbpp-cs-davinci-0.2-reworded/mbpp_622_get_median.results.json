{
  "name": "mbpp_622_get_median",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg9oktc5b.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpg9oktc5b.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        // If the median is present in one of the arrays, then return it.\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n\n        // If m1 < m2, then median must exist in arr1[m1....] and arr2[....m2]\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        // If m1 > m2, then median must exist in arr1[....m1] and arr2[m2...]\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp09d72tei.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp09d72tei.cs(23,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputbivhs1.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmputbivhs1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb4pjk272.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpb4pjk272.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeidp3tfh.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpeidp3tfh.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplivnfc16.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmplivnfc16.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphehyxsiz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphehyxsiz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputbivhs1.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmputbivhs1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnqfb7dbk.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpnqfb7dbk.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu3swtwpy.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpu3swtwpy.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((n / 2) - 1, n / 2 + 1), arr1.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange(n / 2, n / 2 + 1), arr1.GetRange(0, n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz962ffo9.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpz962ffo9.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpz962ffo9.cs(30,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(30,61): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(30,90): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(32,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(32,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(32,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(36,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(36,57): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(36,86): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(38,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(38,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpz962ffo9.cs(38,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkojzv539.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpkojzv539.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpczfvumfz.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpczfvumfz.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbsufpyi9.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbsufpyi9.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgsfrs4_.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmphgsfrs4_.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwsg8zav1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpwsg8zav1.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2, (int)n - (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2, (int)n - (int)n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1, (int)n - (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1, (int)n - (int)n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfm2q2d7s.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpfm2q2d7s.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp39puwfta.cs(24,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp39puwfta.cs(24,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp39puwfta.cs(26,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp39puwfta.cs(31,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0mccv4fr.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0mccv4fr.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj44vwuy8.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj44vwuy8.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo85dueco.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpo85dueco.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfudtx5i9.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpfudtx5i9.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpasvotj62.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpasvotj62.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw892ty2k.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpw892ty2k.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        var m1 = Median(arr1, n);\n        var m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp604vempy.cs(21,18): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp604vempy.cs(22,18): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9sth_bgn.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp9sth_bgn.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0x_0mvgm.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp0x_0mvgm.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0x_0mvgm.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp0x_0mvgm.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8189dwov.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8189dwov.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw892ty2k.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpw892ty2k.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_cuwrx3w.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp_cuwrx3w.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw892ty2k.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpw892ty2k.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9l9pbrw.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpy9l9pbrw.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        else\n            return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz4yivltr.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpz4yivltr.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), (int)n - (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), (int)n - (int)n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), (int)n - (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), (int)n - (int)n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwqv6fm2.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmptwqv6fm2.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp97b0e_it.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp97b0e_it.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (int)(n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt4oj4pq7.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpt4oj4pq7.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_po714ey.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp_po714ey.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoyie1bgx.cs(27,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(29,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(33,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1ygg2ktg.cs(17,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp1ygg2ktg.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptccuf_vl.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmptccuf_vl.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long m1 = -1;\n        long m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp573u175v.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp573u175v.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdyqwgkkh.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpdyqwgkkh.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx93fdkam.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpx93fdkam.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt_zfm12t.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt_zfm12t.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp44jh8euj.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp44jh8euj.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw57vlwi3.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpw57vlwi3.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2rr37iqg.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp2rr37iqg.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp2rr37iqg.cs(30,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(30,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(30,88): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(32,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(32,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(32,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(36,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(36,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(36,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(38,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(38,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2rr37iqg.cs(38,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp86laltgf.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp86laltgf.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5f84ikrr.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp5f84ikrr.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9sth_bgn.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp9sth_bgn.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyrs2w0_z.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpyrs2w0_z.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq5cabqkm.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpq5cabqkm.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplftmf_5y.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmplftmf_5y.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpln10p4x_.cs(17,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpln10p4x_.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj44vwuy8.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj44vwuy8.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpag2o77s1.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpag2o77s1.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp79uodv4b.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp79uodv4b.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        // if n is odd, then median is middle element of sorted array\n        // else median is average of middle two elements of sorted array\n        if (n % 2 == 1)\n            return (float)GetMedianUtil(arr1, arr2, n, 0, n - 1);\n        else\n            return (GetMedianUtil(arr1, arr2, n, 0, n - 1) +\n                    GetMedianUtil(arr1, arr2, n, 1, n)) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfsot7ry9.cs(14,27): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n/tmp/tmpfsot7ry9.cs(16,21): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n/tmp/tmpfsot7ry9.cs(17,21): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qaq7ghv.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7qaq7ghv.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        else\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0p_48gej.cs(17,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0p_48gej.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcpbvikz_.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpcpbvikz_.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv6vi7gc_.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpv6vi7gc_.cs(22,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp684a8tba.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp684a8tba.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        var m1 = Median(arr1, n);\n        var m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (int)(n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9bj6os78.cs(20,18): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp9bj6os78.cs(21,18): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyzf4kam0.cs(25,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyzf4kam0.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyzf4kam0.cs(27,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyzf4kam0.cs(31,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj44vwuy8.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj44vwuy8.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfudtx5i9.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpfudtx5i9.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv_ynnxu6.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpv_ynnxu6.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq5cabqkm.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpq5cabqkm.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9sth_bgn.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp9sth_bgn.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjgnbyuzo.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjgnbyuzo.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpskt4yl5_.cs(18,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpskt4yl5_.cs(19,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8189dwov.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8189dwov.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0x_0mvgm.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp0x_0mvgm.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuue5s_4u.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpuue5s_4u.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj60oa64c.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj60oa64c.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1;\n        long m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5n4_512x.cs(26,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(28,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(32,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long m1 = -1;\n        long m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        if (n == 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        if (m1 > m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2 + 1);\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk5xrcskq.cs(18,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpk5xrcskq.cs(19,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpk5xrcskq.cs(24,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(24,82): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(26,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(26,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(30,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(30,77): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(32,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpk5xrcskq.cs(32,77): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpce8n056w.cs(20,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpce8n056w.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbiws5ixz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbiws5ixz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcpbvikz_.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpcpbvikz_.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphxgyyvo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpphxgyyvo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea40c425df2b45c3964f0dda4dc23413>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea40c425df2b45c3964f0dda4dc23413>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe85_suyy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpe85_suyy.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphxgyyvo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpphxgyyvo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyrs2w0_z.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpyrs2w0_z.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdcui163.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpzdcui163.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9sth_bgn.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp9sth_bgn.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpue9_whft.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpue9_whft.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpue9_whft.cs(26,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(26,82): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(27,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(27,72): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(31,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(31,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(32,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpue9_whft.cs(32,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphv4wawif.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmphv4wawif.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvang4ggf.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpvang4ggf.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoyie1bgx.cs(27,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(29,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(33,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (m1 > m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe6ujavfh.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpe6ujavfh.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpag2o77s1.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpag2o77s1.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe453g9bz.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpe453g9bz.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvang4ggf.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpvang4ggf.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcniok0wb.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpcniok0wb.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw2hzx2cr.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpw2hzx2cr.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppn9t_j9a.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmppn9t_j9a.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count = 0;\n        long m1 = -1;\n        long m2 = -1;\n        while (count <= n) {\n            count++;\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdn8jla3o.cs(28,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdn8jla3o.cs(28,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdn8jla3o.cs(30,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdn8jla3o.cs(34,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpba76vr06.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpba76vr06.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2, (int)n - (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2, (int)n - (int)n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1, (int)n - (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1, (int)n - (int)n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfm2q2d7s.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpfm2q2d7s.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl1hhcj9_.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpl1hhcj9_.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9sth_bgn.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp9sth_bgn.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb3ijea7d.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpb3ijea7d.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpb3ijea7d.cs(30,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(30,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(30,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(32,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(32,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(32,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(36,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(36,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(36,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(38,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(38,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb3ijea7d.cs(38,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8189dwov.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8189dwov.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpskt4yl5_.cs(18,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpskt4yl5_.cs(19,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (int)(n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpit1upct2.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpit1upct2.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        // if n is odd, median is the middle element of the array\n        // if n is even, median is the average of the middle two elements of the array\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvn1zrr_0.cs(17,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpvn1zrr_0.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplznwaozc.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmplznwaozc.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdcui163.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpzdcui163.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphxgyyvo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpphxgyyvo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        var m1 = Median(arr1, n);\n        var m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1l5phi0f.cs(21,18): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp1l5phi0f.cs(22,18): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv5i7ufku.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpv5i7ufku.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpv5i7ufku.cs(22,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(22,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(22,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(24,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(24,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(24,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(28,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(28,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(28,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(30,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(30,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv5i7ufku.cs(30,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpknzywejt.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpknzywejt.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplznwaozc.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmplznwaozc.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps8ofoepd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmps8ofoepd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp79uodv4b.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp79uodv4b.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi65owlem.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpi65owlem.cs(22,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj60oa64c.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj60oa64c.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt5c18x4i.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt5c18x4i.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppn2bs2mv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmppn2bs2mv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), (int)n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), (int)n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0w5y8ksi.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0w5y8ksi.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbiws5ixz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbiws5ixz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw57vlwi3.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpw57vlwi3.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppn9t_j9a.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmppn9t_j9a.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long m1 = -1;\n        long m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp589oytmo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp589oytmo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj44vwuy8.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj44vwuy8.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7zqdr48.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpt7zqdr48.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj44vwuy8.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj44vwuy8.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv184z58h.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpv184z58h.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphxgyyvo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpphxgyyvo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdcui163.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpzdcui163.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int) n / 2 - 1, (int) n - (int) n / 2 + 1), arr2.GetRange(0, (int) n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int) n / 2, (int) n - (int) n / 2), arr2.GetRange(0, (int) n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int) n / 2 + 1), arr2.GetRange((int) n / 2 - 1, (int) n - (int) n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int) n / 2 + 1), arr2.GetRange((int) n / 2, (int) n - (int) n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo6w4crvu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpo6w4crvu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}