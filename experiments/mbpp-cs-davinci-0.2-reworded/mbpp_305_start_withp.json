{
  "name": "mbpp_305_start_withp",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    public static string StartWithp(List<string> words) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python PHP\", (string)\"Java JavaScript\", (string)\"c c++\"}))).Equals(Tuple.Create(\"Python\", \"PHP\")));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python Programming\", (string)\"Java Programming\"}))).Equals(Tuple.Create(\"Python\", \"Programming\")));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Pqrst Pqr\", (string)\"qrstuv\"}))).Equals(Tuple.Create(\"Pqrst\", \"Pqr\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return words.Where(w => w.StartsWith('p')).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        return string.Join(\" \", words.Where(x => x.StartsWith(\"p\")));",
    "        return words.Where(x => x.StartsWith(\"p\")).Take(2).Aggregate((x, y) => x + \" \" + y);",
    "        // TODO: implement this function\n        return \"\";",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        string result = \"\";\n        int count = 0;\n        foreach (string word in words) {\n            if (word[0] == 'p') {\n                result += word + \" \";\n                count++;\n            }\n            if (count == 2) {\n                break;\n            }\n        }\n        return result;",
    "        var result = words.Where(w => w.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        // Write your code here\n        return null;",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var wordsStartingWithp = words.Where(word => word.StartsWith(\"p\"));\n        var wordsStartingWithp2 = words.Where(word => word.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", wordsStartingWithp2);",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        return String.Join(\" \", words.Where(x => x[0] == 'p'));",
    "        var result = words.Where(w => w.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2).ToList();\n        return string.Join(\",\", result);",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(w => w.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        // TODO: Implement this function\n        return \"\";"
  ]
}