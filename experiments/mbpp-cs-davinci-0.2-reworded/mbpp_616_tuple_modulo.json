{
  "name": "mbpp_616_tuple_modulo",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which takes two tuples of the same length and performs the element wise modulo.\n    public static long TupleModulo(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleModulo((long)Tuple.Create(10L, 4L, 5L, 6L), (long)Tuple.Create(5L, 6L, 7L, 5L)) == (long)Tuple.Create(0L, 4L, 5L, 1L));\n    Debug.Assert(TupleModulo((long)Tuple.Create(11L, 5L, 6L, 7L), (long)Tuple.Create(6L, 7L, 8L, 6L)) == (long)Tuple.Create(5L, 5L, 6L, 1L));\n    Debug.Assert(TupleModulo((long)Tuple.Create(12L, 6L, 7L, 8L), (long)Tuple.Create(7L, 8L, 9L, 7L)) == (long)Tuple.Create(5L, 6L, 7L, 1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        // Your code here\n        return 0;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        long result = test_tup1 % test_tup2;\n        return result;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        // Your code here\n        return 0;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        return test_tup1 % test_tup2;",
    "        // Your code here\n        return test_tup1 % test_tup2;"
  ]
}