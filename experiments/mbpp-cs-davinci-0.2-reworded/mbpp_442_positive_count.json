{
  "name": "mbpp_442_positive_count",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the ration of positive numbers in a list of integers.\n    public static float PositiveCount(List<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.54f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.69f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (0.56f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        var positives = nums.Where(x => x > 0);\n        return (float)positives.Count() / nums.Count();",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (var n in nums) {\n            if (n > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return (float)count / (float)nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return (float)nums.Where(x => x > 0).Count() / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count += 1;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach(long num in nums) {\n            if(num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        return (float)nums.Count(x => x > 0) / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float positiveCount = 0;\n        float negativeCount = 0;\n        float zeroCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            } else if (num < 0) {\n                negativeCount++;\n            } else {\n                zeroCount++;\n            }\n        }\n        return positiveCount / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (var num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        // Write your code here.\n        return nums.Count(n => n > 0);",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int positive = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positive++;\n            }\n        }\n        return (float)positive / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return nums.Where(x => x > 0).Count() / (float)nums.Count();",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return (float)nums.Where(n => n > 0).Count() / nums.Count();",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long n in nums) {\n            if (n > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int pos = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                pos++;\n            }\n        }\n        return (float)pos / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float pos = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                pos++;\n            }\n        }\n        return pos / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        return nums.Where(n => n > 0).Count() / (float)nums.Count;",
    "        return nums.Where(n => n > 0).Count() / (float)nums.Count;",
    "        float count = 0;\n        foreach (var num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / (float)nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float positiveCount = 0;\n        float negativeCount = 0;\n        float zeroCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            } else if (num < 0) {\n                negativeCount++;\n            } else {\n                zeroCount++;\n            }\n        }\n        return positiveCount / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long n in nums) {\n            if (n > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach(long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        // TODO: Implement this function.\n        return 0;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        // Your code here\n        return 0;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count += 1;\n            }\n        }\n        return count / nums.Count;",
    "        var positive = nums.Where(x => x > 0).Count();\n        return (float)positive / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return nums.Where(x => x > 0).Count() / (float)nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int positiveCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            }\n        }\n        return (float)positiveCount / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int pos = 0;\n        foreach (long n in nums) {\n            if (n > 0) {\n                pos++;\n            }\n        }\n        return (float)pos / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (var num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long n in nums) {\n            if (n > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count += 1;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float positiveCount = 0;\n        float negativeCount = 0;\n        float zeroCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            } else if (num < 0) {\n                negativeCount++;\n            } else {\n                zeroCount++;\n            }\n        }\n        return positiveCount / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float positiveCount = 0;\n        float negativeCount = 0;\n        float zeroCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            } else if (num < 0) {\n                negativeCount++;\n            } else {\n                zeroCount++;\n            }\n        }\n        return positiveCount / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        // Write your code here\n        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float positiveCount = 0;\n        float totalCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            }\n            totalCount++;\n        }\n        return positiveCount / totalCount;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float positiveCount = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                positiveCount++;\n            }\n        }\n        return positiveCount / nums.Count;",
    "        return (float)nums.Count(x => x > 0) / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int pos = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                pos++;\n            }\n        }\n        return (float)pos / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return nums.Where(n => n > 0).Count() / (float)nums.Count();",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        return (float)nums.Where(x => x > 0).Count() / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        // Write your code here.\n        return nums.Where(x => x > 0).Count() / (float)nums.Count();",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        // Your code here\n        return 0;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (var num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        // Write your code here.\n        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int pos = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                pos++;\n            }\n        }\n        return (float)pos / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        // Your code here\n        return 0;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / (float)nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int pos = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                pos++;\n            }\n        }\n        return (float)pos / nums.Count;",
    "        float posCount = 0;\n        float totalCount = nums.Count;\n        foreach (long num in nums) {\n            if (num > 0) {\n                posCount++;\n            }\n        }\n        return posCount / totalCount;",
    "        float count = 0;\n        foreach(long num in nums) {\n            if(num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        float count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count / nums.Count;",
    "        int count = 0;\n        foreach (var num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;",
    "        int count = 0;\n        foreach (long num in nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float)count / nums.Count;"
  ]
}