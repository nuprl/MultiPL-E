{
  "name": "mbpp_597_find_kth",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] > arr2[j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted.\n        // Assume k is valid.\n        // Assume k is not 0.\n        // Assume arr1 and arr2 are not empty.\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count > (k / 2 - 1) ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long mid2 = arr2.Count > (k / 2 - 1) ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (mid1 < mid2) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d3e4eb0a3a948868f8dfc0bbcb9fe46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d3e4eb0a3a948868f8dfc0bbcb9fe46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010a] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d8] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b3] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00120] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010b] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d9] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b3] in <8065ffded0dc4c03b0b1d44ea733642f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00120] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n        var i = Math.Min((int)k / 2, arr1.Count);\n        var j = (int)k - i;\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else if (arr1[i - 1] > arr2[j - 1]) {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        } else {\n            return arr1[i - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count + arr2.Count < k) {\n            return -1;\n        }\n        long k1 = (long)Math.Ceiling((double)k / 2);\n        long k2 = k - k1;\n        if (k1 > arr1.Count) {\n            k1 = arr1.Count;\n            k2 = k - k1;\n        }\n        if (k2 > arr2.Count) {\n            k2 = arr2.Count;\n            k1 = k - k2;\n        }\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000dd] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00101] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011e] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000dd] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00101] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011e] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <83aa825eb4e54714a41b1cb1d3eaf37b>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long a = Math.Min(k / 2, arr1.Count);\n        long b = k - a;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        }\n        else if (arr1[(int)a - 1] > arr2[(int)b - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n        else {\n            return arr1[(int)a - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0ed091093b59464b86743f21a9d78f6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0ed091093b59464b86743f21a9d78f6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = (int)k - (int)i;\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        } else if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n        } else {\n            return arr1[(int)i - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00107] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d5] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (arr1.Count + arr2.Count < k) {\n            return -1;\n        }\n        int mid1 = (int)(k / 2);\n        int mid2 = (int)(k - mid1);\n        if (arr1[mid1 - 1] < arr2[mid2 - 1]) {\n            return FindKth(arr1.GetRange(mid1, arr1.Count - mid1), arr2, k - mid1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(mid2, arr2.Count - mid2), k - mid2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0008a] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d2] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <897c61d010c54404a9d724af7ca97019>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0008a] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d2] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <897c61d010c54404a9d724af7ca97019>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <897c61d010c54404a9d724af7ca97019>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6494660dc4420cb88c8e9045245022>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6494660dc4420cb88c8e9045245022>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long mid = Math.Min(k / 2, arr1.Count);\n        if (arr1[(int)mid - 1] < arr2[(int)mid - 1]) {\n            arr1.RemoveRange(0, (int)mid);\n            return FindKth(arr1, arr2, k - mid);\n        } else {\n            arr2.RemoveRange(0, (int)mid);\n            return FindKth(arr1, arr2, k - mid);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 is shorter than arr2.\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int pa = Math.Min((int)k / 2, arr1.Count);\n        int pb = (int)k - pa;\n        if (arr1[pa - 1] < arr2[pb - 1]) {\n            return FindKth(arr1.GetRange(pa, arr1.Count - pa), arr2, k - pa);\n        } else if (arr1[pa - 1] > arr2[pb - 1]) {\n            return FindKth(arr1, arr2.GetRange(pb, arr2.Count - pb), k - pb);\n        } else {\n            return arr1[pa - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        if (arr1.Count == 1) {\n            if (arr1[0] < arr2[(int)k - 1]) return arr2[(int)k - 1];\n            if (arr1[0] > arr2[(int)k]) return arr2[(int)k];\n            return arr1[0];\n        }\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)j + 1, arr2.Count - (int)j - 1), k - j - 1);\n        } else {\n            return FindKth(arr1.GetRange((int)i + 1, arr1.Count - (int)i - 1), arr2, k - i - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <218a5fce4d3e43ab978a0f2e4d4952eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <218a5fce4d3e43ab978a0f2e4d4952eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count > k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long mid2 = arr2.Count > k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (mid1 < mid2) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var tmp = arr1;\n            arr1 = arr2;\n            arr2 = tmp;\n        }\n        var k1 = Math.Min(k / 2, arr1.Count);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else if (arr1[k1 - 1] > arr2[k2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        } else {\n            return arr1[k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0sf1z8bj.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (arr1[(int)mid1] <= arr2[(int)mid2]) {\n            if (k <= mid1 + mid2) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2) {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c92f47121a9d48569cc2e111808d918c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c92f47121a9d48569cc2e111808d918c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int a = (int)Math.Min(k / 2, arr1.Count);\n        int b = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[a - 1] < arr2[b - 1]) {\n            return FindKth(arr1.GetRange(a, arr1.Count - a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange(b, arr2.Count - b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count > k / 2 - 1 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count > k / 2 - 1 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        else return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Write your code here\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k <= 0) return -1;\n        if (k > arr1.Count + arr2.Count) return -1;\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] <= arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, (int)(arr1.Count - a)), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, (int)(arr2.Count - b)), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long mid1 = Math.Min(k / 2, arr1.Count);\n        long mid2 = k - mid1;\n        if (arr1[(int)mid1 - 1] < arr2[(int)mid2 - 1]) {\n            return FindKth(arr1.GetRange((int)mid1, (int)(arr1.Count - mid1)), arr2, k - mid1);\n        } else if (arr1[(int)mid1 - 1] > arr2[(int)mid2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)mid2, (int)(arr2.Count - mid2)), k - mid2);\n        } else {\n            return arr1[(int)mid1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted\n        // Assume k is in range\n        // Assume arr1 and arr2 are not empty\n        // Assume k is not 0\n        // Assume k is not larger than the sum of the lengths of arr1 and arr2\n        // Assume arr1 and arr2 are not null\n        // Assume k is not null\n        // Assume k is not negative\n        // Assume arr1 and arr2 are not negative\n        // Assume arr1 and arr2 are not zero\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n        // Assume arr1 and arr2 are not null\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp59cn_y7l.cs(10,24): error CS0161: 'Problem.FindKth(List<long>, List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count < k / 2) {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n        if (arr2.Count < k / 2) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        }\n        if (arr1[(int)k / 2 - 1] < arr2[(int)k / 2 - 1]) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        }\n        return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long m1 = Math.Min(k / 2, arr1.Count);\n        long m2 = (int)k - (int)m1;\n        if (arr1[(int)m1 - 1] < arr2[(int)m2 - 1]) {\n            return FindKth(arr1.GetRange((int)m1, (int)arr1.Count - (int)m1), arr2, k - m1);\n        } else if (arr1[(int)m1 - 1] > arr2[(int)m2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)m2, (int)arr2.Count - (int)m2), k - m2);\n        } else {\n            return arr1[(int)m1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(k / 2, arr1.Count);\n        long b = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] <= arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        int i = (int)Math.Min(k / 2, arr1.Count - 1);\n        int j = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[i] < arr2[j]) {\n            return FindKth(arr1.GetRange(i + 1, arr1.Count - i - 1), arr2, k - i - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j + 1, arr2.Count - j - 1), k - j - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7074871392741d6b3306ee1cccb40c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7074871392741d6b3306ee1cccb40c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            arr1.RemoveRange(0, (int)a);\n            return FindKth(arr1, arr2, k - a);\n        } else {\n            arr2.RemoveRange(0, (int)b);\n            return FindKth(arr1, arr2, k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)j + 1, (int)(arr2.Count - j - 1)), k - j - 1);\n        } else {\n            return FindKth(arr1.GetRange((int)i + 1, (int)(arr1.Count - i - 1)), arr2, k - i - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <77b77e08d94c4bf8996ef3b147904e0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <77b77e08d94c4bf8996ef3b147904e0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted.\n        // Assume k is in range [1, arr1.Count + arr2.Count]\n        // Assume arr1 and arr2 are not empty.\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == arr1.Count + arr2.Count) {\n            return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        }\n        long m1 = Math.Min(arr1.Count, k / 2);\n        long m2 = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)m1 - 1] < arr2[(int)m2 - 1]) {\n            return FindKth(arr1.GetRange((int)m1, arr1.Count - (int)m1), arr2, k - m1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)m2, arr2.Count - (int)m2), k - m2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = Math.Min(k / 2, arr1.Count);\n        long mid2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)mid1 - 1] < arr2[(int)mid2 - 1]) {\n            return FindKth(arr1.GetRange((int)mid1, arr1.Count - (int)mid1), arr2, k - mid1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)mid2, arr2.Count - (int)mid2), k - mid2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        }\n        return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b6] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00123] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010e] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000dc] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b6] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00123] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9109906198564bd6a211ed6ba9077e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9109906198564bd6a211ed6ba9077e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00107] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d5] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <a034f9aff541498ebc1f976fc10800ed>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3a5acf9b3ce455ebba5aae78c2d3195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3a5acf9b3ce455ebba5aae78c2d3195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted.\n        // Assume k is valid.\n        // Assume k is not 0.\n        // Assume arr1 and arr2 are not empty.\n        // Assume arr1 and arr2 are not null.\n        // Assume k is not greater than the sum of the lengths of arr1 and arr2.\n        // Assume k is not less than 1.\n        // Assume k is not greater than the length of arr1.\n        // Assume k is not greater than the length of arr2.\n        // Assume k is not less than the length of arr1.\n        // Assume k is not less than the length of arr2.\n        // Assume k is not equal to the length of arr1.\n        // Assume k is not equal to the length of arr2.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2.\n        // Assume k is not equal to the length of arr1 plus 1.\n        // Assume k is not equal to the length of arr2 plus 1.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2 plus 1.\n        // Assume k is not equal to the length of arr1 plus 2.\n        // Assume k is not equal to the length of arr2 plus 2.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2 plus 2.\n        // Assume k is not equal to the length of arr1 plus 3.\n        // Assume k is not equal to the length of arr2 plus 3.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2 plus 3.\n        // Assume k is not equal to the length of arr1 plus 4.\n        // Assume k is not equal to the length of arr2 plus 4.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2 plus 4.\n        // Assume k is not equal to the length of arr1 plus 5.\n        // Assume k is not equal to the length of arr2 plus 5.\n        // Assume k is not equal to the sum of the lengths of arr1 and arr2 plus 5.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpto4l12el.cs(10,24): error CS0161: 'Problem.FindKth(List<long>, List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        int index1 = Math.Min((int)k / 2, arr1.Count);\n        int index2 = (int)k - index1;\n        if (arr1[index1 - 1] < arr2[index2 - 1]) {\n            return FindKth(arr1.GetRange(index1, arr1.Count - index1), arr2, k - index1);\n        } else if (arr1[index1 - 1] > arr2[index2 - 1]) {\n            return FindKth(arr1, arr2.GetRange(index2, arr2.Count - index2), k - index2);\n        } else {\n            return arr1[index1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count == 1 && arr2.Count == 1) {\n            return Math.Max(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ee9853e6c904e76add6c097db7216a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ee9853e6c904e76add6c097db7216a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] <= arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count < k / 2 ? arr1.Count : k / 2;\n        long b = arr2.Count < k / 2 ? arr2.Count : k / 2;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count - 1);\n        int j = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[i] < arr2[j]) {\n            return FindKth(arr1.GetRange(i + 1, arr1.Count - i - 1), arr2, k - i - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j + 1, arr2.Count - j - 1), k - j - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k < 1 || k > arr1.Count + arr2.Count) {\n            throw new ArgumentOutOfRangeException();\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = Math.Min((int)k / 2, arr1.Count);\n        int j = Math.Min((int)k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == 1) {\n            return Math.Min(arr1[1], arr2[1]);\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (arr1.Count + arr2.Count < k) {\n            return -1;\n        }\n        if (arr1[arr1.Count - 1] < arr2[0]) {\n            return arr1[(int)k - 1];\n        }\n        if (arr2[arr2.Count - 1] < arr1[0]) {\n            return arr2[(int)k - 1];\n        }\n        if (arr1[arr1.Count - 1] < arr2[arr2.Count - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - (int)k / 2);\n        }\n        return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - (int)k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00035] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00139] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00139] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00139] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n  at Problem.Main (System.String[] args) [0x0006a] in <ac3004e0fb2c4a5d9534a6351bd8f260>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negativ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count == 1 && arr2.Count == 1) return Math.Max(arr1[0], arr2[0]);\n        if (arr1.Count == 1) {\n            if (arr1[0] < arr2[(int)k / 2 - 1]) return arr2[(int)k - 2];\n            else return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n        if (arr2.Count == 1) {\n            if (arr2[0] < arr1[(int)k / 2 - 1]) return arr1[(int)k - 2];\n            else return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        }\n        if (arr1[(int)k / 2 - 1] < arr2[(int)k / 2 - 1]) return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        else return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted in ascending order.\n        // Assume k is a valid index.\n        // Assume arr1 and arr2 are not empty.\n        // Assume arr1 and arr2 are not null.\n        // Assume arr1 and arr2 have at least k elements.\n        // Assume k is greater than 0.\n        // Assume k is less than or equal to the number of elements in arr1 and arr2 combined.\n        // Assume arr1 and arr2 have no duplicates.\n        // Assume arr1 and arr2 have no negative elements.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements less than 0.\n        // Assume arr1 and arr2 have no elements greater than 2^32 - 1.\n        // Assume arr1 and arr2 have no elements\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1abaywl4.cs(10,24): error CS0161: 'Problem.FindKth(List<long>, List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count == 1 && arr2.Count == 1) return Math.Max(arr1[0], arr2[0]);\n        if (arr1.Count == 1) {\n            if (arr1[0] < arr2[(int)k / 2]) return arr2[(int)k - 1];\n            else return FindKth(arr1, arr2.GetRange((int)k / 2, (int)k - (int)k / 2), k - (int)k / 2);\n        }\n        if (arr2.Count == 1) {\n            if (arr2[0] < arr1[(int)k / 2]) return arr1[(int)k - 1];\n            else return FindKth(arr1.GetRange((int)k / 2, (int)k - (int)k / 2), arr2, k - (int)k / 2);\n        }\n        if (arr1[(int)k / 2] < arr2[(int)k / 2]) return FindKth(arr1.GetRange((int)k / 2, (int)k - (int)k / 2), arr2, k - (int)k / 2);\n        else return FindKth(arr1, arr2.GetRange((int)k / 2, (int)k - (int)k / 2), k - (int)k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4fb269466e14ab1a34d915f0e5cdfd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4fb269466e14ab1a34d915f0e5cdfd9>:0 \n\nUnhandled Exception:\nSystem.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\n  at System.Collections.Generic.List`1[T].GetRange (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at P",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > k / 2) {\n            arr1.RemoveRange((int)k / 2, arr1.Count - (int)k / 2);\n        }\n        if (arr2.Count > k / 2) {\n            arr2.RemoveRange((int)k / 2, arr2.Count - (int)k / 2);\n        }\n        if (arr1[(int)k / 2 - 1] < arr2[(int)k / 2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        } else {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000ed] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000ed] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <4d9c8c29ae8c40dfb09a73d4c99e5b01>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] > arr2[j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <890f0d410d3d4c589155c209ac5b6b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <890f0d410d3d4c589155c209ac5b6b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted.\n        // Assume k is valid.\n        // Assume arr1 and arr2 are not empty.\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == 1) {\n            if (arr1[0] < arr2[0]) {\n                return Math.Min(arr1[1], arr2[0]);\n            } else {\n                return Math.Min(arr1[0], arr2[1]);\n            }\n        }\n        long k1 = Math.Min(k / 2, arr1.Count - 1);\n        long k2 = Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[(int)k1] < arr2[(int)k2]) {\n            return FindKth(arr1.GetRange((int)k1 + 1, arr1.Count - (int)k1 - 1), arr2, k - k1 - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2 + 1, arr2.Count - (int)k2 - 1), k - k2 - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be705c79a0314b81829e959fb4c3837f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <be705c79a0314b81829e959fb4c3837f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010a] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d8] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <8f880f7cd9c84ce2804feb43d1599964>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count < k / 2 ? arr1.Count : k / 2;\n        long b = arr2.Count < k / 2 ? arr2.Count : k / 2;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (arr1[(int)mid1] <= arr2[(int)mid2]) {\n            if (mid1 + mid2 + 1 >= k) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            }\n        } else {\n            if (mid1 + mid2 + 1 >= k) {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <47308f481e3f4e8ca75a7c5c9458836e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <47308f481e3f4e8ca75a7c5c9458836e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        if (arr1.Count == 1) {\n            return Math.Min(arr1[0], arr2[(int)k - 2]);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d71bc3f965c4560b6dd8b0d70b3260d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d71bc3f965c4560b6dd8b0d70b3260d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(k / 2, arr1.Count);\n        long b = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            arr1.RemoveRange(0, (int)a);\n            return FindKth(arr1, arr2, k - a);\n        } else {\n            arr2.RemoveRange(0, (int)b);\n            return FindKth(arr1, arr2, k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count > k / 2 - 1 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count > k / 2 - 1 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3a5acf9b3ce455ebba5aae78c2d3195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3a5acf9b3ce455ebba5aae78c2d3195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count - 1);\n        int j = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[i] < arr2[j]) {\n            return FindKth(arr1.GetRange(i + 1, arr1.Count - i - 1), arr2, k - i - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j + 1, arr2.Count - j - 1), k - j - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            }\n            else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        }\n        else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            }\n            else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69539f05696740e99ec861cdfeded6c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <69539f05696740e99ec861cdfeded6c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == arr1.Count + arr2.Count - 1) {\n            return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e0370b143f6c41ec9f4e6c3620c914d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e0370b143f6c41ec9f4e6c3620c914d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <07ec55affc3941e1ab23a21c64e1e4e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <07ec55affc3941e1ab23a21c64e1e4e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        if (arr1.Count > arr2.Count) {\n            var tmp = arr1;\n            arr1 = arr2;\n            arr2 = tmp;\n        }\n        if (arr1.Count == 1) {\n            if (arr1[0] <= arr2[(int)k - 1]) return arr2[(int)k - 1];\n            if (arr1[0] >= arr2[(int)k]) return arr2[(int)k];\n            return arr1[0];\n        }\n        var m1 = arr1.Count / 2;\n        var m2 = arr2.Count / 2;\n        if (arr1[m1] <= arr2[m2]) {\n            if (k <= m1 + m2) {\n                return FindKth(arr1.GetRange(m1, arr1.Count - m1), arr2.GetRange(0, m2), k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(m2, arr2.Count - m2), k - m2);\n            }\n        } else {\n            if (k <= m1 + m2) {\n                return FindKth(arr1.GetRange(0, m1), arr2.GetRange(0, m2), k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(m2, arr2.Count - m2), k - m2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d4] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x001e4] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x001ca] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x001e4] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n  at Problem.Main (System.String[] args) [0x0006a] in <e1198f01baca458aa3d35f3f869f2fad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negativ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == 1) {\n            return Math.Min(arr1[1], arr2[1]);\n        }\n        if (k == 2) {\n            return Math.Min(arr1[2], arr2[2]);\n        }\n        if (k == 3) {\n            return Math.Min(arr1[3], arr2[3]);\n        }\n        if (k == 4) {\n            return Math.Min(arr1[4], arr2[4]);\n        }\n        if (k == 5) {\n            return Math.Min(arr1[5], arr2[5]);\n        }\n        if (k == 6) {\n            return Math.Min(arr1[6], arr2[6]);\n        }\n        if (k == 7) {\n            return Math.Min(arr1[7], arr2[7]);\n        }\n        if (k == 8) {\n            return Math.Min(arr1[8], arr2[8]);\n        }\n        if (k == 9) {\n            return Math.Min(arr1[9], arr2[9]);\n        }\n        if (k == 10) {\n            return Math.Min(arr1[10], arr2[10]);\n        }\n        if (k == 11) {\n            return Math.Min(arr1[11], arr2[11]);\n        }\n        if (k == 12) {\n            return Math.Min(arr1[12], arr2[12]);\n        }\n        if (k == 13) {\n            return Math.Min(arr1[13], arr2[13]);\n        }\n        if (k == 14) {\n            return Math.Min(arr1[14], arr2[14]);\n        }\n        if (k == 15) {\n            return Math.Min(arr1[15], arr2[15]);\n        }\n        if (k == 16) {\n            return Math.Min(arr1[16], arr2[16]);\n        }\n        if (k == 17) {\n            return Math.Min(arr1[\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_8hwge22.cs(63,34): error CS1003: Syntax error, ']' expected\n/tmp/tmp_8hwge22.cs(63,34): error CS1026: ) expected\n/tmp/tmp_8hwge22.cs(63,34): error CS1002: ; expected\n/tmp/tmp_8hwge22.cs(65,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp_8hwge22.cs(71,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k > arr1.Count + arr2.Count) {\n            throw new ArgumentOutOfRangeException(\"k\");\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = (int)k - (int)k1;\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, (int)arr1.Count - (int)k1), arr2, k - k1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, (int)arr2.Count - (int)k2), k - k2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        if (arr1.Count == 1) {\n            if (k == 1) return Math.Min(arr1[0], arr2[0]);\n            if (arr2[(int)k - 1] < arr1[0]) return arr2[(int)k - 1];\n            if (arr2[(int)k - 2] > arr1[0]) return arr2[(int)k - 2];\n            return arr1[0];\n        }\n        long pa = Math.Min((long)arr1.Count - 1, k / 2);\n        long pb = Math.Min((long)arr2.Count - 1, k - pa);\n        if (arr1[(int)pa] < arr2[(int)pb]) {\n            return FindKth(arr1.GetRange((int)pa, (int)(arr1.Count - pa)), arr2, k - pa);\n        } else if (arr1[(int)pa] > arr2[(int)pb]) {\n            return FindKth(arr1, arr2.GetRange((int)pb, (int)(arr2.Count - pb)), k - pb);\n        } else {\n            return arr1[(int)pa];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (arr1[(int)mid1] <= arr2[(int)mid2]) {\n            if (k <= mid1 + mid2 + 1) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2 + 1) {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <23be31cea2e842d7b671a14fc9b670b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <23be31cea2e842d7b671a14fc9b670b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        if (arr1.Count == 1) {\n            if (arr2[(int)k - 1] > arr1[0]) {\n                return arr2[(int)k - 1];\n            }\n            if (arr2[(int)k] < arr1[0]) {\n                return arr2[(int)k];\n            }\n            return arr1[0];\n        }\n        long l1 = Math.Min(arr1.Count - 1, k / 2);\n        long l2 = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)l1] > arr2[(int)l2]) {\n            return FindKth(arr1, arr2.GetRange((int)l2 + 1, (int)(arr2.Count - l2 - 1)), k - l2 - 1);\n        }\n        return FindKth(arr1.GetRange((int)l1 + 1, (int)(arr1.Count - l1 - 1)), arr2, k - l1 - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5c10d0d89e4448497e943e48cdca3aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5c10d0d89e4448497e943e48cdca3aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf91d60770664073a1f4a1d6befa6a4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf91d60770664073a1f4a1d6befa6a4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <890f0d410d3d4c589155c209ac5b6b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <890f0d410d3d4c589155c209ac5b6b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume arr1 and arr2 are sorted.\n        // Assume k is less than the length of arr1 + arr2.\n        // Assume k is greater than 0.\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : Int64.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : Int64.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count < k / 2 ? arr1.Count : k / 2;\n        long b = arr2.Count < k / 2 ? arr2.Count : k / 2;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Assume that k is always valid\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long k1 = Math.Min(k / 2, arr1.Count);\n        long k2 = k - k1;\n        if (arr1[(int)k1 - 1] < arr2[(int)k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else if (arr1[(int)k1 - 1] > arr2[(int)k2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        } else {\n            return arr1[(int)k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > k / 2) {\n            arr1.RemoveRange((int)k / 2, arr1.Count - (int)k / 2);\n        }\n        if (arr2.Count > k / 2) {\n            arr2.RemoveRange((int)k / 2, arr2.Count - (int)k / 2);\n        }\n        if (arr1[(int)k / 2 - 1] < arr2[(int)k / 2 - 1]) {\n            arr1.RemoveRange(0, (int)k / 2);\n            return FindKth(arr1, arr2, k - k / 2);\n        } else {\n            arr2.RemoveRange(0, (int)k / 2);\n            return FindKth(arr1, arr2, k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0000f] in <77e551280c1f48a78cfd0734be63824b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000e3] in <77e551280c1f48a78cfd0734be63824b>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <77e551280c1f48a78cfd0734be63824b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0000f] in <77e551280c1f48a78cfd0734be63824b>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000e3] in <77e551280c1f48a78cfd0734be63824b>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <77e551280c1f48a78cfd0734be63824b>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = (arr1.Count - 1) / 2;\n        long mid2 = (arr2.Count - 1) / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05aafc5349c34b2ca833adfacbb441d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05aafc5349c34b2ca833adfacbb441d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k < 1 || k > arr1.Count + arr2.Count) {\n            throw new ArgumentOutOfRangeException(\"k\");\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(k / 2, arr1.Count);\n        long b = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)j + 1, (int)(arr2.Count - j - 1)), k - j - 1);\n        } else {\n            return FindKth(arr1.GetRange((int)i + 1, (int)(arr1.Count - i - 1)), arr2, k - i - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01666fdeb3124fbbb48fb0a2aded63cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01666fdeb3124fbbb48fb0a2aded63cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var tmp = arr1;\n            arr1 = arr2;\n            arr2 = tmp;\n        }\n        var k1 = Math.Min(k / 2, arr1.Count);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else if (arr1[k1 - 1] > arr2[k2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        } else {\n            return arr1[k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0sf1z8bj.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0sf1z8bj.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = Math.Min((int)Math.Ceiling((double)k / 2), arr1.Count);\n        int j = (int)k - i;\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else if (arr1[i - 1] > arr2[j - 1]) {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        } else {\n            return arr1[i - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count < k / 2 ? arr1.Count : k / 2;\n        long b = arr2.Count < k / 2 ? arr2.Count : k / 2;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        int mid1 = (int)Math.Min(k / 2, arr1.Count - 1);\n        int mid2 = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[mid1] < arr2[mid2]) {\n            return FindKth(arr1.GetRange(mid1 + 1, arr1.Count - mid1 - 1), arr2, k - mid1 - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(mid2 + 1, arr2.Count - mid2 - 1), k - mid2 - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67a7d7c1f78b43a58fc483eb27816136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67a7d7c1f78b43a58fc483eb27816136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n        var half = Math.Min(arr1.Count, k / 2);\n        var half2 = (int)k - half;\n        if (arr1[half - 1] < arr2[half2 - 1]) {\n            return FindKth(arr1.GetRange((int)half, (int)(arr1.Count - half)), arr2, k - half);\n        } else if (arr1[half - 1] > arr2[half2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)half2, (int)(arr2.Count - half2)), k - half2);\n        } else {\n            return arr1[half - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjhy58n1d.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjhy58n1d.cs(21,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjhy58n1d.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjhy58n1d.cs(23,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjhy58n1d.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count);\n        int j = (int)Math.Min(k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.Count && j < arr2.Count) {\n            if (arr1[i] < arr2[j]) {\n                count++;\n                if (count == k) {\n                    return arr1[i];\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2[j];\n                }\n                j++;\n            }\n        }\n        while (i < arr1.Count) {\n            count++;\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n        }\n        while (j < arr2.Count) {\n            count++;\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count < k / 2 ? arr1.Count - 1 : k / 2 - 1;\n        long mid2 = arr2.Count < k / 2 ? arr2.Count - 1 : k / 2 - 1;\n        if (arr1[(int)mid1] < arr2[(int)mid2]) {\n            return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == arr1.Count + arr2.Count - 1) {\n            return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        }\n        long mid1 = (arr1.Count - 1) / 2;\n        long mid2 = (arr2.Count - 1) / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3904988174442d3a20e66b3b5934ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3904988174442d3a20e66b3b5934ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var tmp = arr1;\n            arr1 = arr2;\n            arr2 = tmp;\n        }\n        var k1 = Math.Min(k / 2, arr1.Count);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.Skip(k1).ToList(), arr2, k2);\n        } else {\n            return FindKth(arr1, arr2.Skip(k2).ToList(), k1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphm_64br0.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphm_64br0.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphm_64br0.cs(22,38): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmphm_64br0.cs(24,44): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, (int)arr1.Count - (int)i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)arr2.Count - (int)j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = Math.Min(k / 2, arr1.Count);\n        long mid2 = Math.Min(k / 2, arr2.Count);\n        if (arr1[(int)mid1 - 1] < arr2[(int)mid2 - 1]) {\n            return FindKth(arr1.GetRange((int)mid1, arr1.Count - (int)mid1), arr2, k - mid1);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)mid2, arr2.Count - (int)mid2), k - mid2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            arr1.RemoveRange(0, (int)a);\n            return FindKth(arr1, arr2, k - a);\n        } else {\n            arr2.RemoveRange(0, (int)b);\n            return FindKth(arr1, arr2, k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)arr2.Count - (int)j), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)arr1.Count - (int)i), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        int i = 0;\n        int j = 0;\n        while (i < arr1.Count && j < arr2.Count) {\n            if (arr1[i] < arr2[j]) {\n                if (i + j + 1 == k) {\n                    return arr1[i];\n                }\n                i++;\n            } else {\n                if (i + j + 1 == k) {\n                    return arr2[j];\n                }\n                j++;\n            }\n        }\n        if (i < arr1.Count) {\n            return arr1[(int)k - j - 1];\n        }\n        return arr2[(int)k - i - 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long mid1 = Math.Min(k / 2, arr1.Count);\n        long mid2 = k - mid1;\n        if (arr1[(int)mid1 - 1] < arr2[(int)mid2 - 1]) {\n            return FindKth(arr1.GetRange((int)mid1, (int)(arr1.Count - mid1)), arr2, k - mid1);\n        } else if (arr1[(int)mid1 - 1] > arr2[(int)mid2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)mid2, (int)(arr2.Count - mid2)), k - mid2);\n        } else {\n            return arr1[(int)mid1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = (arr1.Count > k / 2) ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long mid2 = (arr2.Count > k / 2) ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (mid1 < mid2) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] > arr2[(int)b - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)b, (int)(arr2.Count - b)), k - b);\n        }\n        else {\n            return FindKth(arr1.GetRange((int)a, (int)(arr1.Count - a)), arr2, k - a);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count == 1 && arr2.Count == 1) {\n            return Math.Max(arr1[0], arr2[0]);\n        }\n        if (arr1.Count == 1) {\n            if (arr1[0] < arr2[(int)(k / 2)]) {\n                return arr2[(int)k - 1];\n            }\n            return FindKth(arr1, arr2.GetRange((int)(k / 2), (int)(arr2.Count - k / 2)), k - k / 2);\n        }\n        if (arr2.Count == 1) {\n            if (arr2[0] < arr1[(int)(k / 2)]) {\n                return arr1[(int)k - 1];\n            }\n            return FindKth(arr1.GetRange((int)(k / 2), (int)(arr1.Count - k / 2)), arr2, k - k / 2);\n        }\n        if (arr1[(int)(k / 2)] < arr2[(int)(k / 2)]) {\n            return FindKth(arr1.GetRange((int)(k / 2), (int)(arr1.Count - k / 2)), arr2, k - k / 2);\n        }\n        return FindKth(arr1, arr2.GetRange((int)(k / 2), (int)(arr2.Count - k / 2)), k - k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0)\n            return arr2[(int)k - 1];\n        if (arr2.Count == 0)\n            return arr1[(int)k - 1];\n        if (k == 1)\n            return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count)\n            return FindKth(arr2, arr1, k);\n        long index1 = Math.Min(k / 2, arr1.Count);\n        long index2 = k - index1;\n        if (arr1[(int)index1 - 1] < arr2[(int)index2 - 1]) {\n            return FindKth(arr1.GetRange((int)index1, (int)(arr1.Count - index1)), arr2, k - index1);\n        } else if (arr1[(int)index1 - 1] > arr2[(int)index2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)index2, (int)(arr2.Count - index2)), k - index2);\n        } else {\n            return arr1[(int)index1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n        var k1 = Math.Min(arr1.Count, k / 2);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else if (arr1[k1 - 1] > arr2[k2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        } else {\n            return arr1[k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjpge2qcx.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjpge2qcx.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjpge2qcx.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjpge2qcx.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjpge2qcx.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        int i = (int)Math.Min(k / 2, arr1.Count - 1);\n        int j = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[i] < arr2[j]) {\n            return FindKth(arr1.GetRange(i + 1, arr1.Count - i - 1), arr2, k - i - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j + 1, arr2.Count - j - 1), k - j - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7074871392741d6b3306ee1cccb40c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7074871392741d6b3306ee1cccb40c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = Math.Min((int)k / 2, arr1.Count);\n        int j = Math.Min((int)k / 2, arr2.Count);\n        if (arr1[i - 1] < arr2[j - 1]) {\n            return FindKth(arr1.GetRange(i, arr1.Count - i), arr2, k - i);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j, arr2.Count - j), k - j);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b502a679614944de9bd0616d33ab7044>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // This is a binary search problem.\n        // We need to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n        // We can use the binary search to find the kth element in the combined array.\n        // The combined array is sorted, so we can use binary search to find the kth element.\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpevao0gca.cs(10,24): error CS0161: 'Problem.FindKth(List<long>, List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        if (arr1.Count == 1) {\n            if (arr2[(int)k - 1] > arr1[0]) {\n                return arr2[(int)k - 1];\n            }\n            if (arr2[(int)k] < arr1[0]) {\n                return arr2[(int)k];\n            }\n            return arr1[0];\n        }\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)j + 1, (int)(arr2.Count - j - 1)), k - j - 1);\n        }\n        return FindKth(arr1.GetRange((int)i + 1, (int)(arr1.Count - i - 1)), arr2, k - i - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cc84bb5e7f9b4e6a88cb4ebb582a4824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cc84bb5e7f9b4e6a88cb4ebb582a4824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        int i = (int)Math.Min(k / 2, arr1.Count - 1);\n        int j = (int)Math.Min(k / 2, arr2.Count - 1);\n        if (arr1[i] < arr2[j]) {\n            return FindKth(arr1.GetRange(i + 1, arr1.Count - i - 1), arr2, k - i - 1);\n        } else {\n            return FindKth(arr1, arr2.GetRange(j + 1, arr2.Count - j - 1), k - j - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40829464b7d4459d8dc1b365629b4b0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var tmp = arr1;\n            arr1 = arr2;\n            arr2 = tmp;\n        }\n        var k1 = Math.Min(k / 2, arr1.Count);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.Skip((int)k1).ToList(), arr2, k - k1);\n        } else if (arr1[k1 - 1] > arr2[k2 - 1]) {\n            return FindKth(arr1, arr2.Skip((int)k2).ToList(), k - k2);\n        } else {\n            return arr1[k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123420,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp1cq4fom.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp1cq4fom.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp1cq4fom.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp1cq4fom.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp1cq4fom.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00107] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d5] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long i = Math.Min(k / 2, arr1.Count);\n        long j = (int)k - (int)i;\n        if (arr1[(int)i - 1] < arr2[(int)j - 1]) {\n            return FindKth(arr1.GetRange((int)i, arr1.Count - (int)i), arr2, k - i);\n        } else if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, arr2.Count - (int)j), k - j);\n        } else {\n            return arr1[(int)i - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00107] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d5] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002d] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <9e426751e88d49e2a695d79405914ac6>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011c] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7afa3feea0824739bb77824a83f21c40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7afa3feea0824739bb77824a83f21c40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (k > arr1.Count + arr2.Count) {\n            throw new ArgumentOutOfRangeException(\"k\");\n        }\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, (int)(arr1.Count - a)), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, (int)(arr2.Count - b)), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count < k / 2 ? arr1[arr1.Count - 1] : arr1[(int)k / 2 - 1];\n        long b = arr2.Count < k / 2 ? arr2[arr2.Count - 1] : arr2[(int)k / 2 - 1];\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        if (arr1.Count > arr2.Count) return FindKth(arr2, arr1, k);\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k - i);\n        if (arr1[(int)i] < arr2[(int)j]) {\n            return FindKth(arr1.GetRange((int)i + 1, arr1.Count - (int)i - 1), arr2, k - i - 1);\n        } else if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)j + 1, arr2.Count - (int)j - 1), k - j - 1);\n        } else {\n            return arr1[(int)i];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000ec] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00150] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00150] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000ec] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00150] in <12dd15aa20e64c40ac3cf04e790b73fc>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b1] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        if (arr1.Count > arr2.Count) {\n            var temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n        var k1 = Math.Min(k / 2, arr1.Count);\n        var k2 = (int)k - k1;\n        if (arr1[k1 - 1] < arr2[k2 - 1]) {\n            return FindKth(arr1.GetRange((int)k1, arr1.Count - (int)k1), arr2, k - k1);\n        } else if (arr1[k1 - 1] > arr2[k2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)k2, arr2.Count - (int)k2), k - k2);\n        } else {\n            return arr1[k1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkzsjcr3y.cs(21,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkzsjcr3y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkzsjcr3y.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkzsjcr3y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkzsjcr3y.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count < k / 2) {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n        if (arr2.Count < k / 2) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        }\n        if (arr1[(int)k / 2 - 1] < arr2[(int)k / 2 - 1]) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        }\n        return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010a] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000d8] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b4] in <1ec0c3267ac146fd8d3ba84042d32e30>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0011f] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663e7ec28e5748499a7a8dbd718c0ff4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count < k / 2) {\n            if (arr2[(int)(k / 2)] < arr1[arr1.Count - 1]) {\n                return FindKth(arr1, arr2.GetRange((int)(k / 2), arr2.Count - (int)(k / 2)), k - (int)(k / 2));\n            }\n            else {\n                return FindKth(arr1, arr2.GetRange((int)(k / 2) + 1, arr2.Count - (int)(k / 2) - 1), k - (int)(k / 2) - 1);\n            }\n        }\n        else if (arr2.Count < k / 2) {\n            if (arr1[(int)(k / 2)] < arr2[arr2.Count - 1]) {\n                return FindKth(arr1.GetRange((int)(k / 2), arr1.Count - (int)(k / 2)), arr2, k - (int)(k / 2));\n            }\n            else {\n                return FindKth(arr1.GetRange((int)(k / 2) + 1, arr1.Count - (int)(k / 2) - 1), arr2, k - (int)(k / 2) - 1);\n            }\n        }\n        else {\n            if (arr1[(int)(k / 2)] < arr2[(int)(k / 2)]) {\n                return FindKth(arr1.GetRange((int)(k / 2), arr1.Count - (int)(k / 2)), arr2, k - (int)(k / 2));\n            }\n            else {\n                return FindKth(arr1, arr2.GetRange((int)(k / 2), arr2.Count - (int)(k / 2)), k - (int)(k / 2));\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123426,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f8443bde186c44b3b3452090f06511d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b6] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00123] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0010e] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000dc] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.Main (System.String[] args) [0x0002d] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x0002f] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x000b6] in <d071d5839c824d4e96ca5a76c5721cc0>:0 \n  at Problem.FindKth (System.Collections.Generic.List`1[T] arr1, System.Collections.Generic.List`1[T] arr2, System.Int64 k) [0x00123] in <",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(arr1.Count - 1, k / 2);\n        long j = Math.Min(arr2.Count - 1, k / 2);\n        if (arr1[(int)i] > arr2[(int)j]) {\n            return FindKth(arr1, arr2.GetRange((int)(j + 1), (int)(arr2.Count - j - 1)), k - j - 1);\n        } else {\n            return FindKth(arr1.GetRange((int)(i + 1), (int)(arr1.Count - i - 1)), arr2, k - i - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e5fb2fb2342b458a99b08f97e7d226bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e5fb2fb2342b458a99b08f97e7d226bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count > k / 2 - 1 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count > k / 2 - 1 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k];\n        }\n        if (k == 0) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (k == arr1.Count + arr2.Count - 1) {\n            return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <257a15cb3a08495296a010c8eff6ab91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <257a15cb3a08495296a010c8eff6ab91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1[(int)mid1] > arr2[(int)mid2]) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6494660dc4420cb88c8e9045245022>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a6494660dc4420cb88c8e9045245022>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        if (arr1.Count > arr2.Count) {\n            return FindKth(arr2, arr1, k);\n        }\n        long index1 = Math.Min(k / 2, arr1.Count);\n        long index2 = k - index1;\n        if (arr1[(int)index1 - 1] < arr2[(int)index2 - 1]) {\n            return FindKth(arr1.GetRange((int)index1, (int)(arr1.Count - index1)), arr2, k - index1);\n        } else if (arr1[(int)index1 - 1] > arr2[(int)index2 - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)index2, (int)(arr2.Count - index2)), k - index2);\n        } else {\n            return arr1[(int)index1 - 1];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long i = Math.Min(arr1.Count, k / 2);\n        long j = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)i - 1] > arr2[(int)j - 1]) {\n            return FindKth(arr1, arr2.GetRange((int)j, (int)(arr2.Count - j)), k - j);\n        } else {\n            return FindKth(arr1.GetRange((int)i, (int)(arr1.Count - i)), arr2, k - i);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long a = arr1.Count >= k / 2 ? arr1[(int)k / 2 - 1] : long.MaxValue;\n        long b = arr2.Count >= k / 2 ? arr2[(int)k / 2 - 1] : long.MaxValue;\n        if (a < b) {\n            return FindKth(arr1.GetRange((int)k / 2, arr1.Count - (int)k / 2), arr2, k - k / 2);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)k / 2, arr2.Count - (int)k / 2), k - k / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) {\n            return arr2[(int)k - 1];\n        }\n        if (arr2.Count == 0) {\n            return arr1[(int)k - 1];\n        }\n        if (k == 1) {\n            return Math.Min(arr1[0], arr2[0]);\n        }\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (arr1[(int)mid1] <= arr2[(int)mid2]) {\n            if (mid1 + mid2 + 1 >= k) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange((int)mid2 + 1, arr2.Count - (int)mid2 - 1), k - mid2 - 1);\n            }\n        } else {\n            if (mid1 + mid2 + 1 >= k) {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            } else {\n                return FindKth(arr1.GetRange((int)mid1 + 1, arr1.Count - (int)mid1 - 1), arr2, k - mid1 - 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cb31823639b748b7bbd46e3fadedeac0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cb31823639b748b7bbd46e3fadedeac0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k - 1];\n        if (arr2.Count == 0) return arr1[(int)k - 1];\n        if (k == 1) return Math.Min(arr1[0], arr2[0]);\n        long a = Math.Min(arr1.Count, k / 2);\n        long b = Math.Min(arr2.Count, k / 2);\n        if (arr1[(int)a - 1] < arr2[(int)b - 1]) {\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        } else {\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        // TODO: Implement this function.\n        if (arr1.Count == 0)\n            return arr2[(int)k - 1];\n        if (arr2.Count == 0)\n            return arr1[(int)k - 1];\n        if (k == 1)\n            return Math.Min(arr1[0], arr2[0]);\n        long a = arr1.Count < k / 2 ? arr1.Count : k / 2;\n        long b = arr2.Count < k / 2 ? arr2.Count : k / 2;\n        if (arr1[(int)a - 1] < arr2[(int)b - 1])\n            return FindKth(arr1.GetRange((int)a, arr1.Count - (int)a), arr2, k - a);\n        else\n            return FindKth(arr1, arr2.GetRange((int)b, arr2.Count - (int)b), k - b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        if (arr1.Count == 0) return arr2[(int)k];\n        if (arr2.Count == 0) return arr1[(int)k];\n        if (k == 0) return Math.Min(arr1[0], arr2[0]);\n        if (k == arr1.Count + arr2.Count - 1) return Math.Max(arr1[arr1.Count - 1], arr2[arr2.Count - 1]);\n        long mid1 = arr1.Count / 2;\n        long mid2 = arr2.Count / 2;\n        if (arr1[(int)mid1] <= arr2[(int)mid2]) {\n            if (k <= mid1 + mid2) {\n                return FindKth(arr1.GetRange(0, (int)mid1), arr2, k);\n            } else {\n                return FindKth(arr1, arr2.GetRange((int)(mid2 + 1), (int)(arr2.Count - mid2 - 1)), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2) {\n                return FindKth(arr1, arr2.GetRange(0, (int)mid2), k);\n            } else {\n                return FindKth(arr1.GetRange((int)(mid1 + 1), (int)(arr1.Count - mid1 - 1)), arr2, k - mid1 - 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c9243a01d48d4d469f02a7edaccf4835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c9243a01d48d4d469f02a7edaccf4835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}