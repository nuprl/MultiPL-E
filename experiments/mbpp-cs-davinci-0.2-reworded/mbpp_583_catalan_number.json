{
  "name": "mbpp_583_catalan_number",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which returns nth catalan number.\n    public static long CatalanNumber(long num) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CatalanNumber((10L)) == (16796L));\n    Debug.Assert(CatalanNumber((9L)) == (4862L));\n    Debug.Assert(CatalanNumber((7L)) == (429L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i) / (i + 1);\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i) / (i + 1);\n        }\n        return result;",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i) / (i + 1);\n        }\n        return res;",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i);\n            result = result / (i + 1);\n        }\n        return result / (num + 1);",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i);\n            res = res / (i + 1);\n        }\n        return res / (num + 1);",
    "        long[] catalan = new long[num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[num];",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i) / (i + 1);\n        }\n        return result;",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i);\n            res = res / (i + 1);\n        }\n        return res / (num + 1);",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i) / (i + 1);\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i);\n            result = result / (i + 1);\n        }\n        return result / (num + 1);",
    "        if (num <= 1) return 1;\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += CatalanNumber(i) * CatalanNumber(num - i - 1);\n        }\n        return res;",
    "        long[] catalan = new long[num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (long i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (long j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[num];",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i) / (i + 1);\n        }\n        return res;",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (2 * num - i) / (i + 1);\n        }\n        return result / (num + 1);",
    "        long result = 1;\n        for (long i = 0; i < num; i++) {\n            result = result * (num + i) / (i + 1);\n        }\n        return result;",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i) / (i + 1);\n        }\n        return res;",
    "        long[] catalan = new long[num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[num];",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i) / (i + 1);\n        }\n        return res;",
    "        long res = 1;\n        for (long i = 0; i < num; i++) {\n            res = res * (num + i) / (i + 1);\n        }\n        return res;",
    "        long[] catalan = new long[num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[num];"
  ]
}