{
  "name": "mbpp_249_intersection_array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the intersection of two lists.\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<long>(new long[]{(long)10L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        // Write your code here.\n        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var set = new HashSet<long>(array_nums1);\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        foreach (var num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var nums1 = array_nums1.OrderBy(x => x).ToList();\n        var nums2 = array_nums2.OrderBy(x => x).ToList();\n        var i = 0;\n        var j = 0;\n        while (i < nums1.Count && j < nums2.Count) {\n            if (nums1[i] == nums2[j]) {\n                result.Add(nums1[i]);\n                i++;\n                j++;\n            } else if (nums1[i] < nums2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;",
    "        var intersection = new List<long>();\n        var hashset = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hashset.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hashset.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection_array = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection_array.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection_array;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach(long num in array_nums1) {\n            if(array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hash.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hash.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var nums1 = new HashSet<long>(array_nums1);\n        var nums2 = new HashSet<long>(array_nums2);\n        foreach (var num in nums1) {\n            if (nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    result.Add(array_nums1[i]);\n                }\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        int i = 0;\n        int j = 0;\n        while (i < array_nums1.Count && j < array_nums2.Count) {\n            if (array_nums1[i] < array_nums2[j]) {\n                i++;\n            } else if (array_nums1[i] > array_nums2[j]) {\n                j++;\n            } else {\n                intersection.Add(array_nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hash.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hash.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var n in array_nums1) {\n            hash.Add(n);\n        }\n        foreach (var n in array_nums2) {\n            if (hash.Contains(n)) {\n                result.Add(n);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hash.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hash.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        foreach (var num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    result.Add(array_nums1[i]);\n                }\n            }\n        }\n        return result;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        int i = 0;\n        int j = 0;\n        while (i < array_nums1.Count && j < array_nums2.Count) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.Add(array_nums1[i]);\n                i++;\n                j++;\n            } else if (array_nums1[i] < array_nums2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        int i = 0;\n        int j = 0;\n        while (i < array_nums1.Count && j < array_nums2.Count) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.Add(array_nums1[i]);\n                i++;\n                j++;\n            } else if (array_nums1[i] < array_nums2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return intersection;",
    "        List<long> intersect = new List<long>();\n        foreach (long num1 in array_nums1) {\n            foreach (long num2 in array_nums2) {\n                if (num1 == num2) {\n                    intersect.Add(num1);\n                }\n            }\n        }\n        return intersect;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    result.Add(array_nums1[i]);\n                }\n            }\n        }\n        return result;",
    "        var intersection = new List<long>();\n        foreach (var num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var nums1 = new HashSet<long>(array_nums1);\n        var nums2 = new HashSet<long>(array_nums2);\n        foreach (var num in nums1) {\n            if (nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var nums1 = new HashSet<long>(array_nums1);\n        var nums2 = new HashSet<long>(array_nums2);\n        foreach (var num in nums1) {\n            if (nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        int i = 0;\n        int j = 0;\n        while (i < array_nums1.Count && j < array_nums2.Count) {\n            if (array_nums1[i] < array_nums2[j]) {\n                i++;\n            } else if (array_nums1[i] > array_nums2[j]) {\n                j++;\n            } else {\n                intersection.Add(array_nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection_array = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection_array.Add(num);\n            }\n        }\n        return intersection_array;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (long num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection_array = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection_array.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection_array;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in array_nums1) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var num in array_nums2) {\n            if (dict.ContainsKey(num) && dict[num] > 0) {\n                intersection.Add(num);\n                dict[num]--;\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    result.Add(array_nums1[i]);\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        foreach (var num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in array_nums1) {\n            if (!dict.ContainsKey(num)) {\n                dict[num] = 0;\n            }\n            dict[num]++;\n        }\n        foreach (var num in array_nums2) {\n            if (dict.ContainsKey(num) && dict[num] > 0) {\n                result.Add(num);\n                dict[num]--;\n            }\n        }\n        return result;",
    "        var intersection = new List<long>();\n        var hashset = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hashset.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hashset.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var nums1 = new HashSet<long>(array_nums1);\n        var nums2 = new HashSet<long>(array_nums2);\n        foreach (var num in nums1) {\n            if (nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hash.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hash.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var nums1 = new HashSet<long>(array_nums1);\n        var nums2 = new HashSet<long>(array_nums2);\n        foreach (var num in nums1) {\n            if (nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                    break;\n                }\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var nums1 = array_nums1.ToArray();\n        var nums2 = array_nums2.ToArray();\n        Array.Sort(nums1);\n        Array.Sort(nums2);\n        int i = 0;\n        int j = 0;\n        while (i < nums1.Length && j < nums2.Length) {\n            if (nums1[i] < nums2[j]) {\n                i++;\n            } else if (nums1[i] > nums2[j]) {\n                j++;\n            } else {\n                result.Add(nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num1 in array_nums1) {\n            foreach (long num2 in array_nums2) {\n                if (num1 == num2) {\n                    intersection.Add(num1);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var hash = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hash.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hash.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num1 in array_nums1) {\n            foreach (long num2 in array_nums2) {\n                if (num1 == num2) {\n                    intersection.Add(num1);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            if (array_nums2.Contains(array_nums1[i])) {\n                intersection.Add(array_nums1[i]);\n            }\n        }\n        return intersection;",
    "        List<long> intersection_array = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection_array.Add(num);\n            }\n        }\n        return intersection_array;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> result = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var hashset = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            hashset.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (hashset.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num1 in array_nums1) {\n            foreach (long num2 in array_nums2) {\n                if (num1 == num2) {\n                    intersection.Add(num1);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            if (array_nums2.Contains(array_nums1[i])) {\n                intersection.Add(array_nums1[i]);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            if (array_nums2.Contains(array_nums1[i])) {\n                intersection.Add(array_nums1[i]);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        foreach (var num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        int i = 0;\n        int j = 0;\n        while (i < array_nums1.Count && j < array_nums2.Count) {\n            if (array_nums1[i] < array_nums2[j]) {\n                i++;\n            } else if (array_nums1[i] > array_nums2[j]) {\n                j++;\n            } else {\n                intersection.Add(array_nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;"
  ]
}