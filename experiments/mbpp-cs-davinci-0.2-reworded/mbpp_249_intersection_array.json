{
  "name": "mbpp_249_intersection_array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the intersection of two lists.\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<long>(new long[]{(long)10L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        // Write your code here.\n        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set1 = new HashSet<long>(array_nums1);\n        var set2 = new HashSet<long>(array_nums2);\n        foreach (var num in set1) {\n            if (set2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        var intersection = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in array_nums1) {\n            set.Add(num);\n        }\n        foreach (var num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        for (int i = 0; i < array_nums1.Count; i++) {\n            for (int j = 0; j < array_nums2.Count; j++) {\n                if (array_nums1[i] == array_nums2[j]) {\n                    intersection.Add(array_nums1[i]);\n                }\n            }\n        }\n        return intersection;",
    "        List<long> intersection = new List<long>();\n        foreach (long num in array_nums1) {\n            if (array_nums2.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n        return intersection;"
  ]
}