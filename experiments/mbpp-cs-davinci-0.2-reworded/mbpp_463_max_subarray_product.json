{
  "name": "mbpp_463_max_subarray_product",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;",
    "        long max = arr[0];\n        long min = arr[0];\n        long res = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            res = Math.Max(res, max);\n        }\n        return res;",
    "        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        // TODO: Implement this function.\n        return 0;",
    "        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function\n        return 0;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        // TODO: Implement this function.\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;"
  ]
}