{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        float[,] dp = new float[cost.Count, cost.Count];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < cost.Count; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < cost.Count; i++) {\n            for (int j = 1; j < cost.Count; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[cost.Count - 1, cost.Count - 1] / (2 * cost.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[][] dp = new float[n][];\n        for (int i = 0; i < n; i++) {\n            dp[i] = new float[n];\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++)\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        for (int i = 1; i < n; i++)\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        for (int i = 1; i < n; i++)\n            for (int j = 1; j < n; j++)\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24e2acbca4494989b573eb71f5c610e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24e2acbca4494989b573eb71f5c610e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j],dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for(int i = 1; i < m; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        long[,] dp = new long[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n - 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1b50836a24cf4575bc52ead15ce8aae6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1b50836a24cf4575bc52ead15ce8aae6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // The idea is to use dynamic programming. We will create a matrix of size N*N, where each cell will contain the maximum average of all paths that end in this cell.\n        // The base case is the bottom right cell, which will contain the cost of the path that consists of only one cell.\n        // The recurrence relation is the following:\n        // dp[i][j] = max(dp[i+1][j], dp[i][j+1]) + cost[i][j]\n        // The answer is the maximum average of all paths that end in the top left cell.\n        // Time complexity is O(N^2) and space complexity is O(N^2).\n        int n = cost.Count;\n        float[][] dp = new float[n][];\n        for (int i = 0; i < n; i++) {\n            dp[i] = new float[n];\n        }\n        dp[n - 1][n - 1] = cost[n - 1][n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            dp[i][n - 1] = dp[i + 1][n - 1] + cost[i][n - 1];\n        }\n        for (int j = n - 2; j >= 0; j--) {\n            dp[n - 1][j] = dp[n - 1][j + 1] + cost[n - 1][j];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 2; j >= 0; j--) {\n                dp[i][j] = Math.Max(dp[i + 1][j], dp[i][j + 1]) + cost[i][j];\n            }\n        }\n        return dp[0][0] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        var dp = new List<List<long>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<long>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        long[,] dp = new long[cost.Count, cost.Count];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < cost.Count; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < cost.Count; i++) {\n            for (int j = 1; j < cost.Count; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[cost.Count - 1, cost.Count - 1] / (2 * cost.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        long[,] dp = new long[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        int m = cost[0].Count;\n        float[,] dp = new float[n, m];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, m - 1] / (n + m - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new List<List<long>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<long>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n-1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d91f03c43cf14f288f5e355f7fa5a045>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n-1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++)\n        {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++)\n        {\n            for (int j = 1; j < n; j++)\n            {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2*n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (var i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (var j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        float[,] dp = new float[cost.Count, cost.Count];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < cost.Count; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < cost.Count; i++) {\n            for (int j = 1; j < cost.Count; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[cost.Count - 1, cost.Count - 1] / (2 * cost.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        long[,] dp = new long[cost.Count, cost.Count];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < cost.Count; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < cost.Count; i++) {\n            for (int j = 1; j < cost.Count; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[cost.Count - 1, cost.Count - 1] / (2 * cost.Count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // We use dynamic programming to solve this problem.\n        // We create a matrix of size N*N.\n        // We fill the matrix with the maximum average of the path that ends at that cell.\n        // We start from the bottom right cell and work our way up.\n        // We use the following formula to compute the maximum average of the path that ends at a cell:\n        // max_average(i,j) = max(max_average(i+1,j),max_average(i,j+1))+cost(i,j)\n        // We stop when we reach the top left cell.\n        // We return the value of the top left cell.\n        // Time complexity: O(N^2)\n        // Space complexity: O(N^2)\n        int n = cost.Count;\n        float[,] max_average = new float[n, n];\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                if (i == n - 1 && j == n - 1) {\n                    max_average[i, j] = cost[i][j];\n                } else if (i == n - 1) {\n                    max_average[i, j] = max_average[i, j + 1] + cost[i][j];\n                } else if (j == n - 1) {\n                    max_average[i, j] = max_average[i + 1, j] + cost[i][j];\n                } else {\n                    max_average[i, j] = Math.Max(max_average[i + 1, j], max_average[i, j + 1]) + cost[i][j];\n                }\n            }\n        }\n        return max_average[0, 0] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int j = 1; j < n; j++) {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new List<List<float>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<float>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        var n = cost.Count;\n        var dp = new List<List<long>>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(new List<long>());\n            for (int j = 0; j < n; j++) {\n                dp[i].Add(0);\n            }\n        }\n        dp[0][0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost[0][i];\n            dp[i][0] = dp[i - 1][0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.Max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i=1;i<n;i++){\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i=1;i<n;i++){\n            for(int j=1;j<n;j++){\n                dp[i,j] = Math.Max(dp[i-1,j],dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1]/(2*n-1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <caebeec91aaa4269af4e57707566dfd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        int n = cost.Count;\n        float[,] dp = new float[n,n];\n        dp[0,0] = cost[0][0];\n        for(int i = 1; i < n; i++) {\n            dp[0,i] = dp[0,i-1] + cost[0][i];\n            dp[i,0] = dp[i-1,0] + cost[i][0];\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i,j] = Math.Max(dp[i-1,j], dp[i,j-1]) + cost[i][j];\n            }\n        }\n        return dp[n-1,n-1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        var n = cost.Count;\n        var dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (var i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (var i = 1; i < n; i++) {\n            for (var j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n        // Write your code here\n        int n = cost.Count;\n        float[,] dp = new float[n, n];\n        dp[0, 0] = cost[0][0];\n        for (int i = 1; i < n; i++) {\n            dp[0, i] = dp[0, i - 1] + cost[0][i];\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n        return dp[n - 1, n - 1] / (2 * n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}