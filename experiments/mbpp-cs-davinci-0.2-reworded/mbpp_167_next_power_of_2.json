{
  "name": "mbpp_167_next_power_of_2",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest power of 2 greater than or equal to n.\n    public static long NextPowerOf2(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPowerOf2((0L)) == (1L));\n    Debug.Assert(NextPowerOf2((5L)) == (8L));\n    Debug.Assert(NextPowerOf2((17L)) == (32L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        }\n        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        // TODO: Implement this function\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        long p = 1;\n        while (p < n) {\n            p <<= 1;\n        }\n        return p;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n is negative\");\n        }\n        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        }\n        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        return (long)Math.Pow(2, Math.Ceiling(Math.Log(n, 2)));",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Must be positive.\");\n        } else if (n == 0) {\n            return 1;\n        } else {\n            n--;\n            n |= n >> 1;\n            n |= n >> 2;\n            n |= n >> 4;\n            n |= n >> 8;\n            n |= n >> 16;\n            n++;\n            return n;\n        }"
  ]
}