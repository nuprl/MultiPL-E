{
  "name": "mbpp_641_is_nonagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long nth = n * (3 * n - 2);\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))",
    "        // nth nonagonal number = n * (3 * n - 2) / 2\n        // n = (1 + sqrt(1 + 8 * k)) / 3\n        var sqrt = Math.Sqrt(1 + 8 * n);\n        if (sqrt % 3 != 1) return -1;\n        return (long)((sqrt + 1) / 3);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        // n = (3 * n * n - n) / 2\n        // n = (3 * n^2 - n) / 2\n        // 2n = 3n^2 - n\n        // 2n + n = 3n^2\n        // (2n + n) / 3 = n^2\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2",
    "        long nn = (long)Math.Sqrt(1 + 8*n);\n        if (nn*nn == 1 + 8*n) {\n            return (nn - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? 1 : 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8*n))/2\n        // n = (1 +- sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(8 * n + 1);\n        if (a * a == 8 * n + 1)\n            return a;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            x -= 1;\n        }\n        x /= 2;\n        return x * (x + 1) / 2;",
    "        return (n * (3 * n - 1)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        long x = (long)Math.Sqrt(n * 2);\n        if (x * (x + 1) == 2 * n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 0; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        double a = (Math.Sqrt(8 * n + 1) - 1) / 2;\n        return a == (long)a ? 1 : 0;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a != 1 + 8 * n) return -1;\n        return (a - 1) / 2;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long k = (long)Math.Sqrt(2 * n);\n        if (k * (k + 1) == 2 * n) {\n            return k;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nn = (long)Math.Sqrt(1 + 8 * n);\n        if (nn * nn != 1 + 8 * n)\n            return -1;\n        nn = (nn - 1) / 2;\n        return nn;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * (nth + 1) / 2 == n) {\n            return nth;\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8n))/2\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2*n = 0\n        // n^2 - 3n + 2n = 0\n        // n(n - 3) + 2(n - 3) = 0\n        // (n + 2)(n - 3) = 0\n        // n = -2 or n = 3\n        // n = 3\n        return n;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : -1;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        // n = (3*k^2 - k)/2\n        // k^2 - k - 2n = 0\n        // k = (1 + sqrt(1 + 8n))/2\n        var k = (long)Math.Floor((1 + Math.Sqrt(1 + 8 * n)) / 2);\n        return k;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // n^2 + n - 2*k = 0\n        // n = (-1 +- sqrt(1 + 8k)) / 2\n        // n = (-1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(1 + 8k)) / 2\n        // n = (1 + sqrt(",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        return (n * (3 * n - 2)) / 2;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Floor((Math.Sqrt(1 + 8 * n) - 1) / 2);\n        return x * (x + 1) / 2 == n ? x : -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        // n = (3*n^2 - n)/2\n        long x = (long)Math.Floor((Math.Sqrt(1 + 24 * n) + 1) / 6);\n        return x * (3 * x - 1) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        return n * (3 * n - 2);",
    "        double nth = (Math.Sqrt(1 + 8 * n) - 1) / 2;\n        if (nth == (long)nth)\n            return (long)nth;\n        return -1;",
    "        long nth = (long)Math.Sqrt(n * 2);\n        if (nth * (nth + 1) == n * 2) {\n            return nth;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return (a - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = n;\n        long nth_1 = n - 1;\n        long nth_2 = n - 2;\n        long nth_3 = n - 3;\n        long nth_4 = n - 4;\n        long nth_5 = n - 5;\n        long nth_6 = n - 6;\n        long nth_7 = n - 7;\n        long nth_8 = n - 8;\n        long nth_9 = n - 9;\n        long nth_10 = n - 10;\n        long nth_11 = n - 11;\n        long nth_12 = n - 12;\n        long nth_13 = n - 13;\n        long nth_14 = n - 14;\n        long nth_15 = n - 15;\n        long nth_16 = n - 16;\n        long nth_17 = n - 17;\n        long nth_18 = n - 18;\n        long nth_19 = n - 19;\n        long nth_20 = n - 20;\n        long nth_21 = n - 21;\n        long nth_22 = n - 22;\n        long nth_23 = n - 23;\n        long nth_24 = n - 24;\n        long nth_25 = n - 25;\n        long nth_26 = n - 26;\n        long nth_27 = n - 27;\n        long nth_28 = n - 28;\n        long nth_29 = n - 29;\n        long nth_30 = n - 30;\n        long nth_31 = n - 31;\n        long nth_32 = n - 32;\n        long nth_33 = n - 33;\n        long nth_34 = n - 34;\n        long nth_35 = n - 35;\n        long nth_36 = n - 36;\n        long nth_37 = n - 37;\n        long nth_38 = n - 38;\n        long nth_39 = n - 39;\n        long nth_40 = n - 40;\n        long nth_41 = n - 41;\n        long nth_42 = n - 42;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            x -= 1;\n        }\n        x /= 2;\n        return x;",
    "        // n = (3*x^2 - x)/2\n        // x = (1 + sqrt(1 + 24*n))/6\n        long x = (long)Math.Floor((1 + Math.Sqrt(1 + 24 * n)) / 6);\n        return (3 * x * x - x) / 2;",
    "        long a = (long)Math.Floor((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return a * (a + 1) / 2 == n;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        long k = (long)Math.Floor((Math.Sqrt(8*n + 1) - 1) / 2);\n        long d = n - k * (k + 1) / 2;\n        return d;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (int i = 0; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return -1;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (1 - sqrt(1 + 12*n))/3\n        // x = (1 + sqrt(1 + 12*n))/3\n        // x = (",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Ceiling((Math.Sqrt(1 + 8 * n) - 1) / 2);\n        return x * (x + 1) / 2;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        // n = (3*x^2 + x)/2\n        // n = (3*x^2 + x - 2*n)/2\n        // 0 = 3*x^2 + x - 2*n\n        // 0 = x^2 + (1/3)*x - (2/3)*n\n        // x = (-1/3 +- sqrt(1/9 + 4*(2/3)*n))/2\n        // x = (-1/3 +- sqrt(1 + 8*n))/2\n        // x = (-1/3 +- sqrt(9 + 8*n))/2\n        // x = (-1/3 +- (3 + sqrt(8*n)))/2\n        // x = (-1 +- (3 + sqrt(8*n)))/6\n        // x = (-1 + (3 + sqrt(8*n)))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n))/6\n        // x = (2 + sqrt(8*n",
    "        return n * (3 * n - 2);",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 +- sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))",
    "        long k = (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);\n        long a = (k * (k + 1)) / 2;\n        return n - a;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a - 1;\n        }\n        return -1;",
    "        return (n * (3 * n - 1)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n)\n            return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long x = (long)Math.Floor(Math.Sqrt(2 * n));\n        if (x * (x + 1) == 2 * n)\n            return x;\n        return 0;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) {\n            return -1;\n        }\n        return (x - 1) / 2;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n)) / 2\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n)) / 6\n        // n = (-1 + sqrt(1 + 24n",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a != 1 + 8 * n) return -1;\n        a -= 1;\n        if (a % 2 == 0) return -1;\n        return a / 2 + 1;",
    "        long k = (long)Math.Sqrt(2*n);\n        if (k*(k+1) == 2*n) {\n            return k;\n        }\n        return -1;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)(Math.Sqrt(1 + 8 * n) - 1) / 2;\n        return x * (x + 1) / 2 == n;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long k = (long)Math.Floor((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return k * (3 * k - 1) / 2;",
    "        // n = (3 * x^2 - x) / 2\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n       ",
    "        long x = (long)Math.Sqrt(2*n);\n        if (x*(x+1) == 2*n)\n            return x;\n        return -1;",
    "        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k)) / 2\n        // k = n*(n-1)/2\n        // We can use the quadratic formula to solve for n.\n        // n = (1 + sqrt(1 + 8*k",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        return (x * x == 1 + 8 * n && (x - 1) % 2 == 0) ? (x - 1) / 2 : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (int i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        return x * x == 1 + 8 * n ? x : -1;",
    "        // n = (3 * k^2 - k) / 2\n        // 3 * k^2 - k - 2 * n = 0\n        // k = (1 + sqrt(1 + 12 * n)) / 6\n        // k = (1 - sqrt(1 + 12 * n)) / 6\n        // k = (1 + sqrt(1 + 12 * n)) / 6\n        double k = (1 + Math.Sqrt(1 + 12 * n)) / 6;\n        if (k == Math.Floor(k)) {\n            return (long)k;\n        }\n        return -1;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (k * (k + 1)) / 2\n        // k^2 + k - 2n = 0\n        // k = (-1 + sqrt(1 + 8n)) / 2\n        // k = (1 + sqrt(1 + 8n)) / 2\n        // k = (sqrt(1 + 8n) - 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 + 8n) + 1) / 2\n        // k = (sqrt(1 +",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        return (n * (3 * n - 2)) / 2;",
    "        long x = (long)Math.Floor((Math.Sqrt(8*n+1)-1)/2);\n        return x*(x+1)/2 == n;",
    "        long m = (long)Math.Floor((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return n - m * (m + 1) / 2;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return (a - 1) / 2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) {\n            return -1;\n        }\n        x = (x - 1) / 2;\n        return x;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a != 1 + 8 * n) return -1;\n        a -= 1;\n        if (a % 2 != 0) return -1;\n        return a / 2 + 1;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        long nth = (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long nth_1 = 1;\n        long nth_2 = 1;\n        long nth_3 = 1;\n        long nth_4 = 1;\n        long nth_5 = 1;\n        long nth_6 = 1;\n        long nth_7 = 1;\n        long nth_8 = 1;\n        long nth_9 = 1;\n        for (int i = 1; i <= n; i++) {\n            nth = nth_1 + nth_2 + nth_3 + nth_4 + nth_5 + nth_6 + nth_7 + nth_8 + nth_9;\n            nth_9 = nth_8;\n            nth_8 = nth_7;\n            nth_7 = nth_6;\n            nth_6 = nth_5;\n            nth_5 = nth_4;\n            nth_4 = nth_3;\n            nth_3 = nth_2;\n            nth_2 = nth_1;\n            nth_1 = nth;\n        }\n        return nth;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2 * n);\n        if (x * (x + 1) == 2 * n)\n            return x;\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return (n * n + n) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        return (x - 1) / 2;",
    "        return n * (3 * n - 2);",
    "        // n = (3*x^2 + x)/2\n        // n = (3*x^2 + x - 2*n)/2\n        // 0 = 3*x^2 + x - 2*n\n        // 0 = x^2 + (1/3)*x - (2/3)*n\n        // x = (-1/3 +- sqrt(1/9 + 4*(2/3)*n))/2\n        // x = (-1 +- sqrt(1 + 4*2*n))/2\n        // x = (-1 +- sqrt(4*n + 1))/2\n        // x = (-1 +- sqrt(4*n + 1))/2\n        // x = (-1 + sqrt(4*n + 1))/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sqrt(4*n + 1) - 1)/2\n        // x = (sq",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3 * x^2 - x) / 2\n        // x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return (a - 1) / 2;\n        }\n        return -1;",
    "        long k = (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return k * (3 * k - 1) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long k = (long)Math.Sqrt(2*n);\n        if (k*(k+1) == 2*n) {\n            return k;\n        }\n        return -1;",
    "        // n = (3*x^2 + x)/2\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*n)/6\n        // x = (sqrt(9*n^2 + 4*n) + 3*",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        // n = (3*n^2 + n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 + sqrt(1 + 24*n))/6\n        // n = (1 +",
    "        // n = (3 * k^2 - k) / 2\n        // n = 3k^2 - k\n        // 3k^2 - k - 2n = 0\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        // k = (1 + sqrt(1 + 24n)) / 6\n        //",
    "        return (n * (3 * n - 2)) / 2;",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * (nth + 1) / 2 == n) {\n            return nth;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 - sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 +",
    "        return n * (3 * n - 2);"
  ]
}