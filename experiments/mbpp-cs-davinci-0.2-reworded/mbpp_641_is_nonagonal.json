{
  "name": "mbpp_641_is_nonagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long nth = n * (3 * n - 2);\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))",
    "        // nth nonagonal number = n * (3 * n - 2) / 2\n        // n = (1 + sqrt(1 + 8 * k)) / 3\n        var sqrt = Math.Sqrt(1 + 8 * n);\n        if (sqrt % 3 != 1) return -1;\n        return (long)((sqrt + 1) / 3);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 8n))",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        // n = (3 * n * n - n) / 2\n        // n = (3 * n^2 - n) / 2\n        // 2n = 3n^2 - n\n        // 2n + n = 3n^2\n        // (2n + n) / 3 = n^2\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2)\n        // (2n + n) / 3 = (n^2",
    "        long nn = (long)Math.Sqrt(1 + 8*n);\n        if (nn*nn == 1 + 8*n) {\n            return (nn - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))/6\n        // n = (1 + sqrt(1 + 24n))",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? 1 : 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8*n))/2\n        // n = (1 +- sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(8 * n + 1);\n        if (a * a == 8 * n + 1)\n            return a;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            x -= 1;\n        }\n        x /= 2;\n        return x * (x + 1) / 2;"
  ]
}