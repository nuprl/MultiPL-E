{
  "name": "mbpp_474_replace_char",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to replace characters in a string.\n    public static string ReplaceChar(string str1, string ch, string newch) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceChar((\"polygon\"), (\"y\"), (\"l\")).Equals((\"pollgon\")));\n    Debug.Assert(ReplaceChar((\"character\"), (\"c\"), (\"a\")).Equals((\"aharaater\")));\n    Debug.Assert(ReplaceChar((\"python\"), (\"l\"), (\"a\")).Equals((\"python\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        return str1.Replace(ch, newch);",
    "        StringBuilder sb = new StringBuilder(str1);\n        for (int i = 0; i < sb.Length; i++) {\n            if (sb[i] == ch[0]) {\n                sb[i] = newch[0];\n            }\n        }\n        return sb.ToString();",
    "        // Write your code here.\n        return str1.Replace(ch, newch);",
    "        // Write your code here.\n        return str1.Replace(ch, newch);",
    "        return str1.Replace(ch, newch);",
    "        StringBuilder sb = new StringBuilder(str1);\n        for (int i = 0; i < sb.Length; i++) {\n            if (sb[i] == ch[0]) {\n                sb[i] = newch[0];\n            }\n        }\n        return sb.ToString();",
    "        return str1.Replace(ch, newch);",
    "        string result = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                result += newch;\n            } else {\n                result += str1[i];\n            }\n        }\n        return result;",
    "        return str1.Replace(ch, newch);",
    "        return str1.Replace(ch, newch);",
    "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                sb.Append(newch);\n            } else {\n                sb.Append(str1[i]);\n            }\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                result += newch;\n            } else {\n                result += str1[i];\n            }\n        }\n        return result;",
    "        return str1.Replace(ch, newch);",
    "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                sb.Append(newch);\n            } else {\n                sb.Append(str1[i]);\n            }\n        }\n        return sb.ToString();",
    "        string str2 = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                str2 += newch;\n            } else {\n                str2 += str1[i];\n            }\n        }\n        return str2;",
    "        return str1.Replace(ch, newch);",
    "        string result = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                result += newch;\n            } else {\n                result += str1[i];\n            }\n        }\n        return result;",
    "        string result = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                result += newch;\n            } else {\n                result += str1[i];\n            }\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.Length; i++) {\n            if (str1[i] == ch[0]) {\n                sb.Append(newch);\n            } else {\n                sb.Append(str1[i]);\n            }\n        }\n        return sb.ToString();",
    "        // Replace all occurrences of ch with newch.\n        // For example, ReplaceChar(\"hello\", \"l\", \"w\") returns \"hewwo\".\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n        // Assume that the input string is a valid string.\n"
  ]
}