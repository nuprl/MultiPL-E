{
  "name": "mbpp_279_is_num_decagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long IsNumDecagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNumDecagonal((3L)) == (27L));\n    Debug.Assert(IsNumDecagonal((7L)) == (175L));\n    Debug.Assert(IsNumDecagonal((10L)) == (370L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 0 or n = 1\n        // n = 1\n        return n;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n)\n            return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n)\n            return x2;\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2 * n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - 3n / 3 - 2n / 3 = 0\n        // n^2 - 5n / 3 = 0\n        // n^2 = 5n / 3\n        // n^2 / n = 5 / 3\n        // n = 5 / 3\n        // n = 1.66666\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3x^2 - x)/2\n        // n = (3x^2 - x - 2n)/2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 1 + 24n = y^2\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24z\n        // y^2 = 24z + 1\n        // y = sqrt(24z + 1)\n        // y must be an integer\n        // 24z + 1 must be a perfect square\n        // z = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24z\n        // y^2 = 24z + 1\n        // y = sqrt(24z + 1)\n        // y must be an integer\n        // 24z + 1 must be a perfect square\n        // z = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24z\n        // y^2 = 24z + 1\n        // y = sqrt(24z + 1)\n        // y must be an integer\n        // 24z + 1 must be a perfect square\n        // z = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24z\n        // y^2 = 24z + 1\n        // y = sqrt(24z + 1)\n        // y must be an integer\n        // 24z + 1 must be a perfect square\n        // z = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24z\n        // y^2 = 24z + 1\n        // y = sqrt(24z + 1)\n        // y must be an integer\n       ",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n = (3 +- sqrt(9 - 8)) / 2\n        // n = (3 +- 1) / 2\n        // n = 1 or 2\n        // n = 1\n        return n;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2 * n / 3 = 0\n        // n^2 - n - 2n/3 = 0\n        // n^2 - 3n/3 - 2n/3 = 0\n        // n^2 - 5n/3 = 0\n        // n^2 = 5n/3\n        // n^2 / n = 5/3\n        // n = 5/3\n        // n = 1.66666667\n        // n is not an integer\n        // n is not a decagonal number\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n && (x % 10) == 3) {\n            return x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (long)Math.Floor((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)Math.Floor((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (x1 - 1) / 2 == n) return x1;\n        if (x2 * (x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = 3x^2 - x\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the thirty-third decagonal number\n        // n = 34",
    "        long a = (long)Math.Sqrt(4 * n + 1);\n        if (a * a == 4 * n + 1 && a % 2 == 1)\n            return a;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n = 0, n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x)\n            return (int)x;\n        return 0;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == Math.Floor(x)) {\n            return (long)x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long x = 1;\n        while (true) {\n            long y = x * (3 * x - 1) / 2;\n            if (y == n) {\n                return x;\n            }\n            if (y > n) {\n                return -1;\n            }\n            x++;\n        }",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 +- sqrt(1 + 8))/2\n        // n = (1/3 +- sqrt(9))/2\n        // n = (1/3 +- 3)/2\n        // n = (1 +- 3)/6\n        // n = 1/6 or 5/6\n        // n = 1 or 5\n        if (n == 1 || n == 5) {\n            return n;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        double x = (Math.Sqrt(40 * n + 9) + 3) / 10;\n        if (x == (long)x)\n            return (long)x;\n        else\n            return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // 3n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12 * 2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(1 + 12 * 2)) / 6\n        // n = (1 - sqrt(25)) / 6\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = -0.666667\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 3)) / 6\n        // n = (1 + sqrt(37)) / 6\n        // n = (1 + 6.08276) / 6\n        // n = 7.08276 / 6\n        // n = 1.18046\n        // n = (1 - sqrt(1 + 12 * 3)) / 6\n        // n = (1 - sqrt(37)) / 6\n        // n = (1 - 6.08276) / 6\n        // n = -5.08276 / 6\n        // n = -0.847127\n        // n = (1 + sqrt(1 + 12 * 4)) / 6\n        // n = (1 + sqrt(49)) / 6\n        // n = (1 + 7) / 6\n        // n = 8 / 6\n        // n = 1.33333\n        // n = (1 - sqrt(1 + 12 * 4)) / 6\n        // n = (1 - sqrt(49)) / 6\n        // n = (1 - 7) / 6\n        // n = -6 / 6\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 5)) / 6\n        // n = (1 + sqrt(61)) / 6\n        // n = (1 + 7.81024) / 6\n        // n = 8.81024 / 6\n        // n = 1.46837\n        // n = (1 - sqrt(1 + 12 *",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (4/3)*(2/3))\n        // n = (1/3) +- sqrt(1 + (8/3))\n        // n = (1/3) +- sqrt(11/3)\n        // n = (1/3) +- sqrt(3)*sqrt(11)\n        // n = (1/3) +- sqrt(33)\n        // n = (1/3) +- 5.74456\n        // n = (1/3) + 5.74456\n        // n = 6.74456\n        // n = 6\n        // n = (1/3) - 5.74456\n        // n = -4.74456\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -4\n        // n = 6\n        // n = -",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n) / 2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (4/3)*(2/3))\n        // n = (1/3) +- sqrt(1 + 8/3)\n        // n = (1/3) +- sqrt(11/3)\n        // n = (1/3) +- (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/3) + (sqrt(11)/3)\n        // n = (1/",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (8/3))\n        // n = (1/3) +- sqrt(1 + 8)\n        // n = (1/3) +- sqrt(9)\n        // n = (1/3) +- 3\n        // n = 1/3 + 3 = 4/3\n        // n = 1/3 - 3 = -2/3\n        // n = 4/3\n        // n = 1\n        return n;",
    "        long x = 1;\n        while (true) {\n            long y = x * (3 * x - 1) / 2;\n            if (y == n) return x;\n            if (y > n) return 0;\n            x++;\n        }",
    "        double a = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (a == (long)a)\n            return (long)a;\n        return -1;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 4 * 2 * n);\n        if (x * x == 1 + 4 * 2 * n && (x - 1) % 4 == 0)\n            return x;\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (x1 - 1) / 2 == n) return x1;\n        if (x2 * (x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        var n1 = (1 + Math.Sqrt(1 + 12*n))/6;\n        var n2 = (1 - Math.Sqrt(1 + 12*n))/6;\n        if (n1 == (long)n1) return (long)n1;\n        if (n2 == (long)n2) return (long)n2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not valid\n        // n = 1 is valid\n        // n = 1 is the first decagonal number\n        // n = 10 is the second decagonal number\n        // n = 19 is the third decagonal number\n        // n = 28 is the fourth decagonal number\n        // n = 37 is the fifth decagonal number\n        // n = 46 is the sixth decagonal number\n        // n = 55 is the seventh decagonal number\n        // n = 64 is the eighth decagonal number\n        // n = 73 is the ninth decagonal number\n        // n = 82 is the tenth decagonal number\n        // n = 91 is the eleventh decagonal number\n        // n = 100 is the twelfth decagonal number\n        // n = 109 is the thirteenth decagonal number\n        // n = 118 is the fourteenth decagonal number\n        // n = 127 is the fifteenth decagonal number\n        // n = 136 is the sixteenth decagonal number\n        // n = 145 is the seventeenth decagonal number\n        // n = 154 is the eighteenth decagonal number\n        // n = 163 is the nineteenth decagonal number\n        // n = 172 is the twentieth decagonal number\n        // n = 181 is the twenty-first decagonal number\n        // n = 190 is the twenty-second decagonal number\n        // n = 199 is the twenty-third decagonal number\n        // n = 208 is the twenty-fourth decagonal number\n        // n = 217 is the twenty-fifth decagonal number\n        // n = 226 is the twenty-sixth decagonal number\n        // n = 235 is the twenty-seventh decagonal number\n        // n = 244 is the twenty-eighth decagonal number\n        // n = 253 is the twenty-ninth decagonal number\n        // n = 262 is the thirtieth decagonal number\n        // n = 271 is the thirty-first decagonal number\n        // n = 280 is the thirty-second decagonal number\n        // n = 289 is the thirty-third decagonal number\n",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (8/3))\n        // n = (1/3) +- sqrt(1 + 8)\n        // n = (1/3) +- sqrt(9)\n        // n = (1/3) +- 3\n        // n = 1/3 + 3\n        // n = 4/3\n        // n = 1\n        return n;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        return n;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - 3n / 3 = 2n / 3\n        // n^2 - 3n = 2n\n        // n^2 - 5n = 0\n        // n(n - 5) = 0\n        // n = 0 or n = 5\n        // n = 5\n        return n;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        else if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        else {\n            return 0;\n        }",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the thirty-third decagonal number\n        // n = 34",
    "        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == Math.Floor(x)) {\n            return n;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == Math.Floor(x)) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt(1 + 8*n) - 1)/2\n        // n = (sqrt",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (8/3))\n        // n = (1/3) +- sqrt(1 + 8)\n        // n = (1/3) +- sqrt(9)\n        // n = (1/3) +- 3\n        // n = (1/3) + 3\n        // n = 4\n        // n = (1/3) - 3\n        // n = -2.66666...\n        // n = -3\n        // n = -2\n        // n = -1\n        // n = 0\n        // n = 1\n        // n = 2\n        // n = 3\n        // n = 4\n        // n = 5\n        // n = 6\n        // n = 7\n        // n = 8\n        // n = 9\n        // n = 10\n        // n = 11\n        // n = 12\n        // n = 13\n        // n = 14\n        // n = 15\n        // n = 16\n        // n = 17\n        // n = 18\n        // n = 19\n        // n = 20\n        // n = 21\n        // n = 22\n        // n = 23\n        // n = 24\n        // n = 25\n        // n = 26\n        // n = 27\n        // n = 28\n        // n = 29\n        // n = 30\n        // n = 31\n        // n = 32\n        // n = 33\n        // n = 34\n        // n = 35\n        // n = 36\n        // n = 37\n        // n = 38\n        // n = 39\n        // n = 40\n        // n = 41\n        // n = 42\n        // n = 43\n        // n = 44\n        // n = 45\n        // n = 46\n        // n = 47\n        // n = 48\n        // n = 49\n        // n = 50\n        // n = 51\n        // n = 52\n        // n = 53",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not true\n        // n = 1 is true\n        // n = 1 is the first decagonal number\n        // n = 1 is the 1st decagonal number\n        // n = 2 is the 2nd decagonal number\n        // n = 3 is the 3rd decagonal number\n        // n = 4 is the 4th decagonal number\n        // n = 5 is the 5th decagonal number\n        // n = 6 is the 6th decagonal number\n        // n = 7 is the 7th decagonal number\n        // n = 8 is the 8th decagonal number\n        // n = 9 is the 9th decagonal number\n        // n = 10 is the 10th decagonal number\n        // n = 11 is the 11th decagonal number\n        // n = 12 is the 12th decagonal number\n        // n = 13 is the 13th decagonal number\n        // n = 14 is the 14th decagonal number\n        // n = 15 is the 15th decagonal number\n        // n = 16 is the 16th decagonal number\n        // n = 17 is the 17th decagonal number\n        // n = 18 is the 18th decagonal number\n        // n = 19 is the 19th decagonal number\n        // n = 20 is the 20th decagonal number\n        // n = 21 is the 21st decagonal number\n        // n = 22 is the 22nd decagonal number\n        // n = 23 is the 23rd decagonal number\n        // n = 24 is the 24th decagonal number\n        // n = 25 is the 25th decagonal number\n        // n = 26 is the 26th decagonal number\n        // n = 27 is the 27th decagonal number\n        // n = 28 is the 28th decagonal number\n        // n = 29 is the 29th decagonal number\n        // n = 30 is the 30th decagonal number\n        // n = 31 is the 31st decagonal number\n        // n = 32 is the 32nd decagonal number\n        // n = 33",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 3 == 2 && x1 > 0) {\n            return x1;\n        }\n        if (x2 % 3 == 2 && x2 > 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (-1 +",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return -1;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n)\n            return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n)\n            return x2;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sq",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 1/6 or 5/6\n        // n = 1/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (1 - 5)/6\n        // n = -4/6\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n =",
    "        long nthDecagonal = 0;\n        for (int i = 1; i <= n; i++) {\n            nthDecagonal = i * (3 * i - 1) / 2;\n        }\n        return nthDecagonal;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 1 or n = 1\n        // n = 1\n        return n;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x) return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (long)Math.Ceiling((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)Math.Floor((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3 * n * n - n) / 2\n        // n^2 - 3n + 2 = 0\n        // n = (3 + sqrt(9 + 8)) / 2\n        // n = (3 + sqrt(17)) / 2\n        // n = (3 + 4.123) / 2\n        // n = 3.561\n        // n = 4\n        // 4^2 - 3 * 4 + 2 = 0\n        // 16 - 12 + 2 = 6\n        // 6 = 6\n        // n = (3 - sqrt(17)) / 2\n        // n = (3 - 4.123) / 2\n        // n = -0.561\n        // n = -1\n        // -1^2 - 3 * -1 + 2 = 0\n        // 1 + 3 + 2 = 6\n        // 6 = 6\n        // n = (3 + sqrt(17)) / 2\n        // n = (3 + 4.123) / 2\n        // n = 3.561\n        // n = 4\n        // 4^2 - 3 * 4 + 2 = 0\n        // 16 - 12 + 2 = 6\n        // 6 = 6\n        // n = (3 - sqrt(17)) / 2\n        // n = (3 - 4.123) / 2\n        // n = -0.561\n        // n = -1\n        // -1^2 - 3 * -1 + 2 = 0\n        // 1 + 3 + 2 = 6\n        // 6 = 6\n        // n = (3 + sqrt(17)) / 2\n        // n = (3 + 4.123) / 2\n        // n = 3.561\n        // n = 4\n        // 4^2 - 3 * 4 + 2 = 0\n        // 16 - 12 + 2 = 6\n        // 6 = 6\n        // n = (3 - sqrt(17)) / 2\n        // n = (3 - 4.123) / 2\n        // n = -0.561\n        // n = -1\n        // -1^2 - 3 * -1 + 2 = 0\n        // 1 + 3 + 2 = 6\n        // 6 = 6\n        // n = (3 + sqrt(17)) / 2\n",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n       ",
    "        long nthDecagonal = 0;\n        long nthNum = 0;\n        long nthNumSquared = 0;\n        long nthNumSquaredPlusNthNum = 0;\n        long nthNumSquaredPlusNthNumDividedByTwo = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTen = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwo = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNum = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwo = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOne = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTen = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTenRounded = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTenRoundedSquared = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTenRoundedSquaredMinusNthNumSquared = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTenRoundedSquaredMinusNthNumSquaredDividedByTen = 0;\n        long nthNumSquaredPlusNthNumDividedByTwoPlusTenDividedByTwoMinusNthNumDividedByTwoPlusOneDividedByTenRoundedSquaredMinusNthNumSquaredDividedByTenRounded = 0;\n        long nthNumSquaredPlusNthNumDiv",
    "        // n = (3x^2 - x) / 2\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n^2 + 4n + 1) + 3n + 1) / 6\n        // x = (sqrt(9n",
    "        // n = (3x^2 - x) / 2\n        // n = 3x^2 - x\n        // n + x = 3x^2\n        // (n + x) / 3 = x^2\n        // sqrt((n + x) / 3) = x\n        // x = sqrt((n + x) / 3)\n        // x = sqrt((n + sqrt((n + x) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + sqrt((n + x) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)) / 3)\n        // x = sqrt((n + sqrt((n + sqrt((n + sqrt((",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or n = -1\n        // n = 6\n        return n;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n - 2*k)/2\n        // 3*n^2 - n - 2*k = 0\n        // n^2 - (1/3)*n - (2/3)*k = 0\n        // n = (1/3) +- sqrt((1/3)^2 - 4*(2/3)*k)\n        // n = (1/3) +- sqrt(1/9 - 8/3*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (8/3)*k)\n        // n = (1/3) +- sqrt(1/9 - (",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3) + 2(n - 3) = 0\n        // (n + 2)(n - 3) = 0\n        // n = -2 or n = 3\n        // n = -2 is not a positive integer\n        // n = 3 is the first decagonal number\n        // n = 3 + 10k\n        // n = 3 + 10k\n        // 3 + 10k = (3*n^2 - n)/2\n        // 6 + 20k = 3n^2 - n\n        // 3n^2 - n - 6 - 20k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n - (2/3) - (10/3)k = 0\n        // n^2 - (1/3)n -",
    "        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n - 2*k)/2\n        // 3*n^2 - n - 2*k = 0\n        // n = (1 + sqrt(1 + 12*k))/6\n        // n = (1 - sqrt(1 + 12*k))/6\n        // 1 + 12*k = (1 + sqrt(1 + 12*k))^2\n        // 1 + 12*k = (1 - sqrt(1 + 12*k))^2\n        // 1 + 12*k = 1 + 2*sqrt(1 + 12*k) + (1 + 12*k)\n        // 1 + 12*k = 1 - 2*sqrt(1 + 12*k) + (1 + 12*k)\n        // 1 + 12*k = 2 + (1 + 12*k)\n        // 1 + 12*k = 2 - (1 + 12*k)\n        // 1 + 12*k = 2\n        // k = 1/12\n        // n = (1 + sqrt(1 + 12*1/12))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        // n = (1 + sqrt(13))/6\n        //",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 +",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // The nth decagonal number is given by the formula:\n        // n * (3 * n - 1) / 2\n        // We can use this formula to check if a number is decagonal.\n        // If the formula returns an integer, the number is decagonal.\n        // If the formula returns a decimal, the number is not decagonal.\n        // We can use the modulo operator to check if the result is an integer.\n        // If the result is 0, the number is decagonal.\n        // If the result is not 0, the number is not decagonal.\n        long result = n * (3 * n - 1) / 2;\n        if (result % 1 == 0) {\n            return result;\n        } else {\n            return 0;\n        }",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        // n = (3 * 1^2 - 1) / 2\n        // n = (3 * 1 - 1) / 2\n        // n = 2 / 2\n        // n = 1\n        //",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24",
    "        long nthDecagonal = 0;\n        long nthDecagonalNum = 0;\n        long nthDecagonalNumSqr = 0;\n        long nthDecagonalNumSqrPlus1 = 0;\n        long nthDecagonalNumSqrPlus3 = 0;\n        long nthDecagonalNumSqrPlus4 = 0;\n        long nthDecagonalNumSqrPlus5 = 0;\n        long nthDecagonalNumSqrPlus7 = 0;\n        long nthDecagonalNumSqrPlus8 = 0;\n        long nthDecagonalNumSqrPlus10 = 0;\n        long nthDecagonalNumSqrPlus11 = 0;\n        long nthDecagonalNumSqrPlus12 = 0;\n        long nthDecagonalNumSqrPlus13 = 0;\n        long nthDecagonalNumSqrPlus15 = 0;\n        long nthDecagonalNumSqrPlus16 = 0;\n        long nthDecagonalNumSqrPlus17 = 0;\n        long nthDecagonalNumSqrPlus19 = 0;\n        long nthDecagonalNumSqrPlus20 = 0;\n        long nthDecagonalNumSqrPlus21 = 0;\n        long nthDecagonalNumSqrPlus23 = 0;\n        long nthDecagonalNumSqrPlus24 = 0;\n        long nthDecagonalNumSqrPlus25 = 0;\n        long nthDecagonalNumSqrPlus27 = 0;\n        long nthDecagonalNumSqrPlus28 = 0;\n        long nthDecagonalNumSqrPlus29 = 0;\n        long nthDecagonalNumSqrPlus31 = 0;\n        long nthDecagonalNumSqrPlus32 = 0;\n        long nthDecagonalNumSqrPlus33 = 0;\n        long nthDecagonalNumSqrPlus35 = 0;\n        long nthDecagonalNumSqrPlus36 = 0;\n        long nthDecagonalNumSqrPlus37 = 0;\n        long nthDecagonalNumSqrPlus39 = 0;\n        long nthDecagonalNumSqrPlus40",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24",
    "        long nthDecagonal = 0;\n        long nthDecagonalSquared = 0;\n        long nthDecagonalSquaredPlusOne = 0;\n        long nthDecagonalSquaredPlusThree = 0;\n        long nthDecagonalSquaredPlusFour = 0;\n        long nthDecagonalSquaredPlusSeven = 0;\n        long nthDecagonalSquaredPlusTen = 0;\n        long nthDecagonalSquaredPlusTwelve = 0;\n        long nthDecagonalSquaredPlusThirteen = 0;\n        long nthDecagonalSquaredPlusSixteen = 0;\n        long nthDecagonalSquaredPlusNineteen = 0;\n        long nthDecagonalSquaredPlusTwenty = 0;\n        long nthDecagonalSquaredPlusTwentyThree = 0;\n        long nthDecagonalSquaredPlusTwentyFour = 0;\n        long nthDecagonalSquaredPlusTwentySeven = 0;\n        long nthDecagonalSquaredPlusThirty = 0;\n        long nthDecagonalSquaredPlusThirtyThree = 0;\n        long nthDecagonalSquaredPlusThirtySix = 0;\n        long nthDecagonalSquaredPlusThirtySeven = 0;\n        long nthDecagonalSquaredPlusForty = 0;\n        long nthDecagonalSquaredPlusFortyThree = 0;\n        long nthDecagonalSquaredPlusFortySix = 0;\n        long nthDecagonalSquaredPlusFortySeven = 0;\n        long nthDecagonalSquaredPlusFifty = 0;\n        long nthDecagonalSquaredPlusFiftyThree = 0;\n        long nthDecagonalSquaredPlusFiftySix = 0;\n        long nthDecagonalSquaredPlusFiftySeven = 0;\n        long nthDecagonalSquaredPlusSixty = 0;\n        long nthDecagonalSquaredPlusSixtyThree = 0;\n        long nthDecagonalSquaredPlusSixtySix = 0;\n        long nthDecagonalSquaredPlusSixtySeven = 0;\n        long nthDecagonalSquaredPlusSeventy = 0;\n        long nthDecagonalSquaredPlusSeventyThree = 0;\n        long nthDecagonalSquaredPlusSeventySix = 0;\n        long",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        // n = (3*n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n =",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sq",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        return n;",
    "        long nth = (long)Math.Sqrt(n);\n        if (nth * nth == n) {\n            return nth;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return 0;",
    "        long a = n * (3 * n - 2);\n        long b = (long)Math.Sqrt(a);\n        if (b * b == a) {\n            return b;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        var x1 = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        var x2 = (1 - Math.Sqrt(1 + 24 * n)) / 6;\n        if (x1 == Math.Floor(x1)) return (long)x1;\n        if (x2 == Math.Floor(x2)) return (long)x2;\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = 3x^2 - x\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1/9 + 8/3)",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 +- sqrt(13/9))/2\n        // n = (1/3 +- sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9))/2\n        // n = (1/3 + sqrt(13/9",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - 5)/6\n        // n = -4/6\n        // n = -2/3\n        // n = -1\n        // n = (1 +- sqrt(1 + 12*2n))/6\n        // n = (1 +- sqrt(1 + 24n))/6\n        // n = (1 +- sqrt(25 + 24n))/6\n        // n = (1 +- sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n        // n = (1 + sqrt(25 + 24n))/6\n       ",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 + sqrt(1 + 12*k))/3\n        // n = (1 +",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (4/3)*(2/3))\n        // n = (1/3) +- sqrt(7/9)\n        // n = (1/3) +- (sqrt(7)/3)\n        // n = (1/3) + (sqrt(7)/3)\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7))/3\n        // n = (1 + sqrt(7",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2 * n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 0 or n = 1\n        // n = 1\n        return n;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n/3 = 0\n        // n = (1 +- sqrt(1 + 8n/3)) / 2\n        long n3 = n * 3;\n        long sqrt = (long)Math.Sqrt(1 + n3);\n        if (sqrt * sqrt == 1 + n3) {\n            long n1 = (1 + sqrt) / 2;\n            if (n1 * (3 * n1 - 1) / 2 == n)\n                return n1;\n            long n2 = (1 - sqrt) / 2;\n            if (n2 * (3 * n2 - 1) / 2 == n)\n                return n2;\n        }\n        return 0;",
    "        long nth = n;\n        long num = 0;\n        long i = 1;\n        while (num < nth) {\n            num = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (num == nth) {\n            return 1;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x must be an integer\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3*n^2 - n) / 2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(25)) / 6\n        // n = (-4) / 6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2*n)) / 6\n        // n = (1 + sqrt(1 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n)) / 6\n        // n = (1 + sqrt(25 + 24*n",
    "        long nth = 0;\n        long i = 0;\n        while (nth < n) {\n            i++;\n            nth = i * (3 * i - 1) / 2;\n        }\n        if (nth == n) {\n            return i;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        long a = 3;\n        long b = -1;\n        long c = -2*n;\n        long d = b*b - 4*a*c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2*a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2*a);\n        if (x1 < 0) return x2;\n        if (x2 < 0) return x1;\n        return -1;",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        // The nth decagonal number is given by the formula:\n        // n(3n-1)/2\n        // We can use this formula to check if a number is decagonal.\n        // If the formula returns an integer, then the number is decagonal.\n        // If the formula returns a non-integer, then the number is not decagonal.\n        long result = (long)((n * (3 * n - 1)) / 2);\n        return result;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n)\n            return nth;\n        else\n            return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 +- sqrt(1 + 8*k))/2\n        // n = (-1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1 + sqrt(1 + 8*k))/2\n        // n = (1",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3) + 2(n - 3) = 0\n        // (n + 2)(n - 3) = 0\n        // n = -2 or 3\n        // n = -2 is not a positive integer\n        // n = 3 is the first decagonal number\n        // n = 3 + 10k\n        // n = 3 + 10k\n        // 3 + 10k = (3*n^2 - n)/2\n        // 6 + 20k = 3n^2 - n\n        // 3n^2 - n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0\n        // n^2 - 3n - 6 - 20k = 0",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // Decagonal numbers are of the form n(3n-1)/2\n        // So we can use the quadratic formula to find the nth decagonal number\n        // x = (-b +- sqrt(b^2 - 4ac))/2a\n        // x = (-1 +- sqrt(1 + 12n))/6\n        // x = (-1 +- sqrt(1 + 12n))/6\n        // x = (-1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6\n        // x = (1 + sqrt(1 + 12n))/6",
    "        // n = (3*n^2 - n)/2\n        long a = 3;\n        long b = -1;\n        long c = -2*n;\n        long d = b*b - 4*a*c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d))/(2*a);\n        long x2 = (-b - (long)Math.Sqrt(d))/(2*a);\n        if (x1*(3*x1 - 1)/2 == n) return x1;\n        if (x2*(3*x2 - 1)/2 == n) return x2;\n        return 0;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3 * x^2 - x) / 2\n        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 +- sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the thirty-third decagonal number\n        // n = 34",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        return (long)x;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        long d = 1;\n        while (nth < n) {\n            nth = (d * (3 * d - 1)) / 2;\n            d++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n        long aa = 1;\n        long ab = 1;\n        long ac = 1;\n        long ad = 1;\n        long ae = 1;\n        long af = 1;\n        long ag = 1;\n        long ah = 1;\n        long ai = 1;\n        long aj = 1;\n        long ak = 1;\n        long al = 1;\n        long am = 1;\n        long ao = 1;\n        long ap = 1;\n        long aq = 1;\n        long ar = 1;\n        long as = 1;\n        long at = 1;\n        long au = 1;\n        long av = 1;\n        long aw = 1;\n        long ax = 1;\n        long ay = 1;\n        long az = 1;\n        long ba = 1;\n        long bb = 1;\n        long bc = 1;\n        long bd = 1;\n        long be = 1;\n        long bf = 1;\n        long bg = 1;\n        long bh = 1;\n        long bi = 1;\n        long bj = 1;\n        long bk = 1;\n        long bl = 1;\n        long bm = 1;\n        long bo = 1;\n        long bp = 1;\n        long bq = 1;\n        long br = 1;\n        long bs = 1;\n        long bt = 1;\n        long bu = 1;\n        long b",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        return (long) x;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3x^2 - x)/2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n))/6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x)\n            return (long)x;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        return n;",
    "        long nthDecagonal = 0;\n        long nthDecagonalNum = 0;\n        for (long i = 1; i < n; i++) {\n            nthDecagonalNum = i * (3 * i - 1) / 2;\n            if (nthDecagonalNum == n) {\n                nthDecagonal = nthDecagonalNum;\n                break;\n            }\n        }\n        return nthDecagonal;"
  ]
}