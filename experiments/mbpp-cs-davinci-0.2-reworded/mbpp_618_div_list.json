{
  "name": "mbpp_618_div_list",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to divide two lists element wise.\n    public static List<float> DivList(List<long> nums1, List<long> nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<float>(new float[]{(float)4.0f, (float)2.5f, (float)2.0f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)3L, (long)2L})), (new List<long>(new long[]{(long)1L, (long)4L}))).Equals((new List<float>(new float[]{(float)3.0f, (float)0.5f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<float>(new float[]{(float)1.8f, (float)1.7142857142857142f}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        var result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        var result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add(nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        var result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;",
    "        List<float> result = new List<float>();\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add((float)nums1[i] / (float)nums2[i]);\n        }\n        return result;"
  ]
}