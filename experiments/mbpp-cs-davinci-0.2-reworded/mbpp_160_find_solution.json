{
  "name": "mbpp_160_find_solution",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return new Tuple<long, long>(x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long u1 = 1;\n            long v1 = 0;\n            long u2 = 0;\n            long v2 = 1;\n            while (a != 0) {\n                long q = b / a;\n                long r = b % a;\n                long m = u2 - q * u1;\n                long n = v2 - q * v1;\n                b = a;\n                a = r;\n                u2 = u1;\n                v2 = v1;\n                u1 = m;\n                v1 = n;\n            }\n            x = u2;\n            y = v2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long x1, y1;\n        long d1 = ExtendedEuclid(a1, b1, out x1, out y1);\n        x = x1 * n1;\n        y = y1 * n1;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / gcd;\n        y *= n / gcd;\n        return new long[] { x, y };",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long s = 0;\n            long old_s = 1;\n            long t = 1;\n            long old_t = 0;\n            long r = b;\n            long old_r = a;\n            while (r != 0) {\n                long quotient = old_r / r;\n                long temp = r;\n                r = old_r - quotient * r;\n                old_r = temp;\n                temp = s;\n                s = old_s - quotient * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - quotient * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        }\n        else {\n            x = (n / d) * b / a;\n            y = (n / d) - x * a / b;\n        }\n        return x;",
    "        // Write your code here\n        return null;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return (x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return (x, y);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long a1 = a / d;\n        long b1 = b / d;\n        long q = a1 / b1;\n        long r = a1 % b1;\n        while (r > 0) {\n            long temp = x1;\n            x1 = x - q * x1;\n            x = temp;\n            temp = y1;\n            y1 = y - q * y1;\n            y = temp;\n            a1 = b1;\n            b1 = r;\n            q = a1 / b1;\n            r = a1 % b1;\n        }\n        x = x * (n / d);\n        y = y * (n / d);\n        return new long[] { x, y };",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // Write your code here.\n        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n        while (a % d != 0) {\n            long q = a / d;\n            long r = a % d;\n            long m = x1 - q * x2;\n            long n = y1 - q * y2;\n            x1 = x2;\n            x2 = m;\n            y1 = y2;\n            y2 = n;\n            a = d;\n            d = r;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return new long[] { x, y };",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new Nullable<long>(x);",
    "        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d, b1 = b / d, n1 = n / d;\n        long x1 = 0, y1 = 1;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x2 = x1 - q * x;\n            long y2 = y1 - q * y;\n            x1 = x;\n            y1 = y;\n            x = x2;\n            y = y2;\n            b1 = a1;\n            a1 = r;\n        }\n        return x * n1;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return new Tuple<long, long>(x, y);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (b == 1) {\n            x *= n;\n            y *= n;\n            return x + y;\n        }\n        return null;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return new long[] { x, y };",
    "        // TODO: Implement this function.\n        return null;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;"
  ]
}