{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to reverse a list upto a given position.\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)5L, (long)6L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)4L, (long)6L, (long)7L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)6L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> reversed = new List<long>();\n        for (long i = 0; i < k; i++) {\n            reversed.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            reversed.Add(input[(int)i]);\n        }\n        return reversed;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        var rest = input.Skip((int)k).ToList();\n        result.AddRange(reversed);\n        result.AddRange(rest);\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            result.Insert(0, input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        var i = 0;\n        while (i < k) {\n            result.Add(input[k - i - 1]);\n            i++;\n        }\n        while (i < input.Count) {\n            result.Add(input[i]);\n            i++;\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        if (k > input.Count) {\n            throw new ArgumentOutOfRangeException(\"k\");\n        }\n        var result = new List<long>(input);\n        for (int i = 0; i < k / 2; i++) {\n            var temp = result[i];\n            result[i] = result[k - i - 1];\n            result[k - i - 1] = temp;\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[input.Count - i - 1]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        var i = 0;\n        while (i < k) {\n            output.Add(input[i]);\n            i++;\n        }\n        output.Reverse();\n        while (i < input.Count) {\n            output.Add(input[i]);\n            i++;\n        }\n        return output;",
    "        long len = input.Count;\n        if (k > len) {\n            throw new Exception(\"K is greater than length of array\");\n        }\n        for (long i = 0; i < k / 2; i++) {\n            long temp = input[i];\n            input[i] = input[k - i - 1];\n            input[k - i - 1] = temp;\n        }\n        return input;",
    "        var result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (var i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        if (k > input.Count) {\n            throw new Exception(\"K is greater than the size of the array\");\n        }\n        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for(int i = 0; i < k; i++) {\n            output.Add(input[k - i - 1]);\n        }\n        for(int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>(input);\n        for (int i = 0; i <= k / 2; i++) {\n            long temp = output[i];\n            output[i] = output[k - i];\n            output[k - i] = temp;\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        if (k > input.Count) {\n            return input;\n        }\n        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            result.Insert(0, input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[(int)i]);\n            } else {\n                result.Add(input[(int)i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        if (k > input.Count) {\n            return input;\n        }\n        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[k - i - 1]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        if (k > input.Count) {\n            throw new ArgumentException(\"k is greater than the length of the array\");\n        }\n        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        if (k > input.Count) {\n            throw new ArgumentException(\"k is greater than the length of the list\");\n        }\n        int i = 0;\n        int j = (int)k - 1;\n        while (i < j) {\n            long temp = input[i];\n            input[i] = input[j];\n            input[j] = temp;\n            i++;\n            j--;\n        }\n        return input;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[k - i - 1]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var output = new List<long>();\n        for (var i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (var i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        for (int i = 0; i < k / 2; i++) {\n            long temp = input[i];\n            input[i] = input[k - i - 1];\n            input[k - i - 1] = temp;\n        }\n        return input;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        if (input == null) {\n            return null;\n        }\n        if (k > input.Count) {\n            return null;\n        }\n        if (k == 0) {\n            return input;\n        }\n        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        for (int i = 0; i < k / 2; i++) {\n            long temp = input[i];\n            input[i] = input[k - i - 1];\n            input[k - i - 1] = temp;\n        }\n        return input;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        int i = 0;\n        int j = (int)k;\n        while (i < j) {\n            long temp = input[i];\n            input[i] = input[j];\n            input[j] = temp;\n            i++;\n            j--;\n        }\n        return input;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        if (k > input.Count) {\n            throw new Exception(\"K is greater than the length of the array\");\n        }\n        var result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        if (k > input.Count) {\n            throw new ArgumentException(\"k is greater than the length of the array\");\n        }\n        var output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[input.Count - i - 1]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (var i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (var i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Add(input[(int)k - (int)i - 1]);\n            } else {\n                result.Add(input[(int)i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            }\n            else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        if (k > input.Count) {\n            throw new Exception(\"k is greater than the length of the array\");\n        }\n        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        int i = 0;\n        int j = (int)k - 1;\n        while (i < j) {\n            long temp = input[i];\n            input[i] = input[j];\n            input[j] = temp;\n            i++;\n            j--;\n        }\n        return input;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        long[] arr = input.ToArray();\n        long[] result = new long[arr.Length];\n        for (long i = 0; i < k; i++) {\n            result[i] = arr[k - i - 1];\n        }\n        for (long i = k; i < arr.Length; i++) {\n            result[i] = arr[i];\n        }\n        return result.ToList();",
    "        var result = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        result.AddRange(reversed);\n        result.AddRange(input.Skip((int)k));\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)i]);\n        }\n        result.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        var output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Add(input[(int)k - i - 1]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        for (int i = 0; i < k / 2; i++) {\n            long temp = input[i];\n            input[i] = input[k - i - 1];\n            input[k - i - 1] = temp;\n        }\n        return input;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> reversed = new List<long>();\n        for (int i = 0; i < k; i++) {\n            reversed.Add(input[i]);\n        }\n        reversed.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            reversed.Add(input[i]);\n        }\n        return reversed;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[i]);\n        }\n        result.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)i]);\n        }\n        output.Reverse();\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;"
  ]
}