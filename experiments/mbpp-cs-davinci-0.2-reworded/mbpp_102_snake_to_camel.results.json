{
  "name": "mbpp_102_snake_to_camel",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        StringBuilder sb = new StringBuilder();\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1bdc0b69079545809c25b4a6141534ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1bdc0b69079545809c25b4a6141534ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(c.ToString().ToUpper());\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1).ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var chars = word.ToCharArray();\n        var sb = new StringBuilder();\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == '_') {\n                sb.Append(Char.ToUpper(chars[i + 1]));\n                i++;\n            } else {\n                sb.Append(chars[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a7fd307d3a24c9b9cd8e0427e09b7e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a7fd307d3a24c9b9cd8e0427e09b7e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper());\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                camel.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    result += c.ToString().ToUpper();\n                    isUpper = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0b05bedc12e44dc8b0c00b76cca68e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0b05bedc12e44dc8b0c00b76cca68e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        for (int i = 1; i < words.Length; i++) {\n            words[i] = words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return string.Join(\"\", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a1bc1f59b4e4689820c071b01193d38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a1bc1f59b4e4689820c071b01193d38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else if (isFirst) {\n                camel.Append(c.ToString().ToUpper());\n                isFirst = false;\n            } else {\n                camel.Append(c);\n            }\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        StringBuilder sb = new StringBuilder();\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1bdc0b69079545809c25b4a6141534ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1bdc0b69079545809c25b4a6141534ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = \"\";\n        var isFirst = true;\n        for(var i = 0; i < word.Length; i++) {\n            if(word[i] == '_') {\n                isFirst = true;\n                continue;\n            }\n            if(isFirst) {\n                result += Char.ToUpper(word[i]);\n                isFirst = false;\n            }\n            else {\n                result += word[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                sb.Append(w[0].ToString().ToUpper());\n                sb.Append(w.Substring(1));\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96e09e5afb064e82b4065ebe47e851b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96e09e5afb064e82b4065ebe47e851b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                nextUpper = true;\n            } else {\n                if (nextUpper) {\n                    sb.Append(c.ToString().ToUpper());\n                    nextUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b8660713bd8e4ae78508929fd7b5381c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b8660713bd8e4ae78508929fd7b5381c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Split the string by underscores.\n        string[] parts = word.Split('_');\n        // If there is only one part, return it.\n        if (parts.Length == 1) {\n            return parts[0];\n        }\n        // Otherwise, capitalize the first letter of each part except the first.\n        for (int i = 1; i < parts.Length; i++) {\n            parts[i] = parts[i].Substring(0, 1).ToUpper() + parts[i].Substring(1);\n        }\n        // Join the parts and return the result.\n        return string.Join(\"\", parts);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad0064c2527a47b887fa6875e7950cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad0064c2527a47b887fa6875e7950cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Split the string into an array of words.\n        string[] words = word.Split('_');\n        // Create a new string builder.\n        StringBuilder sb = new StringBuilder();\n        // Loop through all the words.\n        for (int i = 0; i < words.Length; i++) {\n            // If it is the first word, add it to the string builder.\n            if (i == 0) {\n                sb.Append(words[i]);\n            }\n            // If it is not the first word, capitalize the first letter and add it to the string builder.\n            else {\n                sb.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n            }\n        }\n        // Return the string builder as a string.\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <354b7b6655e64f6599b5bf6e4aadb403>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <354b7b6655e64f6599b5bf6e4aadb403>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                sb.Append(word[i + 1].ToString().ToUpper());\n                i++;\n            } else {\n                sb.Append(word[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2612114b10514a15b97d0fdac0b3dbff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2612114b10514a15b97d0fdac0b3dbff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1).ToLower());\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                result += Char.ToUpper(word[i + 1]);\n                i++;\n            } else {\n                result += word[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf3c6c0e5b204270bbbf36f5de3d17e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf3c6c0e5b204270bbbf36f5de3d17e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        foreach (string w in words) {\n            camel += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i].ToLower();\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1).ToLower();\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f34076e7522c4d4e86c29bc3f64810c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f34076e7522c4d4e86c29bc3f64810c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    result += char.ToUpper(c);\n                    isFirst = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else if (isFirst) {\n                sb.Append(c.ToString().ToUpper());\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                nextUpper = true;\n            } else {\n                if (nextUpper) {\n                    sb.Append(char.ToUpper(c));\n                    nextUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4eae448cb3434cb080b6009ef76bccad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4eae448cb3434cb080b6009ef76bccad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Write your code here.\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c0ef73ba8bd0466b9a11e53d4d052f1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c0ef73ba8bd0466b9a11e53d4d052f1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                result.Append(w[0].ToString().ToUpper());\n                result.Append(w.Substring(1).ToLower());\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    sb.Append(Char.ToUpper(c));\n                    isUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad77a01afa3342c6822eb9c38f3fc416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad77a01afa3342c6822eb9c38f3fc416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                result.Append(char.ToUpper(w[0]));\n                result.Append(w.Substring(1));\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextUpper = false;\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                nextUpper = true;\n            } else {\n                if (nextUpper) {\n                    sb.Append(Char.ToUpper(word[i]));\n                    nextUpper = false;\n                } else {\n                    sb.Append(word[i]);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1df132bfa0fe4a35817e24adfbd7686e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1df132bfa0fe4a35817e24adfbd7686e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i][0].ToString().ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6fae14a9cafa4a80b01bd3d43b828617>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6fae14a9cafa4a80b01bd3d43b828617>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // TODO: Implement this function\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04cb0ec52707409fbecef42d5de7e387>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04cb0ec52707409fbecef42d5de7e387>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    result += char.ToUpper(c);\n                    isFirst = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        foreach (string w in words) {\n            camel += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    result += char.ToUpper(c);\n                    isUpper = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f78642fe5f0e4cef97c8de1c07631c59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f78642fe5f0e4cef97c8de1c07631c59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <505bad2349d14199983ec93b9c4ef4d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            camel.Append(char.ToUpper(w[0]));\n            camel.Append(w.Substring(1));\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var first = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                first = true;\n                continue;\n            }\n            if (first) {\n                sb.Append(c.ToString().ToUpper());\n                first = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper());\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                sb.Append(Char.ToUpper(word[i + 1]));\n                i++;\n            } else {\n                sb.Append(word[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc6b929ecd0b4893a27f33e31c1b4919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc6b929ecd0b4893a27f33e31c1b4919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        StringBuilder sb = new StringBuilder();\n        foreach (string w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                result += Char.ToUpper(word[i + 1]);\n                i++;\n            } else {\n                result += word[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf3c6c0e5b204270bbbf36f5de3d17e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf3c6c0e5b204270bbbf36f5de3d17e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    result += char.ToUpper(c);\n                    isFirst = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                sb.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1).ToLower());\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        foreach (string w in words) {\n            camel += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool upper = false;\n        foreach (var c in word) {\n            if (c == '_') {\n                upper = true;\n            } else {\n                if (upper) {\n                    sb.Append(char.ToUpper(c));\n                    upper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <26bb67598f214b86abdb8c04248183a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <26bb67598f214b86abdb8c04248183a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                result.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else if (isFirst) {\n                sb.Append(c.ToString().ToUpper());\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result.Append(words[i]);\n            } else {\n                result.Append(words[i].First().ToString().ToUpper());\n                result.Append(words[i].Substring(1));\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efc3e987549e40eb8e5762c040132a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efc3e987549e40eb8e5762c040132a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(char.ToLower(c));\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool upper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                upper = true;\n            } else {\n                if (upper) {\n                    sb.Append(Char.ToUpper(c));\n                    upper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4371b72dc7d4506a80516870f723814>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4371b72dc7d4506a80516870f723814>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1).ToLower());\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                sb.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            string w = words[i];\n            if (i == 0) {\n                result += w;\n            } else {\n                result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c127607bb04b42e788965f1be18212a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c127607bb04b42e788965f1be18212a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1).ToLower());\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(c.ToString().ToUpper());\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96e09e5afb064e82b4065ebe47e851b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96e09e5afb064e82b4065ebe47e851b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Split the word into an array of characters.\n        char[] letters = word.ToCharArray();\n        // Iterate over the array of characters.\n        for (int i = 0; i < letters.Length; i++) {\n            // If the current character is an underscore,\n            if (letters[i] == '_') {\n                // Convert the next character to uppercase.\n                letters[i + 1] = char.ToUpper(letters[i + 1]);\n                // Remove the underscore.\n                letters[i] = ' ';\n            }\n        }\n        // Return the array of characters as a string.\n        return new string(letters).Replace(\" \", \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <848d029a907d4776b812d1b7f0f72e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <848d029a907d4776b812d1b7f0f72e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                result += word[i + 1].ToString().ToUpper();\n                i++;\n            } else {\n                result += word[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e44dda87c8654adca12a2d91ab045a52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e44dda87c8654adca12a2d91ab045a52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(word[i].ToString().ToUpper());\n                isFirst = false;\n            } else {\n                sb.Append(word[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Convert the string to a char array\n        char[] letters = word.ToCharArray();\n        // Loop through the array\n        for (int i = 0; i < letters.Length; i++) {\n            // If the current letter is an underscore\n            if (letters[i] == '_') {\n                // Convert the next letter to uppercase\n                letters[i + 1] = char.ToUpper(letters[i + 1]);\n                // Remove the underscore\n                letters = letters.Where((val, idx) => idx != i).ToArray();\n                // Decrement the counter\n                i--;\n            }\n        }\n        // Return the new string\n        return new string(letters);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ef45ab3e5de43bbad196d9d182be5af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5ef45ab3e5de43bbad196d9d182be5af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                sb.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                camel.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var first = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                first = true;\n            } else {\n                result.Append(first ? char.ToUpper(c) : c);\n                first = false;\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool upper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                upper = true;\n            } else {\n                sb.Append(upper ? char.ToUpper(c) : c);\n                upper = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ca0ad0f1f2dc4fa49afcdce019865001>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ca0ad0f1f2dc4fa49afcdce019865001>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                sb.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var chars = word.ToCharArray();\n        var result = new StringBuilder();\n        for (int i = 0; i < chars.Length; i++) {\n            if (i == 0) {\n                result.Append(chars[i]);\n            } else if (chars[i] == '_') {\n                result.Append(Char.ToUpper(chars[i + 1]));\n                i++;\n            } else {\n                result.Append(chars[i]);\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a705b2aa6ab44ef8bc5e98fa3ccf1521>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a705b2aa6ab44ef8bc5e98fa3ccf1521>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                result.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        foreach (string w in words) {\n            camel += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                sb.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(Char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string s in words) {\n            result += s.Substring(0, 1).ToUpper() + s.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isUpper = false;\n        foreach (var c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    sb.Append(c.ToString().ToUpper());\n                    isUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93eea57660ff443da8d80c24e5d0abc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93eea57660ff443da8d80c24e5d0abc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper());\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                sb.Append(Char.ToUpper(word[i + 1]));\n                i++;\n            } else {\n                sb.Append(word[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc6b929ecd0b4893a27f33e31c1b4919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc6b929ecd0b4893a27f33e31c1b4919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var first = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                first = true;\n            } else {\n                if (first) {\n                    result.Append(c.ToString().ToUpper());\n                    first = false;\n                } else {\n                    result.Append(c);\n                }\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w[0].ToString().ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var words = word.Split('_');\n        var sb = new StringBuilder();\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1).ToLower());\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                nextUpper = true;\n            } else {\n                if (nextUpper) {\n                    sb.Append(Char.ToUpper(c));\n                    nextUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4be50a13f7c4137abb8df0c1b0c94e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4be50a13f7c4137abb8df0c1b0c94e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            camel.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                nextUpper = true;\n            } else {\n                if (nextUpper) {\n                    sb.Append(Char.ToUpper(c));\n                    nextUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4be50a13f7c4137abb8df0c1b0c94e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c4be50a13f7c4137abb8df0c1b0c94e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Write your code here\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84796824dfa146a89fb752f7514175de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84796824dfa146a89fb752f7514175de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                camel.Append(char.ToUpper(w[0]));\n                camel.Append(w.Substring(1));\n            }\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = words[0];\n        for (int i = 1; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f49ba6abaff4f2ca275dfee4a6a1836>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f49ba6abaff4f2ca275dfee4a6a1836>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    result += c.ToString().ToUpper();\n                    isUpper = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0b05bedc12e44dc8b0c00b76cca68e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0b05bedc12e44dc8b0c00b76cca68e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d13e67af9cf4cf6b9fa6386377457a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        foreach (string w in words) {\n            camel += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach(char c in word) {\n            if(c == '_') {\n                isFirst = true;\n            } else {\n                if(isFirst) {\n                    sb.Append(c.ToString().ToUpper());\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] parts = word.Split('_');\n        StringBuilder sb = new StringBuilder();\n        foreach (string part in parts) {\n            sb.Append(part.Substring(0, 1).ToUpper() + part.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8a79233ca28343809b6fcaa99fbc961d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // Edge case\n        if (word.Length == 0) {\n            return \"\";\n        }\n        // Initialize a string builder\n        StringBuilder sb = new StringBuilder();\n        // Iterate through the string\n        for (int i = 0; i < word.Length; i++) {\n            // If the current character is an underscore\n            if (word[i] == '_') {\n                // If the next character is a letter\n                if (Char.IsLetter(word[i + 1])) {\n                    // Capitalize the next character\n                    sb.Append(Char.ToUpper(word[i + 1]));\n                    // Skip the next character\n                    i++;\n                }\n            }\n            // If the current character is not an underscore\n            else {\n                // Append the current character\n                sb.Append(word[i]);\n            }\n        }\n        // Return the string\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9367acfcf8a249a3b8aa1501cfd36e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9367acfcf8a249a3b8aa1501cfd36e22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    result += Char.ToUpper(c);\n                    isFirst = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach(var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1).ToLower());\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        // split the string into an array of words\n        string[] words = word.Split('_');\n        // create a new string builder\n        StringBuilder sb = new StringBuilder();\n        // loop through the words\n        for (int i = 0; i < words.Length; i++) {\n            // if it is the first word, just add it to the string builder\n            if (i == 0) {\n                sb.Append(words[i]);\n            }\n            // if it is not the first word, capitalize the first letter and add it to the string builder\n            else {\n                sb.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n            }\n        }\n        // return the string builder as a string\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5a71738907b54718bc87ebd3bcbcb4c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5a71738907b54718bc87ebd3bcbcb4c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                result += char.ToUpper(word[i + 1]);\n                i++;\n            } else {\n                result += word[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43aed886563545339f1ee89f1c64a4c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <43aed886563545339f1ee89f1c64a4c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        StringBuilder sb = new StringBuilder();\n        bool nextIsUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                nextIsUpper = true;\n            } else {\n                if (nextIsUpper) {\n                    sb.Append(char.ToUpper(c));\n                    nextIsUpper = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123209,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b26c8e91c4e44a1bd21e4060b776947>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b26c8e91c4e44a1bd21e4060b776947>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        sb.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            sb.Append(words[i].Substring(0, 1).ToUpper());\n            sb.Append(words[i].Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5b82f40fb89405ebf83a0bb901315d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string result = \"\";\n        bool isUpper = false;\n        foreach (char c in word) {\n            if (c == '_') {\n                isUpper = true;\n            } else {\n                if (isUpper) {\n                    result += char.ToUpper(c);\n                    isUpper = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f78642fe5f0e4cef97c8de1c07631c59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f78642fe5f0e4cef97c8de1c07631c59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var camel = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                camel.Append(isFirst ? char.ToUpper(c) : c);\n                isFirst = false;\n            }\n        }\n        return camel.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(char.ToUpper(w[0]));\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        string[] words = word.Split('_');\n        string camel = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                camel += words[i];\n            } else {\n                camel += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return camel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abe2c236f9624510960fb539c016f112>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}