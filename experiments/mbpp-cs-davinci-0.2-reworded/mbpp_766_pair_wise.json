{
  "name": "mbpp_766_pair_wise",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    public static List<long> PairWise(List<long> l1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))).Equals((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))).Equals((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 5L), (Tuple<long, long>)Tuple.Create(5L, 7L), (Tuple<long, long>)Tuple.Create(7L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)5L, (long)1L, (long)9L, (long)7L, (long)10L}))).Equals((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(1L, 9L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(7L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L), (Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> ans = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            ans.Add(l1[i] * l1[i + 1]);\n        }\n        return ans;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            result.Add(l1[i] + l1[i + 1]);\n        }\n        return result;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] + l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i]);\n            l2.Add(l1[i + 1]);\n        }\n        return l2;",
    "        List<long> l2 = new List<long>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            l2.Add(l1[i] * l1[i + 1]);\n        }\n        return l2;"
  ]
}