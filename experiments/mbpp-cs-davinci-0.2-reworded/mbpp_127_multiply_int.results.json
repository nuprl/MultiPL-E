{
  "name": "mbpp_127_multiply_int",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long sum = 0;\n        for (int i = 0; i < y; i++) {\n            sum += x;\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwdjxrwm.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = Add(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4grz7o26.cs(14,26): error CS0103: The name 'Add' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x == long.MinValue) {\n            if (y == -1) {\n                return long.MaxValue;\n            }\n            return 0;\n        }\n        if (y == long.MinValue) {\n            if (x == -1) {\n                return long.MaxValue;\n            }\n            return 0;\n        }\n        if (x < 0) {\n            if (y < 0) {\n                return MultiplyInt(-x, -y);\n            }\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <842e25acc2e54f32965c22944cb3d627>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <842e25acc2e54f32965c22944cb3d627>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0)\n            return 0;\n        if (x == 1)\n            return y;\n        if (y == 1)\n            return x;\n        if (x == -1)\n            return -y;\n        if (y == -1)\n            return -x;\n        if (x == -2)\n            return y & 1 == 0 ? y : -y;\n        if (y == -2)\n            return x & 1 == 0 ? x : -x;\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk22gnqhv.cs(22,20): error CS0019: Operator '&' cannot be applied to operands of type 'long' and 'bool'\n/tmp/tmpk22gnqhv.cs(24,20): error CS0019: Operator '&' cannot be applied to operands of type 'long' and 'bool'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == Int32.MinValue) {\n            if (y == -1) return Int32.MaxValue;\n            if (y == Int32.MinValue) return 1;\n            if (y == Int32.MaxValue) return Int32.MinValue;\n        }\n        if (y == Int32.MinValue) {\n            if (x == -1) return Int32.MaxValue;\n            if (x == Int32.MinValue) return 1;\n            if (x == Int32.MaxValue) return Int32.MinValue;\n        }\n        if (x == Int32.MaxValue) {\n            if (y == -1) return Int32.MinValue;\n            if (y == Int32.MinValue) return -1;\n            if (y == Int32.MaxValue) return 1;\n        }\n        if (y == Int32.MaxValue) {\n            if (x == -1) return Int32.MinValue;\n            if (x == Int32.MinValue) return -1;\n            if (x == Int32.MaxValue) return 1;\n        }\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) result += x;\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == long.MinValue) {\n            if (y == -1) return long.MaxValue;\n            return 0;\n        }\n        if (y == long.MinValue) {\n            if (x == -1) return long.MaxValue;\n            return 0;\n        }\n        if (x < 0) {\n            if (y < 0) return MultiplyInt(-x, -y);\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) return -MultiplyInt(x, -y);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) result += x;\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == 2) return y << 1;\n        if (y == 2) return x << 1;\n        if (x == -2) return -(y << 1);\n        if (y == -2) return -(x << 1);\n        if (x == 3) return y + y + y;\n        if (y == 3) return x + x + x;\n        if (x == -3) return -(y + y + y);\n        if (y == -3) return -(x + x + x);\n        if (x == 4) return y << 2;\n        if (y == 4) return x << 2;\n        if (x == -4) return -(y << 2);\n        if (y == -4) return -(x << 2);\n        if (x == 5) return y + y + y + y + y;\n        if (y == 5) return x + x + x + x + x;\n        if (x == -5) return -(y + y + y + y + y);\n        if (y == -5) return -(x + x + x + x + x);\n        if (x == 6) return y + y + y + y + y + y;\n        if (y == 6) return x + x + x + x + x + x;\n        if (x == -6) return -(y + y + y + y + y + y);\n        if (y == -6) return -(x + x + x + x + x + x);\n        if (x == 7) return y + y + y + y + y + y + y;\n        if (y == 7) return x + x + x + x + x + x + x;\n        if (x == -7) return -(y + y + y + y + y + y + y);\n        if (y == -7) return -(x + x + x + x + x + x\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpllqyvjwh.cs(39,52): error CS1026: ) expected\n/tmp/tmpllqyvjwh.cs(39,52): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        if (y == 2) {\n            return x + x;\n        }\n        if (y % 2 == 0) {\n            return MultiplyInt(x, y / 2) + MultiplyInt(x, y / 2);\n        }\n        return MultiplyInt(x, y / 2) + MultiplyInt(x, y / 2) + x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0) {\n            if (y < 0) {\n                return MultiplyInt(-x, -y);\n            } else {\n                return -MultiplyInt(-x, y);\n            }\n        } else {\n            if (y < 0) {\n                return -MultiplyInt(x, -y);\n            } else {\n                return MultiplyInt(x, y);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == Int32.MinValue) {\n            if (y == -1) return Int32.MaxValue;\n            if (y == 1) return Int32.MinValue;\n            return 0;\n        }\n        if (y == Int32.MinValue) {\n            if (x == -1) return Int32.MaxValue;\n            if (x == 1) return Int32.MinValue;\n            return 0;\n        }\n        if (x < 0) {\n            if (y < 0) {\n                return MultiplyInt(-x, -y);\n            } else {\n                return -MultiplyInt(-x, y);\n            }\n        } else {\n            if (y < 0) {\n                return -MultiplyInt(x, -y);\n            } else {\n                return MultiplyIntPos(x, y);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu1w1ribs.cs(36,24): error CS0103: The name 'MultiplyIntPos' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x > y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        while (x > 0) {\n            if ((x & 1) == 1) {\n                result += y;\n            }\n            x >>= 1;\n            y <<= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (x != 0) {\n            if ((x & 1) != 0) {\n                result = AddInt(result, y);\n            }\n            x >>= 1;\n            y <<= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu3sj8c8c.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x > y) {\n            return MultiplyInt(y, x);\n        }\n        long res = 0;\n        while (x > 0) {\n            res += y;\n            x--;\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (x != 0) {\n            if ((x & 1) != 0) {\n                result = AddInt(result, y);\n            }\n            x >>= 1;\n            y <<= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu3sj8c8c.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        return x + MultiplyInt(x, y - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x > y) return MultiplyInt(y, x);\n        return y + MultiplyInt(x, y - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b9a71e6cf394097a57c6ad3826e667b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b9a71e6cf394097a57c6ad3826e667b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = Add(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4grz7o26.cs(14,26): error CS0103: The name 'Add' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <731bebb9f5e34883bd270be9df9bc40f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <731bebb9f5e34883bd270be9df9bc40f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwdjxrwm.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        return x + MultiplyInt(x, y - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        long result = 0;\n        while (x != 0) {\n            if ((x & 1) != 0) {\n                result += y;\n            }\n            x >>= 1;\n            y <<= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result = AddInt(result, x);\n            }\n            x = AddInt(x, x);\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplis2mt41.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n/tmp/tmplis2mt41.cs(16,17): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        while (y > 0) {\n            result += x;\n            y--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0)\n            return 0;\n        if (x == 1)\n            return y;\n        if (y == 1)\n            return x;\n        if (x == -1)\n            return -y;\n        if (y == -1)\n            return -x;\n        if (x == Int32.MinValue) {\n            if (y == -1)\n                return Int32.MaxValue;\n            if (y == Int32.MinValue)\n                return 1;\n        }\n        if (y == Int32.MinValue) {\n            if (x == -1)\n                return Int32.MaxValue;\n            if (x == Int32.MinValue)\n                return 1;\n        }\n        if (x < 0)\n            return -MultiplyInt(-x, y);\n        if (y < 0)\n            return -MultiplyInt(x, -y);\n        if (x < y)\n            return MultiplyInt(y, x);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1)\n                result += x;\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x > y) return MultiplyInt(y, x);\n        long result = 0;\n        for (int i = 0; i < x; i++) {\n            result += y;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        return x + MultiplyInt(x, y - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        long result = 0;\n        if (x < 0) {\n            result = -MultiplyInt(-x, y);\n        } else if (y < 0) {\n            result = -MultiplyInt(x, -y);\n        } else {\n            for (int i = 0; i < y; i++) {\n                result += x;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        long result = 0;\n        for (int i = 0; i < Math.Abs(x); i++) {\n            result += y;\n        }\n        if (x < 0) {\n            result = -result;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwdjxrwm.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) result += x;\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) result += x;\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result = result + x;\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == 2) {\n            return y << 1;\n        }\n        if (y == 2) {\n            return x << 1;\n        }\n        if (x == 3) {\n            return y + (y << 1);\n        }\n        if (y == 3) {\n            return x + (x << 1);\n        }\n        if (x == 4) {\n            return y << 2;\n        }\n        if (y == 4) {\n            return x << 2;\n        }\n        if (x == 5) {\n            return y + (y << 2);\n        }\n        if (y == 5) {\n            return x + (x << 2);\n        }\n        if (x == 6) {\n            return (y << 1) + (y << 2);\n        }\n        if (y == 6) {\n            return (x << 1) + (x << 2);\n        }\n        if (x == 7) {\n            return (y << 3) - y;\n        }\n        if (y == 7) {\n            return (x << 3) - x;\n        }\n        if (x == 8) {\n            return y << 3;\n        }\n        if (y == 8) {\n            return x << 3;\n        }\n        if (x == 9) {\n            return y + (y << 3);\n        }\n        if (y == 9) {\n            return x + (x << 3);\n        }\n        if (x == 10) {\n            return (y << 1) + (y << 3);\n        }\n        if (y == 10) {\n            return (x << 1) + (x << 3);\n        }\n        if (x == 11) {\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp07np9_iv.cs(83,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp07np9_iv.cs(89,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (x > 0) {\n            if ((x & 1) == 1) {\n                result += y;\n            }\n            x >>= 1;\n            y <<= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long ans = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                ans = AddInt(ans, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpveg3rpgx.cs(14,23): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == y) return x * x;\n        if (x == -y) return -(x * x);\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        if (y == 2) return x + x;\n        if (y == 3) return x + x + x;\n        if (y == 4) return x + x + x + x;\n        if (y == 5) return x + x + x + x + x;\n        if (y == 6) return x + x + x + x + x + x;\n        if (y == 7) return x + x + x + x + x + x + x;\n        if (y == 8) return x + x + x + x + x + x + x + x;\n        if (y == 9) return x + x + x + x + x + x + x + x + x;\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x;\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 12) return x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 13) return x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 14) return x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 15) return x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 16) return x + x + x + x + x + x + x + x + x + x + x +\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc4vwem6t.cs(32,72): error CS1525: Invalid expression term '}'\n/tmp/tmpc4vwem6t.cs(32,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        long sum = 0;\n        for (int i = 0; i < y; i++) {\n            sum += x;\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        if (y == 2) return x + x;\n        if (y == 3) return x + x + x;\n        if (y == 4) return x + x + x + x;\n        if (y == 5) return x + x + x + x + x;\n        if (y == 6) return x + x + x + x + x + x;\n        if (y == 7) return x + x + x + x + x + x + x;\n        if (y == 8) return x + x + x + x + x + x + x + x;\n        if (y == 9) return x + x + x + x + x + x + x + x + x;\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x;\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 12) return x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 13) return x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 14) return x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 15) return x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n        if (y == 16) return x + x + x + x + x + x + x + x + x + x + x +\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc4vwem6t.cs(32,72): error CS1525: Invalid expression term '}'\n/tmp/tmpc4vwem6t.cs(32,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        long x_copy = x;\n        long y_copy = y;\n        if (x < 0) {\n            x_copy = -x;\n        }\n        if (y < 0) {\n            y_copy = -y;\n        }\n        while (y_copy != 0) {\n            if ((y_copy & 1) != 0) {\n                result += x_copy;\n            }\n            x_copy <<= 1;\n            y_copy >>= 1;\n        }\n        if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n            result = -result;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        long result = 0;\n        for (long i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (y == 0) return 0;\n        if (y == 1) return x;\n        long z = MultiplyInt(x, y / 2);\n        if (y % 2 == 0) return 2 * z;\n        else return x + 2 * z;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwdjxrwm.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        while (y > 0) {\n            result += x;\n            y--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        long z = MultiplyInt(x, y >> 1);\n        z += z;\n        if ((y & 1) != 0) {\n            z += x;\n        }\n        return z;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x > y) {\n            return MultiplyInt(y, x);\n        }\n        long result = 0;\n        for (long i = 0; i < x; i++) {\n            result += y;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        for (int i = 0; i < y; i++) {\n            result += x;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55a1cb243aa3401cbd6cb3e5c45258a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        long z = MultiplyInt(x, y >> 1);\n        z += z;\n        if ((y & 1) == 1) {\n            z += x;\n        }\n        return z;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x < 0 && y < 0) {\n            return MultiplyInt(-x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < y) {\n            return MultiplyInt(y, x);\n        }\n        long sum = 0;\n        for (int i = 0; i < y; i++) {\n            sum += x;\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x == -1) return -y;\n        if (y == -1) return -x;\n        if (x == -2) return y << 1;\n        if (y == -2) return x << 1;\n        if (x == 2) return y << 1;\n        if (y == 2) return x << 1;\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwdjxrwm.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91sz3wg8.cs(14,26): error CS0103: The name 'AddInt' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x == Int32.MinValue && y == -1) {\n            return Int32.MaxValue;\n        }\n        if (y == Int32.MinValue && x == -1) {\n            return Int32.MaxValue;\n        }\n        if (x == Int32.MinValue && y == 1) {\n            return Int32.MinValue;\n        }\n        if (y == Int32.MinValue && x == 1) {\n            return Int32.MinValue;\n        }\n        if (x == Int32.MinValue && y == Int32.MinValue) {\n            return 1;\n        }\n        if (x == Int32.MaxValue && y == -1) {\n            return Int32.MinValue + 1;\n        }\n        if (y == Int32.MaxValue && x == -1) {\n            return Int32.MinValue + 1;\n        }\n        if (x == Int32.MaxValue && y == 1) {\n            return Int32.MaxValue;\n        }\n        if (y == Int32.MaxValue && x == 1) {\n            return Int32.MaxValue;\n        }\n        if (x == Int32.MaxValue && y == Int32.MaxValue) {\n            return 1;\n        }\n        if (x == Int32.MinValue) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y == Int32.MinValue) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x < 0) {\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        if (x > y) {\n           \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5fwl8c0e.cs(71,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp5fwl8c0e.cs(77,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        long result = 0;\n        long absX = Math.Abs(x);\n        long absY = Math.Abs(y);\n        for (int i = 0; i < absY; i++) {\n            result += absX;\n        }\n        if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n            return -result;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        if (x == 0 || y == 0) return 0;\n        if (x == 1) return y;\n        if (y == 1) return x;\n        if (x < 0 && y < 0) return MultiplyInt(-x, -y);\n        if (x < 0) return -MultiplyInt(-x, y);\n        if (y < 0) return -MultiplyInt(x, -y);\n        if (x < y) return MultiplyInt(y, x);\n        return x + MultiplyInt(x, y - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}