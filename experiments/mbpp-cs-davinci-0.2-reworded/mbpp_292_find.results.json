{
  "name": "mbpp_292_find",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        long q = n / m;\n        return q;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        if (n < 0) {\n            return -Find(-n, m);\n        }\n        if (m < 0) {\n            return -Find(n, -m);\n        }\n        if (n < m) {\n            return 0;\n        }\n        long q = 1;\n        long t = m;\n        while (t <= n) {\n            t <<= 1;\n            q <<= 1;\n        }\n        return q + Find(n - (t >> 1), m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <64b12512386f47b8ab2e42498dab540b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <64b12512386f47b8ab2e42498dab540b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / (double)m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        // Write your code here\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        // Write your code here\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        // Write your code here\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        // Write your code here\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / (double)m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        // Write your code here\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return (long)Math.Floor((double)n / m);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        return n / m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}