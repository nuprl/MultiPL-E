{
  "name": "mbpp_414_overlapping",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether any value in a sequence exists in a sequence or not.\n    public static bool Overlapping(List<long> list1, List<long> list2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            if (list2.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        var set1 = new HashSet<long>(list1);\n        var set2 = new HashSet<long>(list2);\n        return set1.Overlaps(set2);",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            if (list2.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<long> set1 = new HashSet<long>();\n        HashSet<long> set2 = new HashSet<long>();\n        foreach (long i in list1) {\n            set1.Add(i);\n        }\n        foreach (long i in list2) {\n            set2.Add(i);\n        }\n        foreach (long i in set1) {\n            if (set2.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        foreach (long item1 in list1) {\n            foreach (long item2 in list2) {\n                if (item1 == item2) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        var set1 = new HashSet<long>(list1);\n        var set2 = new HashSet<long>(list2);\n        return set1.Overlaps(set2);",
    "        foreach (var item in list1) {\n            if (list2.Contains(item)) {\n                return true;\n            }\n        }\n        return false;",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        HashSet<long> set1 = new HashSet<long>(list1);\n        HashSet<long> set2 = new HashSet<long>(list2);\n        return set1.Overlaps(set2);",
    "        foreach (var item in list1) {\n            if (list2.Contains(item)) {\n                return true;\n            }\n        }\n        return false;",
    "        // create a hash set of the first list\n        HashSet<long> set = new HashSet<long>(list1);\n        // check if any element of the second list is in the hash set\n        foreach (long element in list2) {\n            if (set.Contains(element)) {\n                return true;\n            }\n        }\n        return false;",
    "        foreach (long item in list1) {\n            if (list2.Contains(item)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>(list1);\n        foreach (long x in list2) {\n            if (set.Contains(x)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<long> set1 = new HashSet<long>(list1);\n        HashSet<long> set2 = new HashSet<long>(list2);\n        return set1.Overlaps(set2);",
    "        foreach (long i in list1) {\n            foreach (long j in list2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;"
  ]
}