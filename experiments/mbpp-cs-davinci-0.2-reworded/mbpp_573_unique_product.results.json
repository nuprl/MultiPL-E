{
  "name": "mbpp_573_unique_product",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        // return 0;\n        long product = 1;\n        foreach (long num in list_data) {\n            if (!list_data.Contains(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <255f7e7474c8442c84de626a569ebcc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <255f7e7474c8442c84de626a569ebcc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique_list.Contains(num)) {\n                unique_list.Add(num);\n            }\n        }\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique_list.Contains(num)) {\n                unique_list.Add(num);\n            }\n        }\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> unique_data = new HashSet<long>();\n        foreach (long item in list_data) {\n            if (!unique_data.Contains(item)) {\n                unique_data.Add(item);\n                result *= item;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique_list.Contains(num)) {\n                unique_list.Add(num);\n            }\n        }\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        foreach(long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d1a61a86910646d2b1dbef4d67d81b33>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <490765f23485478caffe80e689871f39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach(long item in list_data) {\n            if(!set.Contains(item)) {\n                set.Add(item);\n                product *= item;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1973ef7dc30c4ed18e690e50c3e7f904>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long result = 1;\n        HashSet<long> unique_data = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!unique_data.Contains(i)) {\n                unique_data.Add(i);\n                result *= i;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_set.Contains(num)) {\n                unique_set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n                product *= i;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        var unique_numbers = list_data.Distinct();\n        foreach (var number in unique_numbers) {\n            product *= number;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            unique_numbers.Add(num);\n        }\n        long product = 1;\n        foreach (long num in unique_numbers) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                result *= number;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b048d9956d54562bef3f21611375d6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b048d9956d54562bef3f21611375d6d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long prod = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!hs.Contains(i)) {\n                prod *= i;\n                hs.Add(i);\n            }\n        }\n        return prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_set.Contains(num)) {\n                unique_set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        return list_data.Distinct().Aggregate((a, b) => a * b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long l in list_data) {\n            if (!hs.Contains(l)) {\n                product *= l;\n                hs.Add(l);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long num in set_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!hs.Contains(num)) {\n                hs.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <718a26893d654bb2a34a65cfbb2f3da2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in list_data) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                product *= kvp.Key;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <82696ccf8ca3491b918aec255621e352>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_set.Contains(num)) {\n                unique_set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long prod = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                prod *= num;\n            }\n        }\n        return prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        foreach (long num in list_data) {\n            result *= num;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dce6e8cdea1647cab997e54803556bc6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                product *= num;\n                unique.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b048d9956d54562bef3f21611375d6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b048d9956d54562bef3f21611375d6d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90bba4e0ff3842809f7aced6f26e9496>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (set.Contains(num)) {\n                product *= num;\n            } else {\n                set.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7495efbe0e4a404b98947a977ce4f3cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7495efbe0e4a404b98947a977ce4f3cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in list_data) {\n            if(!set.Contains(num)) {\n                product *= num;\n                set.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7247e2f4946e4386acf29e85e876dbcd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7247e2f4946e4386acf29e85e876dbcd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in list_data) {\n            if(!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        for (int i = 0; i < list_data.Count; i++) {\n            if (!unique_list.Contains(list_data[i])) {\n                unique_list.Add(list_data[i]);\n            }\n        }\n        for (int i = 0; i < unique_list.Count; i++) {\n            product *= unique_list[i];\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n                result *= i;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a3b846017a4f95accd2158c09bdeed>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        for (int i = 0; i < list_data.Count; i++) {\n            if (!unique_list.Contains(list_data[i])) {\n                unique_list.Add(list_data[i]);\n            }\n        }\n        for (int i = 0; i < unique_list.Count; i++) {\n            product *= unique_list[i];\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long num in set_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        var unique_list = list_data.Distinct();\n        foreach (var item in unique_list) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                product *= num;\n                unique.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1973ef7dc30c4ed18e690e50c3e7f904>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach(long i in list_data) {\n            if(!unique.Contains(i)) {\n                unique.Add(i);\n                result *= i;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!hs.Contains(num)) {\n                hs.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59d3e99f5f3f43a7871eaa6ac31af207>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59d3e99f5f3f43a7871eaa6ac31af207>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long item in list_data) {\n            if (dict.ContainsKey(item)) {\n                dict[item] += 1;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result *= kvp.Key;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <46ed33da778f488796bf793341117114>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach(long num in list_data) {\n            if(!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!hs.Contains(num)) {\n                product *= num;\n                hs.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in list_data) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> entry in dict) {\n            if (entry.Value == 1) {\n                result *= entry.Key;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e108d7753f2d43e58c6e14b4e364fb1f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique_list.Contains(num)) {\n                unique_list.Add(num);\n            }\n        }\n        foreach (long num in unique_list) {\n            result *= num;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        foreach (long num in list_data) {\n            result *= num;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce80c6863c8740e69309770f9b222776>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!set.Contains(i)) {\n                product *= i;\n                set.Add(i);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c752c5d066f3445aaa778e02649a7dd9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3a89a07720648509323a60c340fd5b5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n                product *= i;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!set.Contains(i)) {\n                set.Add(i);\n                product *= i;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3a89a07720648509323a60c340fd5b5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4aea93fb0258459d9f5fa1b9d35da66f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_set.Contains(num)) {\n                unique_set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique = new List<long>();\n        for (int i = 0; i < list_data.Count; i++) {\n            if (!unique.Contains(list_data[i])) {\n                unique.Add(list_data[i]);\n            }\n        }\n        for (int i = 0; i < unique.Count; i++) {\n            product *= unique[i];\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <59d3e99f5f3f43a7871eaa6ac31af207>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        List<long> unique_list = list_data.Distinct().ToList();\n        foreach (long num in unique_list) {\n            result *= num;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        var unique_values = list_data.Distinct();\n        foreach (var value in unique_values) {\n            product *= value;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in list_data) {\n            if(!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a3b846017a4f95accd2158c09bdeed>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (set.Contains(num)) {\n                continue;\n            }\n            set.Add(num);\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                result *= list_data[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04bc16c906774bebb8073f62480c2b6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = list_data.Distinct().ToList();\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7247e2f4946e4386acf29e85e876dbcd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4aea93fb0258459d9f5fa1b9d35da66f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        var unique = list_data.Distinct();\n        foreach (var item in unique) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_data = new HashSet<long>();\n        foreach (long item in list_data) {\n            if (!unique_data.Contains(item)) {\n                unique_data.Add(item);\n                product *= item;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long item in list_data) {\n            if (!hs.Contains(item)) {\n                product *= item;\n                hs.Add(item);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long item in list_data) {\n            if (!unique_set.Contains(item)) {\n                unique_set.Add(item);\n                product *= item;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long item in list_data) {\n            if (!unique_list.Contains(item)) {\n                unique_list.Add(item);\n            }\n        }\n        foreach (long item in unique_list) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dbca566bae44ed5a22ebca8d59fb5cf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long x in set_data) {\n            product *= x;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        for (int i = 0; i < list_data.Count; i++) {\n            if (!unique_list.Contains(list_data[i])) {\n                unique_list.Add(list_data[i]);\n            }\n        }\n        for (int i = 0; i < unique_list.Count; i++) {\n            product *= unique_list[i];\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a3b846017a4f95accd2158c09bdeed>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                result *= number;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7247e2f4946e4386acf29e85e876dbcd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                result *= number;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (!list_data.Contains(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9bf3d38b3cb4e768dc1f2bf8cbb2b7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9bf3d38b3cb4e768dc1f2bf8cbb2b7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here\n        long product = 1;\n        foreach (long num in list_data) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <490765f23485478caffe80e689871f39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        var unique_list = list_data.Distinct();\n        foreach (var item in unique_list) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        foreach (long num in list_data) {\n            if (result % num != 0) {\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bd2a67f03dc410b9c56830b69465701>:0 \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by zero.\n  at Problem.UniqueProduct (System.Collections.Generic.List`1[T] list_data) [0x00017] in <8bd2a67f03dc410b9c56830b69465701>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <8bd2a67f03dc410b9c56830b69465701>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.\n  at Problem.UniqueProduct (System.Collections.Generic.List`1[T] list_data) [0x00017] in <8bd2a67f03dc410b9c56830b69465701>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <8bd2a67f03dc410b9c56830b69465701>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long item in set_data) {\n            result *= item;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long item in list_data) {\n            if (!unique_list.Contains(item)) {\n                unique_list.Add(item);\n                result *= item;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90bba4e0ff3842809f7aced6f26e9496>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        foreach (long num in list_data) {\n            result *= num;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce80c6863c8740e69309770f9b222776>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        var unique_list = list_data.Distinct();\n        foreach (var item in unique_list) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_data = new HashSet<long>();\n        foreach (long item in list_data) {\n            if (!unique_data.Contains(item)) {\n                unique_data.Add(item);\n                product *= item;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in list_data) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result *= pair.Key;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f7506f893d4e4a5091915d8dec1c10c6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        foreach (long num in list_data) {\n            if (result % num != 0) {\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bd2a67f03dc410b9c56830b69465701>:0 \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by zero.\n  at Problem.UniqueProduct (System.Collections.Generic.List`1[T] list_data) [0x00017] in <8bd2a67f03dc410b9c56830b69465701>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <8bd2a67f03dc410b9c56830b69465701>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.\n  at Problem.UniqueProduct (System.Collections.Generic.List`1[T] list_data) [0x00017] in <8bd2a67f03dc410b9c56830b69465701>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <8bd2a67f03dc410b9c56830b69465701>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long result = 1;\n        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_set.Contains(num)) {\n                unique_set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90bba4e0ff3842809f7aced6f26e9496>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long number in set_data) {\n            product *= number;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique_numbers.Contains(num)) {\n                unique_numbers.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here.\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90bba4e0ff3842809f7aced6f26e9496>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                product *= number;\n                unique_numbers.Add(number);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                product *= num;\n                unique.Add(num);\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        long product = 1;\n        List<long> unique_list = list_data.Distinct().ToList();\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c81e55a3438549ba8d9cc23dea10f5ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c81e55a3438549ba8d9cc23dea10f5ba>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.Count; i++) {\n            if (list_data.IndexOf(list_data[i]) == list_data.LastIndexOf(list_data[i])) {\n                product *= list_data[i];\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90bba4e0ff3842809f7aced6f26e9496>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        var unique = list_data.Distinct();\n        foreach (var item in unique) {\n            product *= item;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (var item in list_data) {\n            if (!unique.Contains(item)) {\n                unique.Add(item);\n                product *= item;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n                product *= i;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123672,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        List<long> unique_list = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique_list.Contains(num)) {\n                unique_list.Add(num);\n            }\n        }\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        // Your code here\n        // return 0;\n        return list_data.Distinct().Aggregate(1L, (a, b) => a * b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}