{
  "name": "mbpp_68_is_Monotonic",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing && A[i] > A[i + 1]) {\n                return false;\n            } else if (!isIncreasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <613309e72f044706888e0c4b6bf3a582>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <613309e72f044706888e0c4b6bf3a582>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i+1])\n                increasing = false;\n            if (A[i] < A[i+1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        long prev = A[0];\n        bool increasing = false;\n        bool decreasing = false;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > prev) {\n                increasing = true;\n            }\n            if (A[i] < prev) {\n                decreasing = true;\n            }\n            if (increasing && decreasing) {\n                return false;\n            }\n            prev = A[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for(int i = 0; i < A.Count - 1; i++) {\n            if(A[i] > A[i+1]) {\n                isIncreasing = false;\n            }\n            if(A[i] < A[i+1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i-1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i-1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        long last = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < last) {\n                increasing = false;\n            }\n            if (A[i] > last) {\n                decreasing = false;\n            }\n            last = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i+1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i+1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = false;\n        bool decreasing = false;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                increasing = true;\n            } else if (A[i] > A[i + 1]) {\n                decreasing = true;\n            }\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i+1])\n                increasing = false;\n            if (A[i] < A[i+1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i - 1] > A[i]) {\n                increasing = false;\n            }\n            if (A[i - 1] < A[i]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] < A[i - 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3)\n            return true;\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1])\n                return false;\n            if (!increasing && A[i] < A[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            }\n            if (A[i] > prev) {\n                decreasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1])\n                decreasing = false;\n            if (A[i] > A[i + 1])\n                increasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = false;\n        bool decreasing = false;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                increasing = true;\n            }\n            if (A[i] < A[i - 1]) {\n                decreasing = true;\n            }\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1])\n                decreasing = false;\n            if (A[i] > A[i + 1])\n                increasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[1] >= A[0];\n        for (int i = 2; i < A.Count; i++) {\n            if (increasing) {\n                if (A[i - 1] < A[i]) {\n                    return false;\n                }\n            } else {\n                if (A[i - 1] > A[i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc8e730ff5fb490886c51b50fe2c8812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fc8e730ff5fb490886c51b50fe2c8812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Implement this placeholder.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5a5abd15f664ffea9c6cfee34950626>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i+1])\n                increasing = false;\n            if (A[i] < A[i+1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n\n        bool isIncreasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 2; i < A.Count; i++) {\n            if (increasing && A[i - 1] > A[i]) {\n                return false;\n            }\n            if (!increasing && A[i - 1] < A[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            } else if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        int n = A.Count;\n        bool inc = true;\n        bool dec = true;\n        for (int i = 1; i < n; i++) {\n            if (A[i] < A[i - 1]) {\n                inc = false;\n            }\n            if (A[i] > A[i - 1]) {\n                dec = false;\n            }\n        }\n        return inc || dec;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            }\n            if (A[i] > prev) {\n                decreasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!isIncreasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) return true;\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) return false;\n            if (!increasing && A[i] < A[i + 1]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 2; i < A.Count; i++) {\n            if (increasing && A[i - 1] > A[i]) {\n                return false;\n            }\n            if (!increasing && A[i - 1] < A[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // TODO - you fill in here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8454b90955b64902bd0fc6748426ad79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8454b90955b64902bd0fc6748426ad79>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1])\n                decreasing = false;\n            if (A[i] > A[i + 1])\n                increasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n), Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // return true if the list is monotonic, false otherwise\n        // A monotonic list is a list that is either entirely non-increasing or entirely non-decreasing\n        // A list is non-decreasing if every element is greater than or equal to the previous element\n        // A list is non-increasing if every element is less than or equal to the previous element\n        // For example, [1,2,2,3] is monotonic because it is non-decreasing and [6,5,4,4] is monotonic because it is non-increasing\n        // Note: If the list has 1 or 0 elements, it is considered monotonic\n        // Note: An empty list is considered monotonic\n        // Note: You may use built-in functions to solve this problem, but you may not use a built-in list method\n        // Note: You may not use any built-in sorting methods\n        // Note: You may not use any built-in reverse methods\n        // Note: You may not use any built-in comparison methods\n        // Note: You may not use any built-in equality methods\n        // Note: You may not use any built-in max or min methods\n        // Note: You may not use any built-in arithmetic methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        // Note: You may not use any built-in list methods\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvsdxc3wt.cs(10,24): error CS0161: 'Problem.IsMonotonic(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool isIncreasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (isIncreasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!isIncreasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i+1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i+1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 2; i < A.Count; i++) {\n            if (increasing && A[i - 1] > A[i]) {\n                return false;\n            }\n            if (!increasing && A[i - 1] < A[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[1] > A[0];\n        for (int i = 2; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                if (!increasing) {\n                    return false;\n                }\n            } else if (A[i] < A[i - 1]) {\n                if (increasing) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}