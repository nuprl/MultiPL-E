{
  "name": "mbpp_799_left_rotate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    public static long LeftRotate(long n, long d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftRotate((16L), (2L)) == (64L));\n    Debug.Assert(LeftRotate((10L), (2L)) == (40L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((1L), (3L)) == (8L));\n    Debug.Assert(LeftRotate((5L), (3L)) == (40L));\n    Debug.Assert(LeftRotate((29L), (3L)) == (232L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return (n << (int)d) | (n >> (32 - (int)d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << (int)d) | (n >> (32 - (int)d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << (int)d) | (n >> (32 - (int)d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << d) | (n >> (32 - d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << (int)d) | (n >> (int)(32 - d));",
    "        return (n << (int)d) | (n >> (32 - (int)d));"
  ]
}