{
  "name": "mbpp_392_get_max_sum",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    public static long GetMaxSum(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxSum((60L)) == (106L));\n    Debug.Assert(GetMaxSum((10L)) == (12L));\n    Debug.Assert(GetMaxSum((2L)) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum < n) {\n            return n;\n        }\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));\n        sum = Math.Max(sum, n);\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        else {\n            return n;\n        }",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n == 0) {\n            return 0;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            long maxSum = maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5];\n            if (maxSum < i) {\n                maxSum = i;\n            }\n            maxSums[i] = maxSum;\n        }\n        return maxSums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long max = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return max > n ? max : n;",
    "        if (n == 0) {\n            return 0;\n        }\n\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n\n        return max;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2));\n        sum = Math.Max(sum, GetMaxSum(n / 3));\n        sum = Math.Max(sum, GetMaxSum(n / 4));\n        sum = Math.Max(sum, GetMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long max = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n            cache[i] = max;\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return max;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return maxSum > n ? maxSum : n;",
    "        if (n <= 0) {\n            return 0;\n        } else if (n <= 5) {\n            return n;\n        } else {\n            return Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        }",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12)\n            return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        long maxSum = 0;\n        long[] maxSums = new long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            maxSum = Math.Max(maxSum, GetMaxSum(i, maxSums));\n        }\n        return maxSum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long[] sums = new long[n + 1];\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum += GetMaxSum(half);\n        sum += GetMaxSum(third);\n        sum += GetMaxSum(fourth);\n        sum += GetMaxSum(fifth);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        sums[6] = 6;\n        sums[7] = 7;\n        sums[8] = 8;\n        sums[9] = 9;\n        sums[10] = 10;\n        sums[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            long sum = 0;\n            for (int j = 1; j <= 5; j++) {\n                if (i % j == 0) {\n                    sum += cache[i / j];\n                }\n            }\n\n            cache[i] = Math.Max(sum, i);\n        }\n\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum += GetMaxSum(n / 2);\n        sum += GetMaxSum(n / 3);\n        sum += GetMaxSum(n / 4);\n        sum += GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(sum, n);",
    "        if (n < 12) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] sums = new long[n + 1];\n        for (int i = 0; i < 12; i++) {\n            sums[i] = i;\n        }\n        for (int i = 12; i <= n; i++) {\n            long max = sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5];\n            if (max > i) {\n                sums[i] = max;\n            } else {\n                sums[i] = i;\n            }\n        }\n        return sums[n];",
    "        if (n < 12) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.Max(sum, GetMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long maxSum = 0;\n        long maxSum1 = GetMaxSum(n / 2);\n        long maxSum2 = GetMaxSum(n / 3);\n        long maxSum3 = GetMaxSum(n / 4);\n        long maxSum4 = GetMaxSum(n / 5);\n        maxSum = maxSum1 + maxSum2 + maxSum3 + maxSum4;\n        if (maxSum < n) {\n            maxSum = n;\n        }\n        return maxSum;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            long maxSum = 0;\n            for (long j = 2; j <= 5; j++) {\n                if (i % j == 0) {\n                    maxSum = Math.Max(maxSum, maxSums[i / j]);\n                }\n            }\n            maxSums[i] = Math.Max(maxSum + i, i);\n        }\n        return maxSums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (max < n) {\n            return n;\n        }\n        return max;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long result = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = n;\n        for (int i = 2; i <= 5; i++) {\n            maxSum = Math.Max(maxSum, GetMaxSum(n / i));\n        }\n        return maxSum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        for (int i = 0; i < 12; i++) {\n            cache[i] = i;\n        }\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) return 0;\n        if (n <= 5) return n;\n        long max = n;\n        for (int i = 2; i <= 5; i++) {\n            max = Math.Max(max, GetMaxSum(n / i));\n        }\n        return max;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = 0;\n        long sum = 0;\n        sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        max = Math.Max(sum, n);\n        return max;",
    "        if (n < 12) return n;\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            long sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long a = GetMaxSum(n / 2);\n        long b = GetMaxSum(n / 3);\n        long c = GetMaxSum(n / 4);\n        long d = GetMaxSum(n / 5);\n        long e = GetMaxSum(n / 6);\n        return Math.Max(a + b + c + d + e, n);",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return n;\n        }\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long sum = sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5];\n            sums[i] = Math.Max(sum, i);\n        }\n        return sums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        return GetMaxSum(n, memo);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = n;\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > max) {\n            max = sum;\n        }\n        return max;",
    "        if (n < 0) return 0;\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2));\n        sum = Math.Max(sum, GetMaxSum(n / 3));\n        sum = Math.Max(sum, GetMaxSum(n / 4));\n        sum = Math.Max(sum, GetMaxSum(n / 5));\n        return sum + n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return maxSum > n ? maxSum : n;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum += GetMaxSum(n / 2);\n        sum += GetMaxSum(n / 3);\n        sum += GetMaxSum(n / 4);\n        sum += GetMaxSum(n / 5);\n        if (sum > n) return sum;\n        return n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = 0;\n        for (int i = 2; i <= 5; i++) {\n            maxSum = Math.Max(maxSum, GetMaxSum(n / i));\n        }\n        return maxSum + n;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long maxSum = n;\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            maxSum = Math.Max(maxSum, maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5]);\n            maxSums[i] = maxSum;\n        }\n        return maxSum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            long sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum < n) {\n            return n;\n        }\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));\n        sum = Math.Max(sum, n);\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) return n;\n        long[] maxSum = new long[n + 1];\n        maxSum[0] = 0;\n        maxSum[1] = 1;\n        maxSum[2] = 2;\n        maxSum[3] = 3;\n        maxSum[4] = 4;\n        maxSum[5] = 5;\n        maxSum[6] = 6;\n        maxSum[7] = 7;\n        maxSum[8] = 8;\n        maxSum[9] = 9;\n        maxSum[10] = 10;\n        maxSum[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            maxSum[i] = Math.Max(maxSum[i / 2] + maxSum[i / 3] + maxSum[i / 4] + maxSum[i / 5], i);\n        }\n        return maxSum[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be positive\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            long maxSum = i;\n            for (long j = 2; j <= 5; j++) {\n                if (i % j == 0) {\n                    maxSum = Math.Max(maxSum, maxSums[i / j]);\n                }\n            }\n            maxSums[i] = maxSum;\n        }\n        return maxSums[n];",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));\n        sum = Math.Max(sum, n);\n        return sum;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long sum = 0;\n            if (i % 2 == 0) {\n                sum += cache[i / 2];\n            }\n            if (i % 3 == 0) {\n                sum += cache[i / 3];\n            }\n            if (i % 4 == 0) {\n                sum += cache[i / 4];\n            }\n            if (i % 5 == 0) {\n                sum += cache[i / 5];\n            }\n            cache[i] = Math.Max(sum, i);\n        }\n        return cache[n];",
    "        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum = Math.Max(GetMaxSum(half) + GetMaxSum(third) + GetMaxSum(fourth) + GetMaxSum(fifth), n);\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return max;",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long[] cache = new long[n + 1];\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 2) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        // If n is less than or equal to 5, return n.\n        if (n <= 5) {\n            return n;\n        }\n        // If n is greater than 5, return the maximum of the sum of the max sums of n/2, n/3, n/4, and n/5, and n.\n        return Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            long sum = GetMaxSum(n / i);\n            if (sum > max) max = sum;\n        }\n        return max + n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            long maxSum = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n            maxSums[i] = maxSum;\n        }\n        return maxSums[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += GetMaxSum(n / i);\n        }\n        return Math.Max(n, sum);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            long sum1 = sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5];\n            sums[i] = Math.Max(sum1, i);\n        }\n        return sums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = Math.Max(sum1 + sum2 + sum3 + sum4, n);\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] maxSum = new long[n + 1];\n        maxSum[0] = 0;\n        maxSum[1] = 1;\n        maxSum[2] = 2;\n        maxSum[3] = 3;\n        maxSum[4] = 4;\n        maxSum[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            maxSum[i] = Math.Max(maxSum[i / 2] + maxSum[i / 3] + maxSum[i / 4] + maxSum[i / 5], i);\n        }\n        return maxSum[n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long n2 = n / 2;\n        long n3 = n / 3;\n        long n4 = n / 4;\n        long n5 = n / 5;\n        sum += GetMaxSum(n2);\n        sum += GetMaxSum(n3);\n        sum += GetMaxSum(n4);\n        sum += GetMaxSum(n5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        if (n == 12) {\n            return 13;\n        }\n        if (n == 13) {\n            return 15;\n        }\n        if (n == 14) {\n            return 17;\n        }\n        if (n == 15) {\n            return 19;\n        }\n        if (n == 16) {\n            return 21;\n        }\n        if (n == 17) {\n            return 23;\n        }\n        if (n == 18) {\n            return 25;\n        }\n        if (n == 19) {\n            return 27;\n        }\n        if (n == 20) {\n            return 29;\n        }\n        if (n == 21) {\n            return 31;\n        }\n        if (n == 22) {\n            return 33;\n        }\n        if (n == 23) {\n            return 35;\n        }\n        if (n == 24) {\n            return 37;\n        }\n        if (n == 25) {\n            return 39;\n        }\n        if (n == 26) {\n            return 41;\n        }\n        if (n == 27) {\n            return 43;\n        }\n        if (n == 28) {\n            return 45;\n        }\n        if (n == 29) {\n            return 47;\n        }\n        if (n == 30) {\n            return 49;\n        }\n        if (n == 31) {\n            return 51;\n        }\n        if (n == 32) {\n            return 53;\n        }\n        if (n == 33) {\n            return 55;\n        }\n        if (n == 34) {\n            return 57;\n        }\n        if (n == 35) {\n            return 59;\n        }\n        if (n == 36) {\n            return 61;\n        }\n        if (n == 37) {\n            return 63;\n        }\n        if (n == 38) {\n            return 65;\n        }\n        if (n == 39) {\n            return 67;\n        }\n        if (n == 40) {\n            return 69;\n        }\n       ",
    "        if (n == 0) {\n            return 0;\n        }\n        long maxSum = n;\n        long sum = 0;\n        if (n % 2 == 0) {\n            sum = GetMaxSum(n / 2);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        if (n % 3 == 0) {\n            sum = GetMaxSum(n / 3);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        if (n % 4 == 0) {\n            sum = GetMaxSum(n / 4);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        if (n % 5 == 0) {\n            sum = GetMaxSum(n / 5);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2));\n        sum = Math.Max(sum, GetMaxSum(n / 3));\n        sum = Math.Max(sum, GetMaxSum(n / 4));\n        sum = Math.Max(sum, GetMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(maxSum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long n1 = GetMaxSum(n / 2);\n        long n2 = GetMaxSum(n / 3);\n        long n3 = GetMaxSum(n / 4);\n        long n4 = GetMaxSum(n / 5);\n        sum = n1 + n2 + n3 + n4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        return Math.Max(n, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(maxSum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n < 12) return n;\n        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));\n        sum = Math.Max(sum, n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        if (max > n) {\n            return max;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] arr = new long[n + 1];\n        arr[0] = 0;\n        arr[1] = 1;\n        arr[2] = 2;\n        arr[3] = 3;\n        arr[4] = 4;\n        arr[5] = 5;\n        arr[6] = 6;\n        arr[7] = 7;\n        arr[8] = 8;\n        arr[9] = 9;\n        arr[10] = 10;\n        arr[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            arr[i] = Math.Max(arr[i / 2] + arr[i / 3] + arr[i / 4] + arr[i / 5], i);\n        }\n        return arr[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum += GetMaxSum(half);\n        sum += GetMaxSum(third);\n        sum += GetMaxSum(fourth);\n        sum += GetMaxSum(fifth);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum < n) {\n            return n;\n        }\n        return sum;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        long halfSum = GetMaxSum(half);\n        long thirdSum = GetMaxSum(third);\n        long fourthSum = GetMaxSum(fourth);\n        long fifthSum = GetMaxSum(fifth);\n        sum = Math.Max(halfSum + thirdSum + fourthSum + fifthSum, n);\n        return sum;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long max = 0;\n        sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        max = Math.Max(sum, n);\n        return max;",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return maxSum > n ? maxSum : n;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] sums = new long[n + 1];\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(sum, n);",
    "        if (n < 12) return n;\n        if (n < 1000000) {\n            if (maxSums[n] == 0) {\n                maxSums[n] = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n            }\n            return maxSums[n];\n        }\n        return Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long max = n;\n        long max1 = GetMaxSum(n / 2);\n        long max2 = GetMaxSum(n / 3);\n        long max3 = GetMaxSum(n / 4);\n        long max4 = GetMaxSum(n / 5);\n        if (max1 + max2 + max3 + max4 > max) max = max1 + max2 + max3 + max4;\n        return max;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) return 0;\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        if (n == 6) return 6;\n        if (n == 7) return 7;\n        if (n == 8) return 8;\n        if (n == 9) return 9;\n        if (n == 10) return 10;\n        if (n == 11) return 11;\n        if (n == 12) return 12;\n        if (n == 13) return 13;\n        if (n == 14) return 14;\n        if (n == 15) return 15;\n        if (n == 16) return 16;\n        if (n == 17) return 17;\n        if (n == 18) return 18;\n        if (n == 19) return 19;\n        if (n == 20) return 20;\n        if (n == 21) return 21;\n        if (n == 22) return 22;\n        if (n == 23) return 23;\n        if (n == 24) return 24;\n        if (n == 25) return 25;\n        if (n == 26) return 26;\n        if (n == 27) return 27;\n        if (n == 28) return 28;\n        if (n == 29) return 29;\n        if (n == 30) return 30;\n        if (n == 31) return 31;\n        if (n == 32) return 32;\n        if (n == 33) return 33;\n        if (n == 34) return 34;\n        if (n == 35) return 35;\n        if (n == 36) return 36;\n        if (n == 37) return 37;\n        if (n == 38) return 38;\n        if (n == 39) return 39;\n        if (n == 40) return 40;\n        if (n == 41) return 41;\n        if (n == 42) return 42;\n        if (n == 43) return 43;\n        if (n == 44) return 44;\n        if (n ==",
    "        if (n <= 0)\n            return 0;\n        if (n <= 5)\n            return n;\n        long[] dp = new long[n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return maxSum > n ? maxSum : n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += GetMaxSum(n / i);\n        }\n        return Math.Max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += GetMaxSum(n / i);\n        }\n        return Math.Max(sum, n);",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        for (long i = 2; i <= n; i++) {\n            long max = i;\n            for (long j = 2; j <= 5; j++) {\n                if (i % j == 0) {\n                    max = Math.Max(max, sums[i / j]);\n                }\n            }\n            sums[i] = max;\n        }\n        return sums[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum += GetMaxSum(n / 2);\n        sum += GetMaxSum(n / 3);\n        sum += GetMaxSum(n / 4);\n        sum += GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) return n;\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        sums[6] = 6;\n        sums[7] = 7;\n        sums[8] = 8;\n        sums[9] = 9;\n        sums[10] = 10;\n        sums[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n < 0) return 0;\n        if (n <= 5) return n;\n\n        long maxSum = 0;\n        for (int i = 2; i <= 5; i++) {\n            maxSum = Math.Max(maxSum, GetMaxSum(n / i));\n        }\n        return maxSum + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        long[] maxSum = new long[n + 1];\n        maxSum[0] = 0;\n        maxSum[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            maxSum[i] = Math.Max(maxSum[i / 2] + maxSum[i / 3] + maxSum[i / 4] + maxSum[i / 5], i);\n        }\n        return maxSum[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        return GetMaxSum(n, cache);",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum = Math.Max(GetMaxSum(half) + GetMaxSum(third) + GetMaxSum(fourth) + GetMaxSum(fifth), n);\n        return sum;",
    "        if (n < 12) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = 0;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        if (max > n) {\n            return max;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.Max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[n];",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += GetMaxSum(n / i);\n        }\n        return Math.Max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long half = GetMaxSum(n / 2);\n        long third = GetMaxSum(n / 3);\n        long fourth = GetMaxSum(n / 4);\n        long fifth = GetMaxSum(n / 5);\n        long sum = half + third + fourth + fifth;\n        return Math.Max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = GetMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            long max = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n            cache[i] = max;\n        }\n        return cache[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[n + 1];\n        for (int i = 1; i <= 5; i++) {\n            dp[i] = i;\n        }\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n < 2) {\n            return n;\n        }\n        long sum = n;\n        long sum2 = GetMaxSum(n / 2);\n        long sum3 = GetMaxSum(n / 3);\n        long sum4 = GetMaxSum(n / 4);\n        long sum5 = GetMaxSum(n / 5);\n        if (sum2 + sum3 + sum4 + sum5 > sum) {\n            sum = sum2 + sum3 + sum4 + sum5;\n        }\n        return sum;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum += GetMaxSum(n / 2);\n        sum += GetMaxSum(n / 3);\n        sum += GetMaxSum(n / 4);\n        sum += GetMaxSum(n / 5);\n        if (sum > n) return sum;\n        else return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        // If the number is less than or equal to 0, return 0\n        if (n <= 0) return 0;\n        // If the number is less than or equal to 5, return the number\n        if (n <= 5) return n;\n        // If the number is greater than 5, return the maximum of the number and the sum of the number divided by 2, 3, 4, and 5\n        return Math.Max(n, GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5));",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        sum = Math.Max(sum, GetMaxSum(n / 2));\n        sum = Math.Max(sum, GetMaxSum(n / 3));\n        sum = Math.Max(sum, GetMaxSum(n / 4));\n        sum = Math.Max(sum, GetMaxSum(n / 5));\n        return sum + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        maxSums[6] = 6;\n        maxSums[7] = 7;\n        maxSums[8] = 8;\n        maxSums[9] = 9;\n        maxSums[10] = 10;\n        maxSums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5), n);\n        return sum;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long maxSum = i;\n            if (i % 2 == 0) {\n                maxSum = Math.Max(maxSum, maxSums[i / 2]);\n            }\n            if (i % 3 == 0) {\n                maxSum = Math.Max(maxSum, maxSums[i / 3]);\n            }\n            if (i % 4 == 0) {\n                maxSum = Math.Max(maxSum, maxSums[i / 4]);\n            }\n            if (i % 5 == 0) {\n                maxSum = Math.Max(maxSum, maxSums[i / 5]);\n            }\n            maxSums[i] = maxSum;\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(maxSum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (long i = 6; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) return n;\n        long[] sums = new long[n + 1];\n        sums[0] = 0;\n        sums[1] = 1;\n        sums[2] = 2;\n        sums[3] = 3;\n        sums[4] = 4;\n        sums[5] = 5;\n        sums[6] = 6;\n        sums[7] = 7;\n        sums[8] = 8;\n        sums[9] = 9;\n        sums[10] = 10;\n        sums[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            sums[i] = Math.Max(sums[i / 2] + sums[i / 3] + sums[i / 4] + sums[i / 5], i);\n        }\n        return sums[n];",
    "        if (n <= 0) return 0;\n        if (n <= 4) return n;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            long sum = GetMaxSum(n / i);\n            if (sum > max) max = sum;\n        }\n        return max + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return maxSum > n ? maxSum : n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.Max(GetMaxSum(n/2) + GetMaxSum(n/3) + GetMaxSum(n/4) + GetMaxSum(n/5), n);\n        return sum;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be greater than or equal to 0\");\n        }\n\n        if (n == 0) {\n            return 0;\n        }\n\n        long maxSum = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = GetMaxSum(n / i);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n\n        return maxSum;",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = GetMaxSum(n / 2) + GetMaxSum(n / 3) + GetMaxSum(n / 4) + GetMaxSum(n / 5);\n        return Math.Max(n, maxSum);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        long halfSum = GetMaxSum(half);\n        long thirdSum = GetMaxSum(third);\n        long fourthSum = GetMaxSum(fourth);\n        long fifthSum = GetMaxSum(fifth);\n        sum = halfSum + thirdSum + fourthSum + fifthSum;\n        if (sum < n) {\n            sum = n;\n        }\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n < 12) return n;\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (long i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        long[] cache = new long[n + 1];\n        return GetMaxSum(n, cache);",
    "        if (n == 0) {\n            return 0;\n        }\n        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.Max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = GetMaxSum(n / 2);\n        long sum2 = GetMaxSum(n / 3);\n        long sum3 = GetMaxSum(n / 4);\n        long sum4 = GetMaxSum(n / 5);\n        sum = sum1 + sum2 + sum3 + sum4;\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum = GetMaxSum(half) + GetMaxSum(third) + GetMaxSum(fourth) + GetMaxSum(fifth);\n        if (sum < n) {\n            return n;\n        }\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] maxSums = new long[n + 1];\n        maxSums[0] = 0;\n        maxSums[1] = 1;\n        maxSums[2] = 2;\n        maxSums[3] = 3;\n        maxSums[4] = 4;\n        maxSums[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            maxSums[i] = Math.Max(maxSums[i / 2] + maxSums[i / 3] + maxSums[i / 4] + maxSums[i / 5], i);\n        }\n        return maxSums[n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.Max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum = GetMaxSum(half) + GetMaxSum(third) + GetMaxSum(fourth) + GetMaxSum(fifth);\n        if (sum > n) {\n            return sum;\n        }\n        return n;"
  ]
}