{
  "name": "mbpp_786_right_insertion",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long RightInsertion(List<long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r + 1) / 2;\n            if (a[m] <= x)\n                l = m;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0, hi = a.Count;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] <= x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        // Binary search\n        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            }\n            else if (a[(int)mid] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left < right) {\n            int mid = (left + right + 1) / 2;\n            if (a[mid] <= x) {\n                left = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return a[left] <= x ? left + 1 : left;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        // a is sorted\n        // return the index of the rightmost element <= x\n        // return -1 if x < a[0]\n        // return a.Count - 1 if x >= a[a.Count - 1]\n        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return hi;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count;\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l < r) {\n            int m = (l + r + 1) / 2;\n            if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m;\n            }\n        }\n        return l;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (a[mid] == x) {\n                return mid;\n            }\n            else if (a[mid] < x) {\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0, hi = a.Count-1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] == x) return mid;\n            if (a[mid] < x) lo = mid + 1;\n            else hi = mid - 1;\n        }\n        return lo;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            }\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        // Binary search for the right insertion point.\n        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        // Binary search for the right insertion point.\n        long lo = 0, hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            }\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid + 1;\n            } else if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] <= x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] <= x) lo = mid + 1;\n            else hi = mid - 1;\n        }\n        return lo;",
    "        // binary search\n        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            }\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        // Binary search for the right insertion point.\n        long lo = 0, hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x < a[(int)mid])\n                hi = mid;\n            else\n                lo = mid + 1;\n        }\n        return lo;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] < x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] == x) {\n                lo = mid + 1;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int lo = 0;\n        int hi = a.Count;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int left = 0;\n        int right = a.Count;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (a[mid] <= x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        // TODO: Implement this function\n        return 0;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        // a is a sorted list of longs\n        // x is the value to insert\n        // return the index where x should be inserted\n        // if x is already in the list, return the index of the rightmost x\n        // if x is greater than all values in the list, return the length of the list\n        // if x is less than all values in the list, return 0\n        // if the list is empty, return 0\n        // if the list is null, throw an exception\n        if (a == null) {\n            throw new ArgumentNullException();\n        }\n        if (a.Count == 0) {\n            return 0;\n        }\n        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                // find rightmost x\n                while (mid < a.Count - 1 && a[mid + 1] == x) {\n                    mid++;\n                }\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi + 1) / 2;\n            if (a[mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid;\n            }\n        }\n        return lo;",
    "        // Binary search\n        long low = 0;\n        long high = a.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (a[(int)mid] == x) {\n                return mid + 1;\n            } else if (a[(int)mid] < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] > x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long lo = 0, hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] <= x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        long lo = 0, hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] <= x)\n                lo = mid + 1;\n            else\n                hi = mid;\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                left = mid + 1;\n            } else if (a[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r + 1) / 2;\n            if (a[m] <= x) {\n                l = m;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo < hi) {\n            int mid = (lo + hi + 1) / 2;\n            if (a[mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid;\n            }\n        }\n        return lo;",
    "        long left = 0, right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        // Binary search for the right insertion point.\n        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        // Binary search for the right insertion point.\n        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (x < a[(int)m]) r = m;\n            else l = m + 1;\n        }\n        return l;",
    "        // Find the right insertion point for x in a[0..n-1]\n        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r + 1) / 2;\n            if (a[m] > x)\n                r = m - 1;\n            else\n                l = m;\n        }\n        return l + 1;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int low = 0;\n        int high = a.Count - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a[mid] == x) {\n                return mid;\n            }\n            if (a[mid] < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] <= x) l = m + 1;\n            else r = m - 1;\n        }\n        return l;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x)\n                lo = mid + 1;\n            else\n                hi = mid - 1;\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        long l = -1, r = a.Count;\n        while (l + 1 < r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] <= x) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n        return r;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int lo = 0;\n        int hi = a.Count;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (x < a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        // Find the first element in the array that is greater than x\n        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        long left = 0;\n        long right = a.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (x < a[(int)mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] == x) {\n                return mid;\n            } else if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0, hi = a.Count;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] <= x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int lo = 0, hi = a.Count;\n        while (lo < hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] <= x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int lo = 0;\n        int hi = n;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (x < a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        // TODO: Implement RightInsertion\n        return 0;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] > x)\n                r = m;\n            else\n                l = m + 1;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        // TODO: Implement RightInsertion\n        return 0;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0, r = n;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x < a[mid]) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int n = a.Count;\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int l = 0, r = a.Count;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] <= x)\n                l = m + 1;\n            else\n                r = m;\n        }\n        return l;",
    "        long l = 0, r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m + 1;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r + 1) / 2;\n            if (a[m] <= x) {\n                l = m;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l + 1;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int lo = 0, hi = a.Count - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] == x) {\n                return mid;\n            } else if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;"
  ]
}