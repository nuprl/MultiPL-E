{
  "name": "mbpp_785_tuple_str_int",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert tuple string to integer tuple.\n    public static long TupleStrInt(string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleStrInt((\"(7, 8, 9)\")) == (long)Tuple.Create(7L, 8L, 9L));\n    Debug.Assert(TupleStrInt((\"(1, 2, 3)\")) == (long)Tuple.Create(1L, 2L, 3L));\n    Debug.Assert(TupleStrInt((\"(4, 5, 6)\")) == (long)Tuple.Create(4L, 5L, 6L));\n    Debug.Assert(TupleStrInt((\"(7, 81, 19)\")) == (long)Tuple.Create(7L, 81L, 19L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 0;\n        int i = 0;\n        while (i < test_str.Length) {\n            if (test_str[i] == '(') {\n                i++;\n                int num = 0;\n                while (test_str[i] != ',') {\n                    num = num * 10 + (test_str[i] - '0');\n                    i++;\n                }\n                result = result * 100 + num;\n                i++;\n                num = 0;\n                while (test_str[i] != ')') {\n                    num = num * 10 + (test_str[i] - '0');\n                    i++;\n                }\n                result = result * 100 + num;\n                i++;\n            }\n        }\n        return result;",
    "        // Convert string to integer tuple.\n        var tuple_str = test_str.Split(',');\n        var tuple_int = new long[tuple_str.Length];\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int[i] = long.Parse(tuple_str[i]);\n        }\n        return tuple_int[0];",
    "        var test_str_split = test_str.Split(',');\n        var test_int_tuple = new long[test_str_split.Length];\n        for (int i = 0; i < test_str_split.Length; i++) {\n            test_int_tuple[i] = long.Parse(test_str_split[i]);\n        }\n        return test_int_tuple[0];",
    "        long result = 0;\n        foreach (char c in test_str) {\n            result = result * 10 + (c - '0');\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        string[] str_arr = test_str.Split(',');\n        long[] int_arr = new long[str_arr.Length];\n        for (int i = 0; i < str_arr.Length; i++) {\n            int_arr[i] = long.Parse(str_arr[i]);\n        }\n        return TupleInt(int_arr);",
    "        var test_str_arr = test_str.Split(',');\n        var test_str_int = new long[test_str_arr.Length];\n        for (int i = 0; i < test_str_arr.Length; i++) {\n            test_str_int[i] = long.Parse(test_str_arr[i]);\n        }\n        return TupleInt(test_str_int);",
    "        var tuple_str = test_str.Split(',');\n        var tuple_int = new long[tuple_str.Length];\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int[i] = long.Parse(tuple_str[i]);\n        }\n        return TupleToInt(tuple_int);",
    "        var test_str_split = test_str.Split(',');\n        var test_str_int = new long[test_str_split.Length];\n        for (int i = 0; i < test_str_split.Length; i++) {\n            test_str_int[i] = long.Parse(test_str_split[i]);\n        }\n        return test_str_int[0];",
    "        var str_arr = test_str.Split(',');\n        var int_arr = new long[str_arr.Length];\n        for (int i = 0; i < str_arr.Length; i++) {\n            int_arr[i] = long.Parse(str_arr[i]);\n        }\n        return TupleInt(int_arr);",
    "        var tuple_str = test_str.Split(',');\n        var tuple_int = new long[tuple_str.Length];\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int[i] = long.Parse(tuple_str[i]);\n        }\n        return tuple_int[0];",
    "        var test_str_split = test_str.Split(',');\n        long test_int = 0;\n        foreach (var str in test_str_split) {\n            test_int = test_int * 100 + int.Parse(str);\n        }\n        return test_int;",
    "        var test_str_split = test_str.Split(',');\n        var test_str_int = new long[test_str_split.Length];\n        for (int i = 0; i < test_str_split.Length; i++) {\n            test_str_int[i] = long.Parse(test_str_split[i]);\n        }\n        return test_str_int[0];",
    "        var tuple = test_str.Split(' ').Select(x => long.Parse(x)).ToArray();\n        return tuple[0] * 1000000 + tuple[1];",
    "        var test_str_split = test_str.Split(',');\n        var test_str_int = new long[test_str_split.Length];\n        for (int i = 0; i < test_str_split.Length; i++) {\n            test_str_int[i] = long.Parse(test_str_split[i]);\n        }\n        return test_str_int[0];",
    "        long result = 0;\n        int i = 0;\n        foreach (char c in test_str) {\n            result += (long)c * (long)Math.Pow(256, i);\n            i++;\n        }\n        return result;",
    "        var test_arr = test_str.Split(',');\n        var test_int = new long[test_arr.Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_int[i] = long.Parse(test_arr[i]);\n        }\n        return TupleInt(test_int);",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        var str = test_str.Split(',');\n        var ints = new long[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n            ints[i] = long.Parse(str[i]);\n        }\n        return ints[0];",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;"
  ]
}