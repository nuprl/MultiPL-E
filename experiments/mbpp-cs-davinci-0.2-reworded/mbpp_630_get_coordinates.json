{
  "name": "mbpp_630_get_coordinates",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    public static List<List<long>> GetCoordinates(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetCoordinates((long)Tuple.Create(3L, 4L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))));\n    Debug.Assert(GetCoordinates((long)Tuple.Create(4L, 5L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))));\n    Debug.Assert(GetCoordinates((long)Tuple.Create(5L, 6L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)7L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        List<long> coord = new List<long>();\n        coord.Add(x);\n        coord.Add(y);\n        coordinates.Add(coord);\n        coord = new List<long>();\n        coord.Add(x + 1);\n        coord.Add(y);\n        coordinates.Add(coord);\n        coord = new List<long>();\n        coord.Add(x);\n        coord.Add(y + 1);\n        coordinates.Add(coord);\n        coord = new List<long>();\n        coord.Add(x - 1);\n        coord.Add(y);\n        coordinates.Add(coord);\n        coord = new List<long>();\n        coord.Add(x);\n        coord.Add(y - 1);\n        coordinates.Add(coord);\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> tup = new List<long>();\n        tup.Add(test_tup);\n        coordinates.Add(tup);\n        for (int i = 0; i < tup.Count; i++) {\n            List<long> new_tup = new List<long>();\n            long t = tup[i];\n            long x = t / 100;\n            long y = t % 100;\n            long new_x = x + 1;\n            long new_y = y + 1;\n            long new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x + 1;\n            new_y = y - 1;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x - 1;\n            new_y = y + 1;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x - 1;\n            new_y = y - 1;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x + 1;\n            new_y = y;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x - 1;\n            new_y = y;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x;\n            new_y = y + 1;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            new_x = x;\n            new_y = y - 1;\n            new_t = new_x * 100 + new_y;\n            new_tup.Add(new_t);\n            foreach (long new",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> test_coord = new List<long>();\n        test_coord.Add(test_tup);\n        coordinates.Add(test_coord);\n        long test_tup_copy = test_tup;\n        long test_tup_copy_2 = test_tup;\n        long test_tup_copy_3 = test_tup;\n        long test_tup_copy_4 = test_tup;\n        long test_tup_copy_5 = test_tup;\n        long test_tup_copy_6 = test_tup;\n        long test_tup_copy_7 = test_tup;\n        long test_tup_copy_8 = test_tup;\n        long test_tup_copy_9 = test_tup;\n        long test_tup_copy_10 = test_tup;\n        long test_tup_copy_11 = test_tup;\n        long test_tup_copy_12 = test_tup;\n        long test_tup_copy_13 = test_tup;\n        long test_tup_copy_14 = test_tup;\n        long test_tup_copy_15 = test_tup;\n        long test_tup_copy_16 = test_tup;\n        long test_tup_copy_17 = test_tup;\n        long test_tup_copy_18 = test_tup;\n        long test_tup_copy_19 = test_tup;\n        long test_tup_copy_20 = test_tup;\n        long test_tup_copy_21 = test_tup;\n        long test_tup_copy_22 = test_tup;\n        long test_tup_copy_23 = test_tup;\n        long test_tup_copy_24 = test_tup;\n        long test_tup_copy_25 = test_tup;\n        long test_tup_copy_26 = test_tup;\n        long test_tup_copy_27 = test_t",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        var test_tup_str = test_tup.ToString();\n        var test_tup_str_len = test_tup_str.Length;\n        var test_tup_str_len_half = test_tup_str_len / 2;\n        var test_tup_str_len_half_floor = (int)Math.Floor((double)test_tup_str_len / 2);\n        var test_tup_str_len_half_ceil = (int)Math.Ceiling((double)test_tup_str_len / 2);\n        var test_tup_str_len_half_ceil_minus_one = test_tup_str_len_half_ceil - 1;\n        var test_tup_str_len_half_ceil_minus_two = test_tup_str_len_half_ceil - 2;\n        var test_tup_str_len_half_ceil_minus_three = test_tup_str_len_half_ceil - 3;\n        var test_tup_str_len_half_ceil_minus_four = test_tup_str_len_half_ceil - 4;\n        var test_tup_str_len_half_ceil_minus_five = test_tup_str_len_half_ceil - 5;\n        var test_tup_str_len_half_ceil_minus_six = test_tup_str_len_half_ceil - 6;\n        var test_tup_str_len_half_ceil_minus_seven = test_tup_str_len_half_ceil - 7;\n        var test_tup_str_len_half_ceil_minus_eight = test_tup_str_len_half_ceil - 8;\n        var test_tup_str_len_half_ceil_minus_nine = test_tup_str_len_half_ceil - 9;\n        var test_tup_str_len_half_ceil_minus_ten = test_tup_str_len_half_ceil - 10;\n       ",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        // Convert the tuple to a string.\n        string test_str = test_tup.ToString();\n        // Create a list to store the coordinates.\n        List<List<long>> coordinates = new List<List<long>>();\n        // Iterate through the string.\n        for (int i = 0; i < test_str.Length; i++) {\n            // Create a list to store the coordinate.\n            List<long> coordinate = new List<long>();\n            // Iterate through the string.\n            for (int j = 0; j < test_str.Length; j++) {\n                // If the indices are the same, add the number to the coordinate.\n                if (i == j) {\n                    coordinate.Add(long.Parse(test_str[j].ToString()));\n                }\n                // Otherwise, add a zero to the coordinate.\n                else {\n                    coordinate.Add(0);\n                }\n            }\n            // Add the coordinate to the list of coordinates.\n            coordinates.Add(coordinate);\n        }\n        // Return the list of coordinates.\n        return coordinates;",
    "        List<long> tup = new List<long>();\n        List<List<long>> tups = new List<List<long>>();\n        while (test_tup > 0) {\n            tup.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        tup.Reverse();\n        for (int i = 0; i < tup.Count; i++) {\n            List<long> tup_copy = new List<long>(tup);\n            tup_copy[i] += 1;\n            tups.Add(tup_copy);\n            tup_copy = new List<long>(tup);\n            tup_copy[i] -= 1;\n            tups.Add(tup_copy);\n        }\n        return tups;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> test_coordinates = new List<long>();\n        test_coordinates.Add(test_tup);\n        coordinates.Add(test_coordinates);\n        for (long i = 1; i < test_tup; i++) {\n            List<long> new_coordinates = new List<long>();\n            for (long j = 0; j < coordinates.Count; j++) {\n                for (long k = 0; k < coordinates[j].Count; k++) {\n                    if (coordinates[j][k] - i > 0) {\n                        new_coordinates.Add(coordinates[j][k] - i);\n                    }\n                }\n            }\n            coordinates.Add(new_coordinates);\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 100;\n        long y = test_tup % 100;\n        long x_min = x - 1;\n        long x_max = x + 1;\n        long y_min = y - 1;\n        long y_max = y + 1;\n        for (long i = x_min; i <= x_max; i++) {\n            for (long j = y_min; j <= y_max; j++) {\n                if (i == x && j == y) {\n                    continue;\n                }\n                coordinates.Add(new List<long>() { i, j });\n            }\n        }\n        return coordinates;",
    "        var test_tup_list = new List<long>();\n        while (test_tup > 0) {\n            test_tup_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        var test_tup_len = test_tup_list.Count;\n        var test_tup_list_rev = test_tup_list.ToArray();\n        Array.Reverse(test_tup_list_rev);\n        var test_tup_list_rev_str = string.Join(\"\", test_tup_list_rev);\n        var test_tup_list_rev_int = long.Parse(test_tup_list_rev_str);\n        var test_tup_list_rev_int_list = new List<long>();\n        while (test_tup_list_rev_int > 0) {\n            test_tup_list_rev_int_list.Add(test_tup_list_rev_int % 10);\n            test_tup_list_rev_int /= 10;\n        }\n        var test_tup_list_rev_int_list_rev = test_tup_list_rev_int_list.ToArray();\n        Array.Reverse(test_tup_list_rev_int_list_rev);\n        var test_tup_list_rev_int_list_rev_str = string.Join(\"\", test_tup_list_rev_int_list_rev);\n        var test_tup_list_rev_int_list_rev_int = long.Parse(test_tup_list_rev_int_list_rev_str);\n        var test_tup_list_rev_int_list_rev_int_list = new List<long>();\n        while (test_tup_list_rev_int_list_rev_int > 0) {\n            test_tup_list_rev_int_list_rev_int_list.Add(test_tup_list_rev_int_list_rev_int % 10);\n            test_tup_list_rev_int_list_",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        long[] x_vals = new long[] { x - 1, x, x + 1 };\n        long[] y_vals = new long[] { y - 1, y, y + 1 };\n        foreach (long x_val in x_vals) {\n            foreach (long y_val in y_vals) {\n                if (x_val == x && y_val == y) {\n                    continue;\n                }\n                coordinates.Add(new List<long>() { x_val, y_val });\n            }\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 100;\n        long y = test_tup % 100;\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x - 1, y - 1 });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x - 1, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x + 1, y - 1 });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x + 1, y + 1 });\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> temp = new List<long>();\n        temp.Add(test_tup);\n        coordinates.Add(temp);\n        long x = test_tup;\n        long y = test_tup;\n        long z = test_tup;\n        long w = test_tup;\n        long v = test_tup;\n        long u = test_tup;\n        long t = test_tup;\n        long s = test_tup;\n        long r = test_tup;\n        long q = test_tup;\n        long p = test_tup;\n        long o = test_tup;\n        long n = test_tup;\n        long m = test_tup;\n        long l = test_tup;\n        long k = test_tup;\n        long j = test_tup;\n        long i = test_tup;\n        long h = test_tup;\n        long g = test_tup;\n        long f = test_tup;\n        long e = test_tup;\n        long d = test_tup;\n        long c = test_tup;\n        long b = test_tup;\n        long a = test_tup;\n        long aa = test_tup;\n        long bb = test_tup;\n        long cc = test_tup;\n        long dd = test_tup;\n        long ee = test_tup;\n        long ff = test_tup;\n        long gg = test_tup;\n        long hh = test_tup;\n        long ii = test_tup;\n        long jj = test_tup;\n        long kk = test_tup;\n        long ll = test_tup;\n        long mm = test_tup;\n        long nn = test_tup;\n        long oo = test_tup;\n        long pp = test_tup;\n        long qq = test_tup;\n        long rr = test_tup;\n        long ss = test_tup;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 100;\n        long y = test_tup % 100;\n        coordinates.Add(new List<long>() { x, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        List<long> coord_tup = new List<long>();\n        coord_tup.Add(x);\n        coord_tup.Add(y);\n        coordinates.Add(coord_tup);\n        coord_tup = new List<long>();\n        coord_tup.Add(x + 1);\n        coord_tup.Add(y);\n        coordinates.Add(coord_tup);\n        coord_tup = new List<long>();\n        coord_tup.Add(x - 1);\n        coord_tup.Add(y);\n        coordinates.Add(coord_tup);\n        coord_tup = new List<long>();\n        coord_tup.Add(x);\n        coord_tup.Add(y + 1);\n        coordinates.Add(coord_tup);\n        coord_tup = new List<long>();\n        coord_tup.Add(x);\n        coord_tup.Add(y - 1);\n        coordinates.Add(coord_tup);\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> tup = new List<long>();\n        tup.Add(test_tup);\n        coordinates.Add(tup);\n        for (int i = 0; i < coordinates.Count; i++) {\n            List<long> coord = coordinates[i];\n            long x = coord[0];\n            long y = coord[1];\n            List<long> new_coord = new List<long>();\n            new_coord.Add(x + 1);\n            new_coord.Add(y);\n            coordinates.Add(new_coord);\n            new_coord = new List<long>();\n            new_coord.Add(x - 1);\n            new_coord.Add(y);\n            coordinates.Add(new_coord);\n            new_coord = new List<long>();\n            new_coord.Add(x);\n            new_coord.Add(y + 1);\n            coordinates.Add(new_coord);\n            new_coord = new List<long>();\n            new_coord.Add(x);\n            new_coord.Add(y - 1);\n            coordinates.Add(new_coord);\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> temp = new List<long>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        temp.Add(x - 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        return coordinates;"
  ]
}