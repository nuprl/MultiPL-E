{
  "name": "mbpp_802_count_rotation",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n    public static long CountRotation(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            }\n            else {\n                high = next - 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            } else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            } else if (arr[next] >= arr[low]) {\n                low = next + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[prev] >= arr[next] && arr[next] <= arr[high]) {\n                return next;\n            }\n            else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            }\n            else {\n                low = next + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            } else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            } else if (arr[next] >= arr[low]) {\n                low = next + 1;\n            }\n        }\n        return -1;",
    "        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // find the minimum element\n        long min = arr[0];\n        long minIndex = 0;\n        for (long i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n        return minIndex;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;"
  ]
}