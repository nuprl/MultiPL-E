{
  "name": "mbpp_119_search",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdyys5ucw.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long start = 0;\n        long end = arr.Count - 1;\n        while (start < end) {\n            long mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr[start];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbjpff6dl.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjpff6dl.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjpff6dl.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjpff6dl.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjpff6dl.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6txdrf4e.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 2, arr.Count - mid - 2));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[(int)mid] == arr[(int)mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf0dbac01bc54a52b728736d505bea0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cf0dbac01bc54a52b728736d505bea0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpicuj61f4.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8y5m77_e.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8y5m77_e.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 1) {\n                mid--;\n            }\n            if (arr[mid] == arr[mid + 1]) {\n                lo = mid + 2;\n            } else {\n                hi = mid;\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaw0wt0ad.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaw0wt0ad.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaw0wt0ad.cs(24,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if (m % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if (m % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb0io0262.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb0io0262.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb0io0262.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb0io0262.cs(21,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb0io0262.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb0io0262.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpemf0sule.cs(15,17): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(15,29): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(17,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(17,53): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(19,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(21,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(21,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(23,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(25,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(25,53): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpemf0sule.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpletspzlu.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpletspzlu.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpletspzlu.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpletspzlu.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpletspzlu.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpletspzlu.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int start = 0;\n        int end = arr.Count - 1;\n        while (start < end) {\n            int mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr[start];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            return Search(arr.GetRange(0, mid));\n        }\n        return arr[mid];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00022] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0004c] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d298cfde6e534564a6a21443a02be0fe>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00022] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0004c] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <d298cfde6e534564a6a21443a02be0fe>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d298cfde6e534564a6a21443a02be0fe>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8t5cpzn3.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8t5cpzn3.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8t5cpzn3.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8t5cpzn3.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8t5cpzn3.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8t5cpzn3.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <ddf1a8eaaca64b41bf7611b387f6a89d>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <ddf1a8eaaca64b41bf7611b387f6a89d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <ddf1a8eaaca64b41bf7611b387f6a89d>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <ddf1a8eaaca64b41bf7611b387f6a89d>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxm4xrvtz.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // Binary search\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8j187muc.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(18,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(24,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(24,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(32,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8j187muc.cs(32,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqx7silh6.cs(17,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(19,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(19,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(19,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(19,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(20,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqx7silh6.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int left = 0;\n        int right = arr.Count - 1;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcdufbw6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpicuj61f4.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ld5kif2.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9ld5kif2.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr.Count == 2) {\n            if (arr[0] == arr[1]) {\n                return -1;\n            } else {\n                return arr[0];\n            }\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(mid, arr.Count - mid));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 2, arr.Count - mid - 2));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d422e888d8f422eb688573309dd4063>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d422e888d8f422eb688573309dd4063>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 1) {\n                mid--;\n            }\n            if (arr[mid] == arr[mid + 1]) {\n                left = mid + 2;\n            } else {\n                right = mid;\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6n181n3q.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6n181n3q.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6n181n3q.cs(24,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgxzdo96t.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjewfboqq.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjewfboqq.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjewfboqq.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjewfboqq.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjewfboqq.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcdufbw6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppf3dm4wi.cs(16,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppf3dm4wi.cs(16,60): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppf3dm4wi.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppf3dm4wi.cs(22,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppf3dm4wi.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0pnfkl33.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdyys5ucw.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdyys5ucw.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00099] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0006d] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00099] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0006d] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <fa0f5f43df3d48f195917ec9faec545a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                if ((mid - left) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvylcng_x.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvylcng_x.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvylcng_x.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvylcng_x.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvylcng_x.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvylcng_x.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int n = arr.Count;\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (mid == 0 || mid == n - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b40e98bb614746af9e9bd5456bf54949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdt6rh34k.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 2;\n                }\n                else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp614g645d.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(18,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(25,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(25,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(33,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(33,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(33,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(33,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(34,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(36,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp614g645d.cs(36,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int n = arr.Count;\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (mid == 0 || mid == n - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int low = 1;\n        int high = arr.Count - 2;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int low = 0;\n        int high = arr.Count - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00029] in <58cea7972bab4fb085f373f6eb4f3c5f>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <58cea7972bab4fb085f373f6eb4f3c5f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00029] in <58cea7972bab4fb085f373f6eb4f3c5f>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <58cea7972bab4fb085f373f6eb4f3c5f>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp_nlg4yl.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxm4xrvtz.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxm4xrvtz.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprbwsmxqj.cs(16,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprbwsmxqj.cs(16,60): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprbwsmxqj.cs(19,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprbwsmxqj.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprbwsmxqj.cs(22,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprbwsmxqj.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplgqjkmhb.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplgqjkmhb.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplgqjkmhb.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplgqjkmhb.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplgqjkmhb.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplgqjkmhb.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        // return the element that appears only once\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d6cb8126ae47450398bad941e04bb3c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d6cb8126ae47450398bad941e04bb3c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdt6rh34k.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp_nlg4yl.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // Binary search\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd4lrshyv.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd4lrshyv.cs(17,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd4lrshyv.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd4lrshyv.cs(23,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd4lrshyv.cs(30,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <30061e9d022541b991d90c7805f131fb>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <30061e9d022541b991d90c7805f131fb>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                return Search(arr.GetRange((int)mid + 1, (int)arr.Count - (int)mid - 1));\n            } else {\n                return Search(arr.GetRange(0, (int)mid));\n            }\n        } else {\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                return Search(arr.GetRange(0, (int)mid - 1));\n            } else {\n                return Search(arr.GetRange((int)mid + 1, (int)arr.Count - (int)mid - 1));\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00033] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x000a4] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00033] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x000a4] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <aadfa6f682b04692a59f8872ca1f4c90>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) return arr[0];\n        long mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[(int)mid] == arr[(int)mid - 1]) return Search(arr.GetRange((int)mid + 1, (int)mid - 1));\n            else if (arr[(int)mid] == arr[(int)mid + 1]) return Search(arr.GetRange(0, (int)mid - 1));\n            else return arr[(int)mid];\n        } else {\n            if (arr[(int)mid] == arr[(int)mid - 1]) return Search(arr.GetRange(0, (int)mid - 1));\n            else if (arr[(int)mid] == arr[(int)mid + 1]) return Search(arr.GetRange((int)mid + 2, (int)mid - 1));\n            else return arr[(int)mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a809e3959a27494da93db63bbb7067a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a809e3959a27494da93db63bbb7067a5>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcdufbw6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgxzdo96t.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp_nlg4yl.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpp_nlg4yl.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsm94t00_.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsm94t00_.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsm94t00_.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsm94t00_.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsm94t00_.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsm94t00_.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0pnfkl33.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0pnfkl33.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcdufbw6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6txdrf4e.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6txdrf4e.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123288,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <425875ba2eb7459aa7b1b71d10351f7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <425875ba2eb7459aa7b1b71d10351f7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdt6rh34k.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int start = 0;\n        int end = arr.Count - 1;\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgxzdo96t.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgxzdo96t.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdt6rh34k.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2ca44cdfecc453eb8a0f68fff83a117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        long mid = 0;\n        while (lo < hi) {\n            mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdmqhc8gz.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdmqhc8gz.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdmqhc8gz.cs(22,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdmqhc8gz.cs(22,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdmqhc8gz.cs(29,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdmqhc8gz.cs(32,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpww5dmq7y.cs(17,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(19,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(19,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(19,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(19,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(20,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpww5dmq7y.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdt6rh34k.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdt6rh34k.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement your solution here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123288,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34a6b2575a4845048d883bf3ecd0d114>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34a6b2575a4845048d883bf3ecd0d114>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseu7xg9p.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpseu7xg9p.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low < high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaee4ursl.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaee4ursl.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaee4ursl.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaee4ursl.cs(23,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaee4ursl.cs(30,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj1wmh1kh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj1wmh1kh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1l5bqco.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1l5bqco.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr.Count == 2) {\n            if (arr[0] == arr[1]) {\n                return -1;\n            }\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n            return Search(arr.GetRange(0, mid - 1));\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        }\n        return arr[mid];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123288,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2671ef89ecb64583b9d944962ab1fc9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2671ef89ecb64583b9d944962ab1fc9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp10dj1chh.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp10dj1chh.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123286,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprcdufbw6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprcdufbw6.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002f] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <9232b0bab17f42a4ad2ecdb903d853d6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long min = 0;\n        long max = arr.Count - 1;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - min) % 2 == 0) {\n                    max = mid - 2;\n                } else {\n                    min = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((max - mid) % 2 == 0) {\n                    min = mid + 2;\n                } else {\n                    max = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[min];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123287,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgclyz67z.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgclyz67z.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgclyz67z.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgclyz67z.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgclyz67z.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgclyz67z.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_btdk_o.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg_btdk_o.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpicuj61f4.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpicuj61f4.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bd5422b7e2a40b9ab7566540da23b4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510212,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o40ec28.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_o40ec28.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}