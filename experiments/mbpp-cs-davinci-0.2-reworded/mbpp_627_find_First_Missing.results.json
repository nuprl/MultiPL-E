{
  "name": "mbpp_627_find_First_Missing",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674064147e714e8fadd58af093a26bf4>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <674064147e714e8fadd58af093a26bf4>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <674064147e714e8fadd58af093a26bf4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <674064147e714e8fadd58af093a26bf4>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <674064147e714e8fadd58af093a26bf4>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        long min = array[0];\n        long max = array[0];\n        foreach (long i in array) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        if (min != 1) {\n            return 1;\n        }\n        if (max == array.Count) {\n            return max + 1;\n        }\n        long[] temp = new long[max + 1];\n        foreach (long i in array) {\n            temp[i] = 1;\n        }\n        for (long i = 1; i < temp.Length; i++) {\n            if (temp[i] == 0) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <121e010a4f6346e290b3666dffd64d6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <121e010a4f6346e290b3666dffd64d6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] != mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b810ce09cf7441fb96de7010d6816249>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00023] in <b810ce09cf7441fb96de7010d6816249>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <b810ce09cf7441fb96de7010d6816249>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00023] in <b810ce09cf7441fb96de7010d6816249>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <b810ce09cf7441fb96de7010d6816249>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 1; i < array.Count; i++) {\n            if (array[i] != array[i - 1] + 1) {\n                return array[i - 1] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3cea1b159e694811868dbc2bf89f80e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3cea1b159e694811868dbc2bf89f80e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        long count = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            count = array.Where(x => x <= mid).Count();\n            if (count == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0040ccd5a98d4e4ebd071769c57ac27a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0040ccd5a98d4e4ebd071769c57ac27a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        long result = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] == mid) {\n                first = mid + 1;\n            } else {\n                last = mid - 1;\n                result = mid;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <495abf6a875847ab934f8a985cad7a20>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <495abf6a875847ab934f8a985cad7a20>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <495abf6a875847ab934f8a985cad7a20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <495abf6a875847ab934f8a985cad7a20>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <495abf6a875847ab934f8a985cad7a20>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        var n = array.Count;\n        var low = 0;\n        var high = n - 1;\n        while (low <= high) {\n            var mid = (low + high) / 2;\n            if (array[mid] == mid + 1) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c6393d2a0a0c4a9188395c51ddad693e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c6393d2a0a0c4a9188395c51ddad693e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0, high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (mid == array.Count - 1 && array[(int)mid] == mid) {\n            return mid + 1;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = 0;\n        long last = array.Count - 1;\n        while (first <= last) {\n            long mid = (first + last) / 2;\n            if (array[mid] == mid) {\n                first = mid + 1;\n            } else {\n                if (mid == 0 || array[mid - 1] == mid - 1) {\n                    return mid;\n                }\n                last = mid - 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4wfryw3m.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4wfryw3m.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = 0;\n        long last = array.Count - 1;\n        long mid = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] != mid) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n        if (first == array.Count) {\n            return first;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <038343011405405c88da3c584e95515c>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <038343011405405c88da3c584e95515c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <038343011405405c88da3c584e95515c>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <038343011405405c88da3c584e95515c>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        if (array[array.Count - 1] == array.Count) {\n            return array.Count + 1;\n        }\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[mid] == mid + 1) {\n                low = mid + 1;\n            } else {\n                if (mid > 0 && array[mid - 1] == mid) {\n                    return mid + 1;\n                }\n                high = mid - 1;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw6p881vg.cs(24,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw6p881vg.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[mid] != mid) {\n                if (mid == 0 || array[mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqr2t2xuk.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqr2t2xuk.cs(16,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <07de2bbdec28443d8f4211bcb881abee>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <07de2bbdec28443d8f4211bcb881abee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <07de2bbdec28443d8f4211bcb881abee>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <07de2bbdec28443d8f4211bcb881abee>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here.\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid + 1) {\n                if (mid == 0 || array[(int)mid - 1] == mid) {\n                    return mid + 1;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <75232f66e3d9443fbbb15cee555ae2e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <75232f66e3d9443fbbb15cee555ae2e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[m] != m) {\n                if (m == 0 || array[m - 1] == m - 1) {\n                    return m;\n                }\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        if (l == n) {\n            return n;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpirj9fr3g.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpirj9fr3g.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674064147e714e8fadd58af093a26bf4>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <674064147e714e8fadd58af093a26bf4>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <674064147e714e8fadd58af093a26bf4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <674064147e714e8fadd58af093a26bf4>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <674064147e714e8fadd58af093a26bf4>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here.\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here.\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            } else if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return n + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <c0c93718b07b485eace92262ab8dda90>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <c0c93718b07b485eace92262ab8dda90>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <c0c93718b07b485eace92262ab8dda90>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <c0c93718b07b485eace92262ab8dda90>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        long mid = (start + end) / 2;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] == mid) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return start;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        long result = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] == mid) {\n                first = mid + 1;\n            } else {\n                last = mid - 1;\n            }\n        }\n        if (first == mid) {\n            result = mid + 1;\n        } else {\n            result = mid;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6731a6b27921468f9acae2c47cf69b0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6731a6b27921468f9acae2c47cf69b0c>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Gene",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2a176ffa94541ab981654a23ba316c2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can do this in O(log n) time by using a modified binary search.\n        // We can do this in O(1) space by using the array itself as a stack.\n        // We can do this in O(n) time by iterating over the array.\n        // We can do this in O(1) space by using a single variable.\n        // We can do this in O(n) time by iterating over the array.\n        // We can do this in O(1) space by using a single variable.\n        long lo = 0;\n        long hi = array.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        if (lo == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        long min = array[0];\n        long max = array[0];\n        for (int i = 1; i < array.Count; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n        if (min != 1) {\n            return 1;\n        }\n        long[] temp = new long[max + 1];\n        for (int i = 0; i < array.Count; i++) {\n            temp[array[i]] = 1;\n        }\n        for (int i = 1; i < temp.Length; i++) {\n            if (temp[i] == 0) {\n                return i;\n            }\n        }\n        return max + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <313a44b408cd4edaba23e19f94a06011>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <313a44b408cd4edaba23e19f94a06011>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] != mid) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <77994afa69c443bb935215b1b309df52>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <77994afa69c443bb935215b1b309df52>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <77994afa69c443bb935215b1b309df52>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <77994afa69c443bb935215b1b309df52>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[mid] != mid) {\n                if (mid == 0 || array[mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqr2t2xuk.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqr2t2xuk.cs(16,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // This is a binary search problem.\n        // We can use the binary search algorithm to find the first missing number.\n        // The idea is to start with the middle element and compare it with its index.\n        // If the value and index match, we can continue searching in the right half.\n        // If the value is greater than its index, we can continue searching in the left half.\n        // If the value is less than its index, we have found the first missing number.\n        // The time complexity is O(log n).\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long middle = (left + right) / 2;\n            if (array[(int)middle] == middle) {\n                left = middle + 1;\n            } else if (array[(int)middle] > middle) {\n                right = middle - 1;\n            } else {\n                return middle;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can use binary search to find the first missing number.\n        // The first missing number must be between 1 and the length of the array + 1.\n        long left = 1;\n        long right = array.Count + 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (array[mid - 1] == mid) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpckybg4w4.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <261d91cc3a754fdb874cff5231283156>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <261d91cc3a754fdb874cff5231283156>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <261d91cc3a754fdb874cff5231283156>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <261d91cc3a754fdb874cff5231283156>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <261d91cc3a754fdb874cff5231283156>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return mid + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long lo = 0;\n        long hi = array.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (array[(int)mid] > mid) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1346a59a17b8465ab33dd4e7141eada0>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[mid] != mid) {\n                if (mid == 0 || array[mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzd7gplr2.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzd7gplr2.cs(16,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] == mid) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = 0;\n        long last = array.Count;\n        while (first < last) {\n            long mid = (first + last) / 2;\n            if (array[mid] > mid) {\n                last = mid;\n            } else {\n                first = mid + 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq4jhy7dy.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long n = array.Count;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += array[i];\n        }\n        long expectedSum = (n + 1) * (min + max) / 2;\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4a1f82ba80446728651fbff9264e37e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4a1f82ba80446728651fbff9264e37e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <07de2bbdec28443d8f4211bcb881abee>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <07de2bbdec28443d8f4211bcb881abee>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <07de2bbdec28443d8f4211bcb881abee>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <07de2bbdec28443d8f4211bcb881abee>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <3ebd9e9a7985408b9db9805b5b1b7ca8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count-1];\n        long sum = 0;\n        for(int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        if(sum == expectedSum) {\n            return max + 1;\n        }\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4997f92a78f04e2c8197cb94e825c230>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4997f92a78f04e2c8197cb94e825c230>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long lower = 0;\n        long upper = array.Count - 1;\n        long mid = 0;\n        while (lower <= upper) {\n            mid = (lower + upper) / 2;\n            if (array[(int)mid] == mid) {\n                lower = mid + 1;\n            } else {\n                upper = mid - 1;\n            }\n        }\n        return lower;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] == mid + 1) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid) {\n                    return mid + 1;\n                }\n                high = mid - 1;\n            }\n        }\n        return low + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1052236627244bdc8491f42ca9f75377>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1052236627244bdc8491f42ca9f75377>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b0d2080094724b3bbc72d8de3f4ba8b6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = 0;\n        long last = array.Count;\n        while (first < last) {\n            long mid = first + (last - first) / 2;\n            if (array[mid] > mid) {\n                last = mid;\n            } else {\n                first = mid + 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2ogxc7kd.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low > array.Count - 1) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // If the array is empty, return 1\n        if (array.Count == 0) {\n            return 1;\n        }\n        // If the first element is not 1, return 1\n        if (array[0] != 1) {\n            return 1;\n        }\n        // If the array is 1 element long, return 2\n        if (array.Count == 1) {\n            return 2;\n        }\n        // If the last element is not the length of the array, return the length of the array\n        if (array[array.Count - 1] != array.Count) {\n            return array.Count;\n        }\n        // If the array is 2 elements long, return the first element + 1\n        if (array.Count == 2) {\n            return array[0] + 1;\n        }\n        // If the array is 3 elements long, return the first element + 1\n        if (array.Count == 3) {\n            return array[0] + 1;\n        }\n        // If the array is 4 elements long, return the first element + 1\n        if (array.Count == 4) {\n            return array[0] + 1;\n        }\n        // If the array is 5 elements long, return the first element + 1\n        if (array.Count == 5) {\n            return array[0] + 1;\n        }\n        // If the array is 6 elements long, return the first element + 1\n        if (array.Count == 6) {\n            return array[0] + 1;\n        }\n        // If the array is 7 elements long, return the first element + 1\n        if (array.Count == 7) {\n            return array[0] + 1;\n        }\n        // If the array is 8 elements long, return the first element + 1\n        if (array.Count == 8) {\n            return array[0] + 1;\n        }\n        // If the array is 9 elements long, return the first element + 1\n        if (array.Count == 9) {\n            return array[0] + 1;\n        }\n        // If the array is 10 elements long, return the first element + 1\n        if (array.Count == 10) {\n            return array[0] + 1;\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpojz17orj.cs(64,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpojz17orj.cs(70,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // O(n) time, O(1) space\n        // Assume array is sorted\n        // Assume array is not empty\n        // Assume array is not all negative\n        // Assume array is not all positive\n        // Assume array is not all 0\n        // Assume array is not all 1\n        // Assume array is not all 2\n        // Assume array is not all 3\n        // Assume array is not all 4\n        // Assume array is not all 5\n        // Assume array is not all 6\n        // Assume array is not all 7\n        // Assume array is not all 8\n        // Assume array is not all 9\n        // Assume array is not all 10\n        // Assume array is not all 11\n        // Assume array is not all 12\n        // Assume array is not all 13\n        // Assume array is not all 14\n        // Assume array is not all 15\n        // Assume array is not all 16\n        // Assume array is not all 17\n        // Assume array is not all 18\n        // Assume array is not all 19\n        // Assume array is not all 20\n        // Assume array is not all 21\n        // Assume array is not all 22\n        // Assume array is not all 23\n        // Assume array is not all 24\n        // Assume array is not all 25\n        // Assume array is not all 26\n        // Assume array is not all 27\n        // Assume array is not all 28\n        // Assume array is not all 29\n        // Assume array is not all 30\n        // Assume array is not all 31\n        // Assume array is not all 32\n        // Assume array is not all 33\n        // Assume array is not all 34\n        // Assume array is not all 35\n        // Assume array is not all 36\n        // Assume array is not all 37\n        // Assume array is not all 38\n        // Assume array is not all 39\n        // Assume array is not all 40\n        // Assume array is not all 41\n        // Assume array is not all 42\n        // Assume array is not all 43\n        // Assume array is not all 44\n        // Assume array is not all 45\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3n1qjxck.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        if (low > n - 1) {\n            return n;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <a2c9c033b50d4a6083afe1251a622c54>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <a2c9c033b50d4a6083afe1251a622c54>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <a2c9c033b50d4a6083afe1251a622c54>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <a2c9c033b50d4a6083afe1251a622c54>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] - array[i] > 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7396b11f5254711b0ce22c38cf09b3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7396b11f5254711b0ce22c38cf09b3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        // array is sorted and contains natural numbers\n        // find the smallest missing number\n        // if no missing number, return -1\n        // if array is empty, return -1\n        // if array is null, return -1\n        if (array == null || array.Count == 0) {\n            return -1;\n        }\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = start + (end - start) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56a654936b7c4148887bda07e638670f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long l = 0;\n        long r = array.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // if the array is empty, return 1\n        if (array.Count == 0) {\n            return 1;\n        }\n        // if the array is not empty, return the first missing number\n        else {\n            // sort the array\n            array.Sort();\n            // if the first element is not 1, return 1\n            if (array[0] != 1) {\n                return 1;\n            }\n            // if the first element is 1, return the first missing number\n            else {\n                // iterate through the array\n                for (int i = 0; i < array.Count - 1; i++) {\n                    // if the difference between the current element and the next element is greater than 1, return the current element + 1\n                    if (array[i + 1] - array[i] > 1) {\n                        return array[i] + 1;\n                    }\n                }\n                // if no missing number is found, return the last element + 1\n                return array[array.Count - 1] + 1;\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3beff4f4ed5449958d5e1445680c18a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3beff4f4ed5449958d5e1445680c18a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 1; i < array.Count; i++) {\n            if (array[i] - array[i - 1] > 1) {\n                return array[i - 1] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63b7387029ca4393b02f571a8b99c6ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63b7387029ca4393b02f571a8b99c6ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56900c2288934d4ea3044f5f79f832f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56900c2288934d4ea3044f5f79f832f8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long sum2 = 0;\n        for (long i = min; i <= max; i++) {\n            sum2 += i;\n        }\n        return sum2 - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9bb74a785e1454fbbac68c1fc922811>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9bb74a785e1454fbbac68c1fc922811>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bb1c717b9ad5413caed9e68283e39bac>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] > mid) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b36f2001964b438aa6a213a8a0487abe>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <b36f2001964b438aa6a213a8a0487abe>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <b36f2001964b438aa6a213a8a0487abe>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <b36f2001964b438aa6a213a8a0487abe>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <b36f2001964b438aa6a213a8a0487abe>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long missing = 0;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i + 1) {\n                missing = i + 1;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <810e50c752954507989909e6bbb851d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <810e50c752954507989909e6bbb851d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        long result = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        result = min;\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <a394d0900b8b48e4b02c9478c9947981>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <a394d0900b8b48e4b02c9478c9947981>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <a394d0900b8b48e4b02c9478c9947981>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <a394d0900b8b48e4b02c9478c9947981>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can use binary search to find the first missing number.\n        // We can use the fact that the array is sorted to our advantage.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know that the first missing number is between 1 and N,\n        // then we can use binary search to find the first missing number.\n        // If the array is sorted, and we know\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiu4gni9b.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b6e8b657269140f580590272b44a0664>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00016] in <cefa38b2ddaf4ec79e96963c4b84ceaa>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <cefa38b2ddaf4ec79e96963c4b84ceaa>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00016] in <cefa38b2ddaf4ec79e96963c4b84ceaa>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <cefa38b2ddaf4ec79e96963c4b84ceaa>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <660a05077e7f4c21b4b9c523ccaedbd8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9280a094cb104b5d9a34c7d279e8ade6>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <9280a094cb104b5d9a34c7d279e8ade6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <9280a094cb104b5d9a34c7d279e8ade6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <9280a094cb104b5d9a34c7d279e8ade6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <9280a094cb104b5d9a34c7d279e8ade6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 0;\n        }\n        if (array.Count == 1) {\n            if (array[0] == 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510438,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can do this in O(log n) time by using a modified binary search.\n        // First, we need to find the first element that is not equal to its index.\n        // We can do this by binary searching for the first element that is not equal to its index.\n        long left = 0;\n        long right = array.Count;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (array[mid] == mid) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        // Now, we need to find the first element that is equal to its index.\n        // We can do this by binary searching for the first element that is equal to its index.\n        long first = left;\n        left = 0;\n        right = array.Count;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (array[mid] == mid) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        // Now, we can return the first element that is not equal to its index.\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123241,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb22los_5.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpb22los_5.cs(31,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low > array.Count - 1) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}