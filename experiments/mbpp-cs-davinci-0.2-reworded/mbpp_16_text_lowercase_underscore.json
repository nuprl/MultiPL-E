{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static bool TextLowercaseUnderscore(string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    Debug.Assert(TextLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    Debug.Assert(TextLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code here\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.All(x => char.IsLower(x) || x == '_');",
    "        return text.Contains(\"_\");",
    "        // TODO: Write your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement me\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        // Return true if the text contains lowercase letters joined with an underscore.\n        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (!char.IsLower(text[0])) return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == text.Length - 1) return false;\n                if (!char.IsLower(text[i + 1])) return false;\n            } else if (!char.IsLower(text[i])) {\n                return false;\n            }\n        }\n        return true;",
    "        // Your code here.\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // Your code goes here.\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        if (text.Length == 0) return false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == 0 || i == text.Length - 1) return false;\n                if (text[i - 1] == '_' || text[i + 1] == '_') return false;\n                if (!Char.IsLower(text[i - 1]) || !Char.IsLower(text[i + 1])) return false;\n            }\n            else if (!Char.IsLower(text[i])) return false;\n        }\n        return true;",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        // Your code goes here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        return false;",
    "        return text.Contains(\"_\");",
    "        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Check if the string is empty\n        if (text.Length == 0) {\n            return false;\n        }\n\n        // Check if the string contains only lowercase letters and underscores\n        foreach (char c in text) {\n            if (!Char.IsLower(c) && c != '_') {\n                return false;\n            }\n        }\n\n        // Check if the string contains two underscores in a row\n        for (int i = 0; i < text.Length - 1; i++) {\n            if (text[i] == '_' && text[i + 1] == '_') {\n                return false;\n            }\n        }\n\n        // Check if the string starts or ends with an underscore\n        if (text[0] == '_' || text[text.Length - 1] == '_') {\n            return false;\n        }\n\n        return true;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Write your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text.Length == 2) return char.IsLower(text[0]) && char.IsLower(text[1]);\n        for (int i = 0; i < text.Length - 2; i++) {\n            if (char.IsLower(text[i]) && text[i + 1] == '_' && char.IsLower(text[i + 2])) {\n                return true;\n            }\n        }\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(?:_[a-z]+)*$\");",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement\n        return false;",
    "        return text.All(c => c == '_' || char.IsLower(c));",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == 0 || i == text.Length - 1) {\n                    return false;\n                }\n                if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                    return false;\n                }\n                if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // Your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        // Write your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Write your code here.\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code goes here.",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (text[text.Length - 1] == '_') return false;\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (!char.IsLower(text[i - 1]) || !char.IsLower(text[i + 1])) return false;\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.All(c => c == '_' || char.IsLower(c));",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        if (text.Length == 0) {\n            return false;\n        }\n        bool underscore = false;\n        bool lowercase = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (Char.IsLower(text[i])) {\n                lowercase = true;\n            } else if (text[i] == '_') {\n                if (underscore) {\n                    return false;\n                }\n                underscore = true;\n                lowercase = false;\n            } else {\n                return false;\n            }\n        }\n        return lowercase;",
    "        // Your code here\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return text.Contains('_');",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        if (text.Length == 0) {\n            return false;\n        }\n        if (text.Length == 1) {\n            return Char.IsLower(text[0]);\n        }\n        if (text[0] == '_') {\n            return false;\n        }\n        if (text[text.Length - 1] == '_') {\n            return false;\n        }\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (!Char.IsLower(text[i - 1]) || !Char.IsLower(text[i + 1])) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // Your code here\n        return false;",
    "        if (text == null) {\n            return false;\n        }\n        string[] words = text.Split('_');\n        foreach (string word in words) {\n            if (word.Length == 0) {\n                return false;\n            }\n            foreach (char c in word) {\n                if (!char.IsLower(c)) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement me\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // Write your code here\n        return false;",
    "        if (text.Length == 0) return false;\n        if (text[0] < 'a' || text[0] > 'z') return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == text.Length - 1) return false;\n                if (text[i + 1] < 'a' || text[i + 1] > 'z') return false;\n            } else if (text[i] < 'a' || text[i] > 'z') return false;\n        }\n        return true;",
    "        if (text.Length == 0) {\n            return false;\n        }\n        if (text.Length == 1) {\n            return char.IsLower(text[0]);\n        }\n        if (text[0] == '_') {\n            return false;\n        }\n        if (text[text.Length - 1] == '_') {\n            return false;\n        }\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (!char.IsLower(text[i - 1]) || !char.IsLower(text[i + 1])) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        if (text.Length == 0) {\n            return false;\n        }\n        if (text[0] >= 'a' && text[0] <= 'z') {\n            if (text.Length == 1) {\n                return true;\n            }\n            if (text[1] == '_') {\n                return TextLowercaseUnderscore(text.Substring(2));\n            }\n            return TextLowercaseUnderscore(text.Substring(1));\n        }\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // TODO: Implement this function.\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        return text.Contains(\"_\");",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        // Your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // Write your code here\n        return false;"
  ]
}