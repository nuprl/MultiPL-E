{
  "name": "mbpp_603_get_ludic",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to get all lucid numbers smaller than or equal to a given integer.\n    public static List<long> GetLudic(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetLudic((10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(GetLudic((25L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L}))));\n    Debug.Assert(GetLudic((45L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L, (long)29L, (long)37L, (long)41L, (long)43L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLucid(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        List<long> ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLucid(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        List<long> ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        var list = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                list.Add(i);\n            }\n        }\n        return list;",
    "        var result = new List<long>();\n        var digits = new List<long>();\n        while (n > 0) {\n            digits.Add(n % 10);\n            n /= 10;\n        }\n        digits.Reverse();\n        var count = digits.Count;\n        var powers = new long[count];\n        powers[0] = 1;\n        for (int i = 1; i < count; i++) {\n            powers[i] = powers[i - 1] * 10;\n        }\n        var sum = digits.Sum();\n        var max = powers[count - 1];\n        var min = powers[count - 2];\n        for (long i = min; i <= max; i++) {\n            var sum2 = 0L;\n            var j = i;\n            while (j > 0) {\n                sum2 += j % 10;\n                j /= 10;\n            }\n            if (sum2 == sum) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ludic = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLudic(i)) {\n                ludic.Add(i);\n            }\n        }\n        return ludic;",
    "        var result = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            if (IsLucid(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var digits = new List<long>();\n        var digitsCount = 0;\n        var current = n;\n        while (current > 0) {\n            digits.Add(current % 10);\n            current /= 10;\n            digitsCount++;\n        }\n        digits.Reverse();\n        var powers = new long[digitsCount];\n        powers[0] = 1;\n        for (var i = 1; i < digitsCount; i++) {\n            powers[i] = powers[i - 1] * 10;\n        }\n        var currentNumber = 0L;\n        var currentDigits = new List<long>();\n        var currentDigitsCount = 0;\n        var currentDigitsSum = 0L;\n        var currentDigitsSumPowers = new long[digitsCount];\n        currentDigitsSumPowers[0] = 1;\n        for (var i = 0; i < digitsCount; i++) {\n            currentDigits.Add(digits[i]);\n            currentDigitsCount++;\n            currentDigitsSum += digits[i];\n            currentDigitsSumPowers[currentDigitsCount - 1] = currentDigitsSum;\n            currentNumber += digits[i] * powers[i];\n            if (currentNumber > n) {\n                break;\n            }\n            if (currentDigitsSum == currentDigitsCount) {\n                result.Add(currentNumber);\n            }\n        }\n        for (var i = 0; i < digitsCount; i++) {\n            for (var j = 0; j < digitsCount; j++) {\n                if (i == j) {\n                    continue;\n                }\n                currentDigits.Clear();\n                currentDigitsCount = 0;\n                currentDigitsSum = 0;\n                currentNumber = 0;\n                for (var k = 0; k < digitsCount; k++) {\n                    if (k == i) {\n                        continue;\n                    }\n                    currentDigits.Add(digits[k]);\n                    currentDigitsCount++;\n                    currentDigitsSum += digits[k];\n                    currentNumber += digits[k] * powers[k];\n                }\n                currentDigits.Add"
  ]
}