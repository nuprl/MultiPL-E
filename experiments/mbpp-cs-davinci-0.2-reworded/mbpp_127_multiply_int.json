{
  "name": "mbpp_127_multiply_int",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long sum = 0;\n        for (int i = 0; i < y; i++) {\n            sum += x;\n        }\n        return sum;",
    "        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        return x * y;",
    "        return x * y;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x = x << 1;\n            y = y >> 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = Add(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        // TODO: Implement this function.\n        return 0;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        if (x == 0 || y == 0) {\n            return 0;\n        }\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == -1) {\n            return -y;\n        }\n        if (y == -1) {\n            return -x;\n        }\n        if (x == long.MinValue) {\n            if (y == -1) {\n                return long.MaxValue;\n            }\n            return 0;\n        }\n        if (y == long.MinValue) {\n            if (x == -1) {\n                return long.MaxValue;\n            }\n            return 0;\n        }\n        if (x < 0) {\n            if (y < 0) {\n                return MultiplyInt(-x, -y);\n            }\n            return -MultiplyInt(-x, y);\n        }\n        if (y < 0) {\n            return -MultiplyInt(x, -y);\n        }\n        long result = 0;\n        while (y > 0) {\n            if ((y & 1) == 1) {\n                result += x;\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;",
    "        long result = 0;\n        while (y != 0) {\n            if ((y & 1) != 0) {\n                result = AddInt(result, x);\n            }\n            x <<= 1;\n            y >>= 1;\n        }\n        return result;"
  ]
}