{
  "name": "mbpp_746_sector_area",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <707fa00fe03a4543929e01a28b68fd3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <707fa00fe03a4543929e01a28b68fd3a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb6b1678077449a2892162103807fd18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb6b1678077449a2892162103807fd18>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb6b1678077449a2892162103807fd18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bb6b1678077449a2892162103807fd18>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(a / 360.0) * (float)(Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40d8b2ccd1db4316a0a5df5d524fd4a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40d8b2ccd1db4316a0a5df5d524fd4a4>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (r * r * a * Math.PI / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <707fa00fe03a4543929e01a28b68fd3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <707fa00fe03a4543929e01a28b68fd3a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360)\n            return null;\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (a / 360.0 * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a * Math.PI / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a163d926b5847b799f73d25d368ffa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a163d926b5847b799f73d25d368ffa9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        } else {\n            return (float) (0.5 * r * r * a);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a40f808a57a74505ba7ad73c6d944fee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a40f808a57a74505ba7ad73c6d944fee>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        float area = (float)((Math.PI * r * r) * (a / 360));\n        return area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6c93806daf7b44f2a2d0b19ef27dbf43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6c93806daf7b44f2a2d0b19ef27dbf43>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)a / 360 * Math.PI * r * r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp335cztc9.cs(14,16): error CS0266: Cannot implicitly convert type 'double' to 'float?'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360)\n            return null;\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9490417819114c7a906b1375099848bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9490417819114c7a906b1375099848bc>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)a / 360 * Math.PI * r * r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp335cztc9.cs(14,16): error CS0266: Cannot implicitly convert type 'double' to 'float?'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * Math.Pow(r, 2) * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a * Math.PI * r * r) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40d8b2ccd1db4316a0a5df5d524fd4a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40d8b2ccd1db4316a0a5df5d524fd4a4>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360.0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * (a / 360.0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (a / 360.0 * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ef404821a80485097ccbfee7b9fa259>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (a / 360.0 * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)a / 360 * (float)Math.PI * r * r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ae53ee07741340dfb0d037f1e561d2a3>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d71090cdf82a4993816284e8d1a3684d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}