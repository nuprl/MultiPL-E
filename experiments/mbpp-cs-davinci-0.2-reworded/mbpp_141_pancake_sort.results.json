{
  "name": "mbpp_141_pancake_sort",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndex2 = nums.Count - 1 - maxIndex;\n            result.Add(maxIndex + 1);\n            result.Add(maxIndex2 + 1);\n            nums = Flip(nums, maxIndex);\n            nums = Flip(nums, maxIndex2);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1pby_6cy.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp1pby_6cy.cs(20,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk2esc49w.cs(22,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpk2esc49w.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0daltdi9.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp0daltdi9.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = FindMaxIndex(nums, i);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvaobs167.cs(14,28): error CS0103: The name 'FindMaxIndex' does not exist in the current context\n/tmp/tmpvaobs167.cs(20,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpvaobs167.cs(23,13): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - 1 - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5954kvm9.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp5954kvm9.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var res = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var idx = nums.IndexOf(max);\n            if (idx == max - 1) {\n                max--;\n                continue;\n            }\n            if (idx > 0) {\n                res.Add(idx + 1);\n                nums = Flip(nums, idx + 1);\n            }\n            res.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo48gs934.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpo48gs934.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                nums.Reverse(0, maxIndex + 1);\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <264e485d07ca469e9c9cc825052a1b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <264e485d07ca469e9c9cc825052a1b5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums.Reverse(0, index + 1);\n            }\n            result.Add(nums.Count - i);\n            nums.Reverse(0, nums.Count - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b2339c2a04bb48e79b5c8809eb98ce92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b2339c2a04bb48e79b5c8809eb98ce92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index != i) {\n                result.Add(index + 1);\n                result.Add(i + 1);\n                nums.Reverse(0, index + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fa389854c5d44c5b2dd755fe8def124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9fa389854c5d44c5b2dd755fe8def124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var n = nums.Count;\n        while (n > 0) {\n            var max = nums.IndexOf(nums.Max());\n            if (max != n - 1) {\n                if (max != 0) {\n                    result.Add(max + 1);\n                    nums.Reverse(0, max + 1);\n                }\n                result.Add(n);\n                nums.Reverse(0, n);\n            }\n            n--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d3358cc78b54d8a8c929a484c95c429>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d3358cc78b54d8a8c929a484c95c429>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbnt5i233.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbnt5i233.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var ans = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndex2 = nums.Count - 1;\n            if (maxIndex != maxIndex2) {\n                ans.Add(maxIndex + 1);\n                ans.Add(maxIndex2 + 1);\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, maxIndex2);\n            } else {\n                ans.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphg78pnk1.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmphg78pnk1.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmphg78pnk1.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index);\n                }\n                result.Add(max);\n                nums = Flip(nums, max - 1);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv2fv3rtc.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpv2fv3rtc.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != nums.Count - 1) {\n                result.Add(maxIndex + 1);\n                nums = Reverse(nums, maxIndex + 1);\n                result.Add(nums.Count);\n                nums = Reverse(nums, nums.Count);\n            } else {\n                result.Add(nums.Count);\n                nums = Reverse(nums, nums.Count);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpouru9qp2.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpouru9qp2.cs(20,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpouru9qp2.cs(23,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbnt5i233.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbnt5i233.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            nums = Flip(nums, maxIndex);\n            result.Add(nums.Count);\n            nums = Flip(nums, nums.Count - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0k5z7s5v.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp0k5z7s5v.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var index = nums.IndexOf(max);\n            result.Add(index + 1);\n            result.Add(nums.Count);\n            nums = Flip(nums, index + 1);\n            nums = Flip(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd8gin02w.cs(18,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpd8gin02w.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i);\n                nums = Flip(nums, i - 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkwanursu.cs(22,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpkwanursu.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                result.Add(1);\n                nums.RemoveAt(0);\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(nums.Count);\n                nums.RemoveAt(nums.Count - 1);\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - index);\n            nums.Reverse(0, index + 1);\n            nums.Reverse(0, nums.Count - index);\n            nums.Reverse(0, nums.Count);\n            nums.RemoveAt(nums.Count - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\n  at System.Collections.Generic.List`1[T].Reverse (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x000ab] in <f80db1ee4dee4978b52c325fb2e243d4>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <f80db1ee4dee4978b52c325fb2e243d4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\n  at System.Collections.Generic.List`1[T].Reverse (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x000ab] in <f80db1ee4dee4978b52c325fb2e243d4>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <f80db1ee4dee4978b52c325fb2e243d4>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums.Reverse(0, index + 1);\n            }\n            result.Add(max);\n            nums.Reverse(0, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var res = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var idx = nums.IndexOf(max);\n            if (idx == max - 1) {\n                max--;\n                continue;\n            }\n            if (idx > 0) {\n                res.Add(idx + 1);\n                nums = Reverse(nums, idx + 1);\n            }\n            res.Add(max);\n            nums = Reverse(nums, max);\n            max--;\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7p1x6qvy.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp7p1x6qvy.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var ans = new List<long>();\n        for (var i = n; i > 0; i--) {\n            var idx = nums.IndexOf(i);\n            if (idx == i - 1) continue;\n            if (idx != 0) {\n                ans.Add(idx + 1);\n                nums = Reverse(nums, idx + 1);\n            }\n            ans.Add(i);\n            nums = Reverse(nums, i);\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnv3ln874.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpnv3ln874.cs(21,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var index = nums.Count - 1;\n        while (index >= 0) {\n            var i = nums.IndexOf(sorted[index]);\n            if (i == index) {\n                index--;\n                continue;\n            }\n            if (i > 0) {\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n            result.Add(index + 1);\n            nums = Flip(nums, index);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpybwz30gz.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpybwz30gz.cs(25,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppqi1txgb.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmppqi1txgb.cs(25,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        for (int i = nums.Count; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i - 1) {\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, i - 1);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwwn4wp1u.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpwwn4wp1u.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex == max - 1 - i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = nums.Take(maxIndex + 1).Reverse().Concat(nums.Skip(maxIndex + 1)).ToList();\n            }\n            result.Add(max - i);\n            nums = nums.Take(max - i).Reverse().Concat(nums.Skip(max - i)).ToList();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <db6707503c58436eb70f6162ea81f9b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <db6707503c58436eb70f6162ea81f9b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var flips = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = sorted.IndexOf(nums[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                flips.Add(index + 1);\n                Reverse(nums, index);\n            }\n            flips.Add(i + 1);\n            Reverse(nums, i);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4iwh8ei4.cs(21,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp4iwh8ei4.cs(24,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp69kg0cr6.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp69kg0cr6.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0j1tsxs.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpq0j1tsxs.cs(23,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndexSorted = sorted.IndexOf(max);\n            if (maxIndex != maxIndexSorted) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n            result.Add(maxIndexSorted + 1);\n            nums = Flip(nums, maxIndexSorted);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7fdbyjp5.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp7fdbyjp5.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndex2 = nums.Count - 1;\n            if (maxIndex != maxIndex2) {\n                result.Add(maxIndex + 1);\n                result.Add(maxIndex2 + 1);\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, maxIndex2);\n            }\n            result.Add(maxIndex2 + 1);\n            nums = Flip(nums, maxIndex2);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphpiuew71.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmphpiuew71.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmphpiuew71.cs(25,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = Flip(nums, index + 1);\n            nums = Flip(nums, nums.Count - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy6dfzr8u.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpy6dfzr8u.cs(18,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            sorted.Add(nums[i]);\n        }\n        sorted.Sort();\n        List<long> flips = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            long num = sorted[i];\n            int index = nums.IndexOf(num);\n            if (index != 0) {\n                nums.RemoveAt(index);\n                nums.Insert(0, num);\n                flips.Add(index + 1);\n            }\n            nums.RemoveAt(0);\n            flips.Add(1);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb543e4330df46b39d818c4454f6acc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb543e4330df46b39d818c4454f6acc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Max();\n        var maxIndex = nums.IndexOf(max);\n        var maxIndex2 = nums.LastIndexOf(max);\n        if (maxIndex != maxIndex2) {\n            result.Add(maxIndex + 1);\n            result.Add(maxIndex2 + 1);\n            result.Add(maxIndex2 + 1);\n            result.Add(maxIndex + 1);\n        } else {\n            result.Add(maxIndex + 1);\n            result.Add(maxIndex + 1);\n        }\n        nums.RemoveAt(maxIndex);\n        if (maxIndex != maxIndex2) {\n            nums.RemoveAt(maxIndex2 - 1);\n        }\n        if (nums.Count > 0) {\n            result.AddRange(PancakeSort(nums));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3c5454f8053483c88519ffa165a028f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3c5454f8053483c88519ffa165a028f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Reverse(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn0ehgxew.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpn0ehgxew.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>(nums);\n        sorted.Sort();\n        List<long> result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            int index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(index + 1);\n                nums.Reverse();\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = nums.GetRange(0, index + 1);\n            nums.Reverse();\n            nums.AddRange(nums.GetRange(0, nums.Count - 1));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Non-negative number required.\nParameter name: count\n  at System.Collections.Generic.List`1[T].GetRange (System.Int32 index, System.Int32 count) [0x0000d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x00095] in <7d8410848e3f42feb3b7221efeac80fc>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <7d8410848e3f42feb3b7221efeac80fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Non-negative number required.\nParameter name: count\n  at System.Collections.Generic.List`1[T].GetRange (System.Int32 index, System.Int32 count) [0x0000d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x00095] in <7d8410848e3f42feb3b7221efeac80fc>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <7d8410848e3f42feb3b7221efeac80fc>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var max = nums.IndexOf(nums.Max());\n            if (max != i - 1) {\n                result.Add(max + 1);\n                nums.Reverse(0, max + 1);\n                result.Add(i);\n                nums.Reverse(0, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9bd6ffa87c534864abd9c38e06b299b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9bd6ffa87c534864abd9c38e06b299b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != nums.Count - 1) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex + 1);\n                result.Add(nums.Count);\n                nums = Flip(nums, nums.Count);\n            } else {\n                result.Add(nums.Count);\n                nums = Flip(nums, nums.Count);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnkn7to21.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpnkn7to21.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpnkn7to21.cs(23,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (!nums.SequenceEqual(sorted)) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            nums.Reverse(0, maxIndex + 1);\n            result.Add(nums.Count);\n            nums.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124227,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var res = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var pos = sorted.IndexOf(nums[i]);\n            if (pos == i) continue;\n            if (pos != 0) {\n                res.Add(pos + 1);\n                Reverse(nums, pos);\n            }\n            res.Add(i + 1);\n            Reverse(nums, i);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy6s0vxn7.cs(19,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpy6s0vxn7.cs(22,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp6ag_bof.cs(22,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpp6ag_bof.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var res = new List<long>();\n        for (int i = 0; i < n; i++) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            res.Add(maxIndex + 1);\n            nums.Reverse(0, maxIndex + 1);\n            res.Add(n - i);\n            nums.Reverse(0, n - i);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5e96804e9574350a0f6dd4985ab0056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5e96804e9574350a0f6dd4985ab0056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxs2eq_j6.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpxs2eq_j6.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpupgfou61.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpupgfou61.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl46e6p1z.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpl46e6p1z.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var flips = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                flips.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            flips.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1hlhyeb.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpa1hlhyeb.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var maxIndex = nums.IndexOf(sorted.Last());\n            if (maxIndex != nums.Count - 1) {\n                result.Add(maxIndex + 1);\n                nums = Reverse(nums, maxIndex + 1);\n            }\n            result.Add(nums.Count);\n            nums = Reverse(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk4g6fn4n.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpk4g6fn4n.cs(21,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wvz5ldz.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6wvz5ldz.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>(nums);\n        sorted.Sort();\n        List<long> flips = new List<long>();\n        for (int i = sorted.Count - 1; i >= 0; i--) {\n            int index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                nums.Reverse(0, index + 1);\n                flips.Add(index + 1);\n            }\n            nums.Reverse(0, i + 1);\n            flips.Add(i + 1);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f56f4e95c61e410c86be6aefc99c4c4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f56f4e95c61e410c86be6aefc99c4c4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwth75l29.cs(22,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpwth75l29.cs(25,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var num = sorted[i];\n            var index = nums.IndexOf(num);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4gluuo_g.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp4gluuo_g.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp69kg0cr6.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp69kg0cr6.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                Flip(nums, maxIndex);\n                Flip(nums, i);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyyiynfx4.cs(19,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpyyiynfx4.cs(20,17): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = FindMaxIndex(nums, i);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp52r7nley.cs(13,28): error CS0103: The name 'FindMaxIndex' does not exist in the current context\n/tmp/tmp52r7nley.cs(19,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp52r7nley.cs(22,13): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = FindMaxIndex(nums, i);\n            if (maxIndex != i) {\n                Flip(nums, maxIndex);\n                Flip(nums, i);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0yvqxmq.cs(13,28): error CS0103: The name 'FindMaxIndex' does not exist in the current context\n/tmp/tmpq0yvqxmq.cs(15,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpq0yvqxmq.cs(16,17): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i - 1) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n                result.Add(i);\n                nums = Flip(nums, i - 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppikfjrtc.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmppikfjrtc.cs(23,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                result.Add(maxIndex + 1);\n                result.Add(max);\n                nums = Flip(nums, maxIndex + 1);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoxqrk7l_.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpoxqrk7l_.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpupgfou61.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpupgfou61.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var index = nums.IndexOf(i);\n            if (index == i - 1) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(i);\n            nums = Reverse(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphkzcaxtg.cs(17,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmphkzcaxtg.cs(20,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        int n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            int max = 0;\n            for (int j = 0; j < n - i; j++) {\n                if (nums[j] > nums[max]) {\n                    max = j;\n                }\n            }\n            Flip(nums, max);\n            Flip(nums, n - i - 1);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzi71l9hg.cs(20,13): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpzi71l9hg.cs(21,13): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Reverse(nums, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp3uji48t.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpp3uji48t.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.IndexOf(nums.Max());\n            if (max != i) {\n                if (max != 0) {\n                    result.Add(max + 1);\n                    nums = Flip(nums, max);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp984cgg2x.cs(17,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp984cgg2x.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Reverse(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wclf3rr.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp6wclf3rr.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6obtik14.cs(22,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6obtik14.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Max();\n        var index = nums.IndexOf(max);\n        result.Add(index + 1);\n        result.Add(nums.Count);\n        nums.Reverse(0, index + 1);\n        nums.Reverse();\n        nums.Remove(max);\n        if (nums.Count > 0) {\n            result.AddRange(PancakeSort(nums));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f3ae4121328458f91f456989aa33893>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f3ae4121328458f91f456989aa33893>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            nums.RemoveAt(maxIndex);\n            result.Add(i);\n            nums.RemoveAt(i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x0003c] in <a6c3dea883ac48819b6f50c9e4ac51a2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a6c3dea883ac48819b6f50c9e4ac51a2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x0003c] in <a6c3dea883ac48819b6f50c9e4ac51a2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a6c3dea883ac48819b6f50c9e4ac51a2>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 1; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxvr3z51r.cs(24,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpxvr3z51r.cs(27,13): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 1; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <de9a07f70e8941bbbbf7b2b344661fcf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <de9a07f70e8941bbbbf7b2b344661fcf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex == i - 1) {\n                continue;\n            }\n            if (maxIndex > 0) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex + 1);\n            }\n            result.Add(i);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp497gh43j.cs(24,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp497gh43j.cs(27,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(nums.Count);\n                nums.Reverse();\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = nums.Take(index + 1).Reverse().Concat(nums.Skip(index + 1)).ToList();\n            nums.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1415003d0af04229a00b38afcf5ec012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1415003d0af04229a00b38afcf5ec012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(max);\n            nums = Flip(nums, max - 1);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsek7aub0.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpsek7aub0.cs(25,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                result.Add(1);\n                nums.RemoveAt(0);\n            } else {\n                result.Add(index + 1);\n                result.Add(1);\n                nums.RemoveAt(index);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7234af0b652643c79f01d1823b91a1ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7234af0b652643c79f01d1823b91a1ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var ans = new List<long>();\n        for (var i = n; i > 0; i--) {\n            var j = nums.IndexOf(i);\n            if (j == i - 1) continue;\n            if (j != 0) {\n                ans.Add(j + 1);\n                nums = Reverse(nums, j + 1);\n            }\n            ans.Add(i);\n            nums = Reverse(nums, i);\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpanbbpu30.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpanbbpu30.cs(21,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == i - 1) {\n                nums.RemoveAt(maxIndex);\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Reverse(nums, maxIndex + 1);\n            }\n            result.Add(i);\n            nums = Reverse(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp833in1g7.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp833in1g7.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvlihi43v.cs(22,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpvlihi43v.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var index = 0;\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != index) {\n                if (maxIndex != nums.Count - 1) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex + 1);\n                }\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            index++;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb7nxzme8.cs(20,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpb7nxzme8.cs(23,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums.RemoveAt(index);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e78422f117e548dea792533eb1fe6d4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e78422f117e548dea792533eb1fe6d4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Reverse(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9y81r4g1.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp9y81r4g1.cs(21,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 1; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                Flip(nums, maxIndex);\n                Flip(nums, i);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp71r497ha.cs(19,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp71r497ha.cs(20,17): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex == max - i - 1) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = nums.Take(maxIndex + 1).Reverse().Concat(nums.Skip(maxIndex + 1)).ToList();\n            }\n            result.Add(max - i);\n            nums = nums.Take(max - i).Reverse().Concat(nums.Skip(max - i)).ToList();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad7e3fd1fa9f4d71aa80efc58c15d377>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad7e3fd1fa9f4d71aa80efc58c15d377>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var n = nums.Count;\n        var max = n;\n        for (var i = 0; i < n; i++) {\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == n - i - 1) {\n                max--;\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Reverse(nums, maxIndex + 1);\n            }\n            result.Add(n - i);\n            nums = Reverse(nums, n - i);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4gq8ds7v.cs(22,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp4gq8ds7v.cs(25,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Max();\n        var maxIndex = nums.IndexOf(max);\n        var maxIndex2 = nums.Count - 1;\n        while (maxIndex != maxIndex2) {\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums.Reverse(0, maxIndex + 1);\n            }\n            result.Add(maxIndex2 + 1);\n            nums.Reverse(0, maxIndex2 + 1);\n            maxIndex = nums.IndexOf(max);\n            maxIndex2--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Non-negative number required.\nParameter name: count\n  at System.Collections.Generic.List`1[T].Reverse (System.Int32 index, System.Int32 count) [0x0000d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x0004f] in <6fab2459cc964f589fe302d92e3ade26>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <6fab2459cc964f589fe302d92e3ade26>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Non-negative number required.\nParameter name: count\n  at System.Collections.Generic.List`1[T].Reverse (System.Int32 index, System.Int32 count) [0x0000d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.List`1[T] nums) [0x0004f] in <6fab2459cc964f589fe302d92e3ade26>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <6fab2459cc964f589fe302d92e3ade26>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiv5iaurq.cs(17,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpiv5iaurq.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sortedNums = new List<long>(nums);\n        sortedNums.Sort();\n        var sortedIndices = new List<long>();\n        for (int i = 0; i < sortedNums.Count; i++) {\n            var index = nums.IndexOf(sortedNums[i]);\n            sortedIndices.Add(index);\n            nums.RemoveAt(index);\n        }\n        return sortedIndices;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac29e0ae3e684ac6885d3b7025edc08c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac29e0ae3e684ac6885d3b7025edc08c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbnt5i233.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbnt5i233.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiv5iaurq.cs(17,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpiv5iaurq.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvlihi43v.cs(22,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpvlihi43v.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != n - i - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(n - i);\n                nums = Flip(nums, n - i - 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbkruuyeu.cs(19,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbkruuyeu.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var flips = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = sorted.IndexOf(nums[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                flips.Add(index + 1);\n                Reverse(nums, index);\n            }\n            flips.Add(i + 1);\n            Reverse(nums, i);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpirreop78.cs(19,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpirreop78.cs(22,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < nums.Count; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                result.Add(maxIndex + 1);\n                result.Add(max);\n                nums = Flip(nums, maxIndex + 1);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp09dqcer0.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp09dqcer0.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>(nums);\n        for (int i = 0; i < result.Count; i++) {\n            var maxIndex = result.IndexOf(result.Max());\n            if (maxIndex != result.Count - 1 - i) {\n                result = Flip(result, maxIndex);\n                result = Flip(result, result.Count - 1 - i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxoc2jrl8.cs(15,26): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpxoc2jrl8.cs(16,26): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = sorted.Count - 1; i >= 0; i--) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg1hajdys.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpg1hajdys.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        int n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            int maxIndex = 0;\n            for (int j = 0; j < n - i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != n - i - 1) {\n                nums = Flip(nums, maxIndex);\n                nums = Flip(nums, n - i - 1);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7ctuw1ta.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp7ctuw1ta.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndexSorted = sorted.IndexOf(max);\n            if (maxIndex != maxIndexSorted) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(maxIndexSorted + 1);\n                nums = Flip(nums, maxIndexSorted);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdang8tb9.cs(21,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpdang8tb9.cs(24,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i > 0; i--) {\n            var maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp98xcn4o5.cs(22,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp98xcn4o5.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(index + 1);\n                nums.Reverse();\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = nums.Take(index + 1).Reverse().Concat(nums.Skip(index + 1)).ToList();\n            nums.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62ddc469c6974ccbb927fd99684fe3a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62ddc469c6974ccbb927fd99684fe3a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(index + 1);\n                nums.Reverse();\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = nums.Take(index + 1).Reverse().Concat(nums.Skip(index + 1)).ToList();\n            nums.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3ab137be85cb451c8a7c933200e98f62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3ab137be85cb451c8a7c933200e98f62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp__ykyiw2.cs(17,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp__ykyiw2.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndex2 = nums.Count - 1 - maxIndex;\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums.Reverse(0, maxIndex + 1);\n            }\n            if (maxIndex2 != 0) {\n                result.Add(maxIndex2 + 1);\n                nums.Reverse(0, maxIndex2 + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124229,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndexRev = nums.Count - 1 - maxIndex;\n            result.Add(maxIndex + 1);\n            result.Add(maxIndexRev + 1);\n            nums = Reverse(nums, maxIndex + 1);\n            nums = Reverse(nums, maxIndexRev + 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprb6opgj6.cs(19,20): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmprb6opgj6.cs(20,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 1) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Reverse(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvfnqfvgy.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpvfnqfvgy.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var index = nums.IndexOf(max);\n            result.Add(index + 1);\n            nums = Flip(nums, index + 1);\n            result.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4gopqjcg.cs(18,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp4gopqjcg.cs(20,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = FindMaxIndex(nums, i);\n            Flip(nums, maxIndex);\n            Flip(nums, i);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdsb13vh5.cs(13,28): error CS0103: The name 'FindMaxIndex' does not exist in the current context\n/tmp/tmpdsb13vh5.cs(14,13): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpdsb13vh5.cs(15,13): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex > 0) {\n                result.Add(maxIndex + 1);\n                nums.Reverse(0, maxIndex + 1);\n            }\n            result.Add(max);\n            nums.Reverse(0, max);\n            nums.RemoveAt(max - 1);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2dc388c0938e420faf2c42b11f155200>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2dc388c0938e420faf2c42b11f155200>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0daltdi9.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp0daltdi9.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var index = nums.IndexOf(i);\n            if (index == i - 1) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(i);\n            nums = Reverse(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp__q6co8e.cs(19,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp__q6co8e.cs(22,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplbkndr0f.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmplbkndr0f.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.Count > 0) {\n            var index = nums.IndexOf(sorted[0]);\n            if (index == 0) {\n                result.Add(nums.Count);\n                nums.RemoveAt(0);\n            } else {\n                result.Add(index + 1);\n                result.Add(nums.Count);\n                nums.Reverse(0, index + 1);\n                nums.Reverse();\n                nums.RemoveAt(0);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <25db9b892fce41eea54be4e6823dc14d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <25db9b892fce41eea54be4e6823dc14d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex + 1);\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpll_3vxvh.cs(17,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpll_3vxvh.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var index = nums.IndexOf(max);\n            result.Add(index + 1);\n            nums = Flip(nums, index + 1);\n            result.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9h0m05ft.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp9h0m05ft.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums.Reverse(0, index + 1);\n            }\n            result.Add(max);\n            nums.Reverse(0, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        List<long> result = new List<long>();\n        int n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            int maxIndex = 0;\n            for (int j = 0; j < n - i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex == n - i - 1) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                Reverse(nums, maxIndex + 1);\n            }\n            result.Add(n - i);\n            Reverse(nums, n - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpih3r2en1.cs(26,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpih3r2en1.cs(29,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i + 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxu7wiy7c.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpxu7wiy7c.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi9zqp732.cs(17,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpi9zqp732.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 1) {\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != max - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg162z6zf.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpg162z6zf.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Reverse(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx71c9ej.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpmx71c9ej.cs(24,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == n - 1 - i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = nums.Take(maxIndex + 1).Reverse().Concat(nums.Skip(maxIndex + 1)).ToList();\n            }\n            result.Add(n - i);\n            nums = nums.Take(n - i).Reverse().Concat(nums.Skip(n - i)).ToList();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ba7bd3bae6a4f1685bd7de1fc3c8d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2ba7bd3bae6a4f1685bd7de1fc3c8d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(index + 1);\n                nums.Reverse();\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count - i);\n            nums = nums.GetRange(0, index + 1).Reverse().Concat(nums.GetRange(index + 1, nums.Count - index - 1)).ToList();\n            nums.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqsysvr1i.cs(26,57): error CS0023: Operator '.' cannot be applied to operand of type 'void'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var index = nums.IndexOf(max - i);\n            if (index == max - i - 1) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index + 1);\n            }\n            result.Add(max - i);\n            nums = Reverse(nums, max - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp42w09nf4.cs(20,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp42w09nf4.cs(23,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpix92061e.cs(22,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpix92061e.cs(25,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efab7fb9efd94db79e5fa0bff229292a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efab7fb9efd94db79e5fa0bff229292a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var res = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var idx = nums.IndexOf(max);\n            if (idx == max - 1) {\n                max--;\n                continue;\n            }\n            if (idx > 0) {\n                res.Add(idx + 1);\n                nums = Flip(nums, idx + 1);\n            }\n            res.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo48gs934.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpo48gs934.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var ans = new List<long>();\n        for (var i = n - 1; i >= 0; i--) {\n            var max = nums.IndexOf(nums.Max());\n            if (max != i) {\n                if (max != 0) {\n                    ans.Add(max + 1);\n                    nums = Reverse(nums, max + 1);\n                }\n                ans.Add(i + 1);\n                nums = Reverse(nums, i + 1);\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpla4k81eu.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpla4k81eu.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1 - i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(max - i);\n                nums.Reverse(0, max - i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <66e21edd39e641209423091c08f68759>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <66e21edd39e641209423091c08f68759>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c2d291f52e8d4e22927e10e98abe5e70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c2d291f52e8d4e22927e10e98abe5e70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums.Reverse(0, index + 1);\n            }\n            result.Add(max);\n            nums.Reverse(0, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84c896f9b87a47bdb034fa74ec94bc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i - 1) {\n                result.Add(maxIndex + 1);\n                nums = Reverse(nums, maxIndex + 1);\n                result.Add(i);\n                nums = Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptdtv9apu.cs(16,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmptdtv9apu.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i + 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxu7wiy7c.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpxu7wiy7c.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wvz5ldz.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6wvz5ldz.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index > 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6vay02ub.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6vay02ub.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        int n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            int max = i;\n            for (int j = i + 1; j < n; j++) {\n                if (nums[j] > nums[max]) {\n                    max = j;\n                }\n            }\n            Reverse(nums, max);\n            Reverse(nums, i);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9kisrn44.cs(20,13): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp9kisrn44.cs(21,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            nums = Flip(nums, maxIndex + 1);\n            result.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpju8et_c9.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpju8et_c9.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Reverse(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124222,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn0ehgxew.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpn0ehgxew.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index != max - 1) {\n                if (index != 0) {\n                    result.Add(index + 1);\n                    nums = Flip(nums, index + 1);\n                }\n                result.Add(max);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpebcf11lp.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpebcf11lp.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wvz5ldz.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6wvz5ldz.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp__ykyiw2.cs(17,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp__ykyiw2.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            Reverse(nums, maxIndex + 1);\n            result.Add(nums.Count);\n            Reverse(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpczv5d57c.cs(17,13): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpczv5d57c.cs(19,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var sorted = nums.OrderBy(x => x).ToList();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy2m9adlh.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpy2m9adlh.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = nums.Take(index + 1).Reverse().Concat(nums.Skip(index + 1)).ToList();\n            }\n            result.Add(nums.Count - i);\n            nums = nums.Take(nums.Count - i).Reverse().Concat(nums.Skip(nums.Count - i)).ToList();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0532ca8bca8c41c19f82ae6a4dce76ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0532ca8bca8c41c19f82ae6a4dce76ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var res = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    res.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                res.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6aba0f406ed24af0a960f1b22443dbf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6aba0f406ed24af0a960f1b22443dbf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1jpzt4ms.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp1jpzt4ms.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>(nums);\n        sorted.Sort();\n        List<long> flips = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            int index = sorted.IndexOf(nums[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                flips.Add(index + 1);\n                Reverse(nums, index);\n            }\n            flips.Add(i + 1);\n            Reverse(nums, i);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdvotp3ys.cs(19,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpdvotp3ys.cs(22,13): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wvz5ldz.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6wvz5ldz.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            sorted.Add(i + 1);\n        }\n        List<long> flips = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            int maxIndex = 0;\n            for (int i = 0; i < nums.Count; i++) {\n                if (nums[i] > nums[maxIndex]) {\n                    maxIndex = i;\n                }\n            }\n            if (maxIndex != nums.Count - 1) {\n                flips.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex + 1);\n            }\n            flips.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return flips;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvdm0yrao.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpvdm0yrao.cs(28,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            if (index == max - 1) {\n                max--;\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index + 1);\n            }\n            result.Add(max);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl46e6p1z.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpl46e6p1z.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == n - i - 1) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums.Reverse(0, maxIndex + 1);\n            }\n            result.Add(n - i);\n            nums.Reverse(0, n - i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e8dee17cd304f00816aa2dacbf19445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2e8dee17cd304f00816aa2dacbf19445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            result.Add(maxIndex + 1);\n            nums = Flip(nums, maxIndex + 1);\n            result.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpju8et_c9.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpju8et_c9.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            var maxIndex2 = nums.Count - 1 - maxIndex;\n            result.Add(maxIndex + 1);\n            result.Add(maxIndex2 + 1);\n            nums = Flip(nums, maxIndex + 1);\n            nums = Flip(nums, maxIndex2 + 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9eedjkjt.cs(20,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp9eedjkjt.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.Add(maxIndex + 1);\n                result.Add(i + 1);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvlihi43v.cs(22,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmpvlihi43v.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplbkndr0f.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmplbkndr0f.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        var result = new List<long>();\n        var max = nums.Count;\n        while (max > 0) {\n            var index = nums.IndexOf(max);\n            result.Add(index + 1);\n            result.Add(max);\n            nums = Flip(nums, index + 1);\n            nums = Flip(nums, max);\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbwc6c21t.cs(18,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbwc6c21t.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count; i > 0; i--) {\n            int index = nums.IndexOf(i);\n            if (index == i - 1) continue;\n            if (index > 0) {\n                result.Add(index + 1);\n                nums.Reverse(0, index + 1);\n            }\n            result.Add(i);\n            nums.Reverse(0, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <100052e70e4d47e8b48a10dca942fcb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <100052e70e4d47e8b48a10dca942fcb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        int n = nums.Count;\n        for (int i = 0; i < n; i++) {\n            int maxIndex = 0;\n            for (int j = 0; j < n - i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != n - i - 1) {\n                result.Add(maxIndex + 1);\n                result.Add(n - i);\n                nums.Reverse(0, maxIndex + 1);\n                nums.Reverse(0, n - i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bee19d3a6004ea48e908f236cc01964>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8bee19d3a6004ea48e908f236cc01964>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var res = new List<long>();\n        while (nums.SequenceEqual(sorted) == false) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            res.Add(maxIndex + 1);\n            nums = Flip(nums, maxIndex + 1);\n            res.Add(nums.Count);\n            nums = Flip(nums, nums.Count);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwshtjved.cs(17,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpwshtjved.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var ret = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    ret.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                ret.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwi5xqwdu.cs(22,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpwi5xqwdu.cs(25,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var res = new List<long>();\n        for (int i = 0; i < n; i++) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != n - i - 1) {\n                if (maxIndex != 0) {\n                    res.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                res.Add(n - i);\n                nums = Flip(nums, n - i - 1);\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqojt1ocf.cs(19,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpqojt1ocf.cs(22,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Reverse(nums, maxIndex + 1);\n                }\n                result.Add(max);\n                nums = Reverse(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0daltdi9.cs(18,28): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp0daltdi9.cs(21,24): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.IndexOf(nums.Max());\n            if (max != i) {\n                if (max != 0) {\n                    result.Add(max + 1);\n                    nums = Flip(nums, max);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp984cgg2x.cs(17,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp984cgg2x.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <debb217f18c446c5bad063de348cdd20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <debb217f18c446c5bad063de348cdd20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var res = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    res.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                res.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4jlj0bn1.cs(18,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp4jlj0bn1.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> result = new List<long>();\n        int n = nums.Count;\n        for (int i = n; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i - 1) {\n                result.Add(maxIndex + 1);\n                result.Add(i);\n                Reverse(nums, maxIndex);\n                Reverse(nums, i - 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124225,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5lu9ih9k.cs(23,17): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp5lu9ih9k.cs(24,17): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Reverse(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Reverse(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124224,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9y81r4g1.cs(18,24): error CS0103: The name 'Reverse' does not exist in the current context\n/tmp/tmp9y81r4g1.cs(21,20): error CS0103: The name 'Reverse' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Max();\n        var maxIndex = nums.IndexOf(max);\n        var maxIndex2 = nums.Count - 1;\n        while (maxIndex != maxIndex2) {\n            result.Add(maxIndex + 1);\n            result.Add(maxIndex2 + 1);\n            nums = Flip(nums, maxIndex);\n            nums = Flip(nums, maxIndex2);\n            maxIndex = nums.IndexOf(max);\n            maxIndex2--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4qzmrssx.cs(18,20): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp4qzmrssx.cs(19,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1 - i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(max - i);\n                nums.Reverse(0, max - i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd5e8c564d39430dbb17aa7ccbdbbbb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd5e8c564d39430dbb17aa7ccbdbbbb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var result = new List<long>();\n        for (int i = n; i > 0; i--) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i - 1) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n                result.Add(i);\n                nums = Flip(nums, i - 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt53zakhn.cs(17,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpt53zakhn.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        List<long> sorted = new List<long>(nums);\n        sorted.Sort();\n        List<long> result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            long num = sorted[i];\n            int index = nums.IndexOf(num);\n            if (index == 0) {\n                result.Add(1);\n                nums.RemoveAt(0);\n                continue;\n            }\n            if (index == nums.Count - 1) {\n                result.Add(nums.Count);\n                nums.RemoveAt(nums.Count - 1);\n                continue;\n            }\n            result.Add(index + 1);\n            result.Add(nums.Count);\n            nums.RemoveAt(index);\n            nums.RemoveAt(nums.Count - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05f2c3a6f7a6455389d8964d40bb9cf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05f2c3a6f7a6455389d8964d40bb9cf1>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PancakeSort (System.Collections.Generic.L",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6wvz5ldz.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6wvz5ldz.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums = Flip(nums, maxIndex);\n                }\n                result.Add(i + 1);\n                nums = Flip(nums, i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplc5gy_5b.cs(17,28): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmplc5gy_5b.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = nums.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(nums.Count - i);\n            nums = Flip(nums, nums.Count - i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbnt5i233.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpbnt5i233.cs(21,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        for (int i = nums.Count; i > 0; i--) {\n            int maxIndex = FindMaxIndex(nums, i);\n            if (maxIndex != i - 1) {\n                Flip(nums, maxIndex);\n                Flip(nums, i - 1);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp881dvwzx.cs(13,28): error CS0103: The name 'FindMaxIndex' does not exist in the current context\n/tmp/tmp881dvwzx.cs(15,17): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp881dvwzx.cs(16,17): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = max; i > 0; i--) {\n            var index = nums.IndexOf(i);\n            if (index == i - 1) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i);\n            nums = Flip(nums, i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6l90q81u.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp6l90q81u.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30ea671f335c4f9ab25eb8c6d7cccd58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var n = nums.Count;\n        var result = new List<long>();\n        for (var i = n; i > 0; i--) {\n            var index = nums.IndexOf(i);\n            if (index == i - 1) {\n                continue;\n            }\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i);\n            nums = Flip(nums, i - 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkmnwrb56.cs(20,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpkmnwrb56.cs(23,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (var i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex != max - 1) {\n                result.Add(maxIndex + 1);\n                result.Add(max);\n                nums = Flip(nums, maxIndex + 1);\n                nums = Flip(nums, max);\n            }\n            max--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124223,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoxqrk7l_.cs(18,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpoxqrk7l_.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var sorted = new List<long>(nums);\n        sorted.Sort();\n        var result = new List<long>();\n        for (int i = sorted.Count - 1; i >= 0; i--) {\n            var index = nums.IndexOf(sorted[i]);\n            if (index == i) continue;\n            if (index != 0) {\n                result.Add(index + 1);\n                nums = Flip(nums, index);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_x9dqt3.cs(19,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmp2_x9dqt3.cs(22,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        List<long> sortedNums = new List<long>(nums);\n        sortedNums.Sort();\n        sortedNums.Reverse();\n        return sortedNums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d40d6ab42322450b97c2d1296768286c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d40d6ab42322450b97c2d1296768286c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums[j] > nums[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.Add(maxIndex + 1);\n                    nums.Reverse(0, maxIndex + 1);\n                }\n                result.Add(i + 1);\n                nums.Reverse(0, i + 1);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80f968b5cf854e499e35c7e4ac9fc12d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80f968b5cf854e499e35c7e4ac9fc12d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        var result = new List<long>();\n        var max = nums.Count;\n        for (int i = 0; i < max; i++) {\n            var maxIndex = nums.IndexOf(nums.Max());\n            if (maxIndex == max - i - 1) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = nums.Take(maxIndex + 1).Reverse().Concat(nums.Skip(maxIndex + 1)).ToList();\n            }\n            result.Add(max - i);\n            nums = nums.Take(max - i).Reverse().Concat(nums.Skip(max - i)).ToList();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b647f899837f44cdab4cc7240985393f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b647f899837f44cdab4cc7240985393f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        // Write your code here.\n        var result = new List<long>();\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            var max = nums.Max();\n            var maxIndex = nums.IndexOf(max);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.Add(maxIndex + 1);\n                nums = Flip(nums, maxIndex);\n            }\n            result.Add(i + 1);\n            nums = Flip(nums, i);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n",
      "timestamp": 1666124226,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzkjf14gl.cs(21,24): error CS0103: The name 'Flip' does not exist in the current context\n/tmp/tmpzkjf14gl.cs(24,20): error CS0103: The name 'Flip' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}