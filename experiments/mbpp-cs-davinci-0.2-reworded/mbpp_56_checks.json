{
  "name": "mbpp_56_checks",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Checks((70L)) == (false));\n    Debug.Assert(Checks((23L)) == (false));\n    Debug.Assert(Checks((73L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        // Convert the number to a string.\n        string s = n.ToString();\n        // Reverse the string.\n        string r = new string(s.Reverse().ToArray());\n        // Convert the string back to a number.\n        long rn = long.Parse(r);\n        // Return whether the number is one less than twice its reverse.\n        return n == 2 * rn - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long x = n;\n        while (x > 0) {\n            r = r * 10 + x % 10;\n            x /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        return n == (n / 10 + n % 10 * 10);",
    "        long r = long.Parse(new string(n.ToString().Reverse().ToArray()));\n        return n == (2 * r) - 1;",
    "        long r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var r = n.ToString().Reverse().ToArray();\n        var s = new string(r);\n        var m = long.Parse(s);\n        return n == 2 * m - 1;"
  ]
}