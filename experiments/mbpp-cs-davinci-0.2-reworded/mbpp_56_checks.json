{
  "name": "mbpp_56_checks",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Checks((70L)) == (false));\n    Debug.Assert(Checks((23L)) == (false));\n    Debug.Assert(Checks((73L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        // Convert the number to a string.\n        string s = n.ToString();\n        // Reverse the string.\n        string r = new string(s.Reverse().ToArray());\n        // Convert the string back to a number.\n        long rn = long.Parse(r);\n        // Return whether the number is one less than twice its reverse.\n        return n == 2 * rn - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long x = n;\n        while (x > 0) {\n            r = r * 10 + x % 10;\n            x /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        return n == (n / 10 + n % 10 * 10);",
    "        long r = long.Parse(new string(n.ToString().Reverse().ToArray()));\n        return n == (2 * r) - 1;",
    "        long r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var r = n.ToString().Reverse().ToArray();\n        var s = new string(r);\n        var m = long.Parse(s);\n        return n == 2 * m - 1;",
    "        // Convert to string\n        string s = n.ToString();\n        // Reverse the string\n        string r = new string(s.Reverse().ToArray());\n        // Convert to long\n        long rn = long.Parse(r);\n        // Check if n is one less than twice its reverse\n        return n == 2 * rn - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == (n / 10) * 19 - 9;",
    "        long r = Reverse(n);\n        return (n == 2 * r - 1);",
    "        long r = Reverse(n);\n        return (n == 2 * r - 1);",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        // Convert the number to a string.\n        string s = n.ToString();\n        // Reverse the string.\n        string r = new string(s.Reverse().ToArray());\n        // Convert the reversed string to a number.\n        long rn = long.Parse(r);\n        // Check if the number is one less than twice its reverse.\n        return n == 2 * rn - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = 10 * r + t % 10;\n            t /= 10;\n        }\n        return n == 2 * r - 1;",
    "        return n == Reverse(n) + 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        var x = long.Parse(r);\n        return n == 2 * x - 1;",
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == (n / 10) * 19 - 9;",
    "        long r = 0;\n        long m = n;\n        while (m > 0) {\n            r = r * 10 + m % 10;\n            m /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == 2 * Reverse(n) - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        var r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        return n == (n % 10) * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return (n == rev + 1) || (n == 2 * rev - 1);",
    "        // Convert to string\n        string s = n.ToString();\n        // Reverse the string\n        string r = new string(s.Reverse().ToArray());\n        // Convert back to long\n        long rn = long.Parse(r);\n        // Check if n is one less than twice its reverse\n        return n == 2 * rn - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return (n == 2 * r - 1);",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r - 1 || n == 2 * r - 1;",
    "        var r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == (n / 10) * 19 - 9;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == r - 1;",
    "        // Convert to string\n        string s = n.ToString();\n        // Reverse string\n        char[] arr = s.ToCharArray();\n        Array.Reverse(arr);\n        string r = new string(arr);\n        // Check if n is one less than twice its reverse\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == r - 1;",
    "        return n == Reverse(n) + 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        return n == (long)(n.ToString().Reverse().ToArray()) + 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        var rn = long.Parse(r);\n        return n == 2 * rn - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == (n / 10 + n % 10 * 10);",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == r * 2 - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long m = n;\n        while (m > 0) {\n            r = r * 10 + m % 10;\n            m /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        return n == (long)(n.ToString().Reverse().ToArray()) - 1;",
    "        string s = n.ToString();\n        string r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r + r - 1;",
    "        return n == (long)Math.Pow(2, n.ToString().Length) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        // return n == (long)Math.Pow(2, Math.Floor(Math.Log(n, 2)));\n        return n == (long)Math.Pow(2, Math.Floor(Math.Log(n, 2)));",
    "        long r = Reverse(n);\n        return (n == 2 * r - 1);",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var reverse = Reverse(n);\n        return n == reverse * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        return n == (n / 10 + n % 10 * (long)Math.Pow(10, Math.Floor(Math.Log10(n))));",
    "        return n == (n % 10) * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        string s = n.ToString();\n        string r = new string(s.Reverse().ToArray());\n        long rn = long.Parse(r);\n        return (n == 2*rn - 1);",
    "        return n == Reverse(n) * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return (n == reverse - 1);",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        long rev = 0;\n        long tmp = n;\n        while (tmp > 0) {\n            rev = rev * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        return n == (long)(n.ToString().Reverse().Aggregate(\"\", (a, b) => a + b)) * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Reverse the string\n        string r = new string(s.Reverse().ToArray());\n        // Convert the reversed string to a number\n        long rn = long.Parse(r);\n        // Check if the number is one less than twice its reverse\n        return n == 2 * rn - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return (n == 2 * r - 1);",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        return n == (n / 10 + n % 10 * 10);",
    "        long rev = Reverse(n);\n        return (n == rev * 2 - 1);",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2*r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return (n == rev + 1);",
    "        long r = 0;\n        long m = n;\n        while (m > 0) {\n            r = r * 10 + m % 10;\n            m /= 10;\n        }\n        return n == r * 2 - 1;",
    "        var rev = Reverse(n);\n        return n == rev * 2 - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev + 1 || n == rev - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1 || n == 2 * rev - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == (long.Parse(r) * 2) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == Reverse(n - 1) * 2;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long rev = Reverse(n);\n        return (n == rev * 2 - 1);",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        var x = long.Parse(r);\n        return n == 2 * x - 1;",
    "        var reverse = long.Parse(new string(n.ToString().Reverse().ToArray()));\n        return n == reverse * 2 - 1;",
    "        return n == (n / 10) * 19 - 9;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp = temp / 10;\n        }\n        return (n == reverse + 1);",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        return n == (long)(n / 10) * 9;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == 2 * rev - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        // Convert to string\n        string s = n.ToString();\n        // Reverse it\n        char[] c = s.ToCharArray();\n        Array.Reverse(c);\n        string r = new string(c);\n        // Convert back to long\n        long rn = long.Parse(r);\n        // Check if n is one less than twice its reverse\n        return n == 2 * rn - 1;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        long r = Reverse(n);\n        return n == 2*r - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1;",
    "        var rev = Reverse(n);\n        return n == 2 * rev - 1;",
    "        long r = Reverse(n);\n        return (n == 2*r - 1);",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev - 1;",
    "        long r = Reverse(n);\n        return n == r * 2 - 1;",
    "        // Convert to string\n        string s = n.ToString();\n        // Reverse the string\n        char[] charArray = s.ToCharArray();\n        Array.Reverse(charArray);\n        string r = new string(charArray);\n        // Convert back to int\n        long rn = Convert.ToInt64(r);\n        // Check if n is one less than twice its reverse\n        if (n == 2*rn - 1) {\n            return true;\n        }\n        return false;",
    "        long rev = 0;\n        long num = n;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long reverse = 0;\n        long temp = n;\n        while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == reverse + 1 || n == reverse - 1;"
  ]
}