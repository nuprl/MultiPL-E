{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long prod = 1;\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            sum += arr[i] * prod;\n            prod *= arr[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <72057016df8c45578575a16ac2fc765c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <72057016df8c45578575a16ac2fc765c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        int n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long res = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                res += prod;\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long prod = 1;\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            sum += prod * arr[i];\n            prod *= arr[i];\n        }\n        prod = 1;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n            sum += prod * arr[i];\n            prod *= arr[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6afa9a55bab54392aff069cffdafac8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6afa9a55bab54392aff069cffdafac8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long prod = 1;\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            sum += prod * arr[i];\n            prod *= arr[i];\n        }\n        prod = 1;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n            sum += prod * arr[i];\n            prod *= arr[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6afa9a55bab54392aff069cffdafac8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6afa9a55bab54392aff069cffdafac8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        int n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n                prod = 1;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long prod = 1;\n            for (int j = i; j < arr.Count; j++) {\n                prod *= arr[j];\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i; j < arr.Count; j++) {\n                long prod = 1;\n                for (int k = i; k <= j; k++) {\n                    prod *= arr[k];\n                }\n                sum += prod;\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}