{
  "name": "mbpp_602_first_repeated_char",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the first repeated character in a given string.\n    public static string FirstRepeatedChar(string str1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstRepeatedChar((\"abcabc\")).Equals((\"a\")));\n    Debug.Assert(FirstRepeatedChar((\"abc\")).Equals(null));\n    Debug.Assert(FirstRepeatedChar((\"123123\")).Equals((\"1\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        string result = \"\";\n        char[] charArray = str1.ToCharArray();\n        Dictionary<char, int> charDict = new Dictionary<char, int>();\n        for (int i = 0; i < charArray.Length; i++) {\n            if (charDict.ContainsKey(charArray[i])) {\n                charDict[charArray[i]] += 1;\n            } else {\n                charDict.Add(charArray[i], 1);\n            }\n        }\n        foreach (var item in charDict) {\n            if (item.Value > 1) {\n                result = item.Key.ToString();\n                break;\n            }\n        }\n        return result;",
    "        char[] str = str1.ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (dict.ContainsKey(str[i])) {\n                return str[i].ToString();\n            }\n            else {\n                dict.Add(str[i], 1);\n            }\n        }\n        return \"No repeated characters\";",
    "        HashSet<char> set = new HashSet<char>();\n        foreach (char c in str1) {\n            if (set.Contains(c)) {\n                return c.ToString();\n            }\n            set.Add(c);\n        }\n        return \"\";",
    "        var dict = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (dict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            dict[c] = 1;\n        }\n        return \"\";",
    "        char[] str = str1.ToCharArray();\n        Dictionary<char, int> d = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (d.ContainsKey(str[i])) {\n                return str[i].ToString();\n            } else {\n                d.Add(str[i], 1);\n            }\n        }\n        return \"\";",
    "        char[] str = str1.ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (dict.ContainsKey(str[i])) {\n                return str[i].ToString();\n            } else {\n                dict.Add(str[i], 1);\n            }\n        }\n        return \"No repeated characters\";",
    "        var charCount = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (charCount.ContainsKey(c)) {\n                return c.ToString();\n            }\n            charCount[c] = 1;\n        }\n        return \"\";",
    "        var charCount = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount[c] = 1;\n            }\n        }\n        foreach (char c in str1) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        string result = \"\";\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < str1.Length; i++) {\n            if (dict.ContainsKey(str1[i])) {\n                dict[str1[i]]++;\n            } else {\n                dict.Add(str1[i], 1);\n            }\n        }\n        foreach (KeyValuePair<char, int> kvp in dict) {\n            if (kvp.Value > 1) {\n                result = kvp.Key.ToString();\n                break;\n            }\n        }\n        return result;",
    "        string result = \"\";\n        var dict = new Dictionary<char, int>();\n        for (int i = 0; i < str1.Length; i++) {\n            if (dict.ContainsKey(str1[i])) {\n                dict[str1[i]]++;\n            } else {\n                dict.Add(str1[i], 1);\n            }\n        }\n        foreach (var item in dict) {\n            if (item.Value > 1) {\n                result = item.Key.ToString();\n                break;\n            }\n        }\n        return result;",
    "        var charArray = str1.ToCharArray();\n        var charDict = new Dictionary<char, int>();\n        for (int i = 0; i < charArray.Length; i++) {\n            if (charDict.ContainsKey(charArray[i])) {\n                return charArray[i].ToString();\n            }\n            charDict.Add(charArray[i], 1);\n        }\n        return \"No repeated character\";",
    "        Dictionary<char, int> d = new Dictionary<char, int>();\n        for (int i = 0; i < str1.Length; i++) {\n            if (d.ContainsKey(str1[i])) {\n                return str1[i].ToString();\n            }\n            else {\n                d.Add(str1[i], 1);\n            }\n        }\n        return \"\";",
    "        var charArray = str1.ToCharArray();\n        var charDict = new Dictionary<char, int>();\n        foreach (var c in charArray) {\n            if (charDict.ContainsKey(c)) {\n                charDict[c]++;\n            } else {\n                charDict.Add(c, 1);\n            }\n        }\n        foreach (var c in charArray) {\n            if (charDict[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        var charCount = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount.Add(c, 1);\n            }\n        }\n        foreach (var c in str1) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        char[] str = str1.ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (dict.ContainsKey(str[i])) {\n                return str[i].ToString();\n            }\n            else {\n                dict.Add(str[i], 1);\n            }\n        }\n        return \"\";",
    "        var charCount = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount[c] = 1;\n            }\n        }\n        foreach (char c in str1) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        char[] charArray = str1.ToCharArray();\n        Dictionary<char, int> charDict = new Dictionary<char, int>();\n        for (int i = 0; i < charArray.Length; i++) {\n            if (charDict.ContainsKey(charArray[i])) {\n                return charArray[i].ToString();\n            }\n            else {\n                charDict.Add(charArray[i], 1);\n            }\n        }\n        return \"\";",
    "        string result = \"\";\n        int[] arr = new int[256];\n        for (int i = 0; i < str1.Length; i++) {\n            if (arr[str1[i]] == 1) {\n                result += str1[i];\n                break;\n            }\n            arr[str1[i]]++;\n        }\n        return result;",
    "        string result = \"\";\n        Dictionary<char, int> d = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (d.ContainsKey(c)) {\n                d[c]++;\n            } else {\n                d[c] = 1;\n            }\n        }\n        foreach (KeyValuePair<char, int> kvp in d) {\n            if (kvp.Value > 1) {\n                result = kvp.Key.ToString();\n                break;\n            }\n        }\n        return result;",
    "        var charDict = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (charDict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            charDict.Add(c, 1);\n        }\n        return \"\";"
  ]
}