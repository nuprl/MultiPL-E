{
  "name": "mbpp_119_search",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long start = 0;\n        long end = arr.Count - 1;\n        while (start < end) {\n            long mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr[start];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 2, arr.Count - mid - 2));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[(int)mid] == arr[(int)mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        // TODO: Implement this function\n        return 0;",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 1) {\n                mid--;\n            }\n            if (arr[mid] == arr[mid + 1]) {\n                lo = mid + 2;\n            } else {\n                hi = mid;\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if (m % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if (m % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        int start = 0;\n        int end = arr.Count - 1;\n        while (start < end) {\n            int mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr[start];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        // TODO: Implement this function\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            return Search(arr.GetRange(0, mid));\n        }\n        return arr[mid];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        // Binary search\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        // TODO: Implement this function\n        return 0;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        int left = 0;\n        int right = arr.Count - 1;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        if (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr.Count == 2) {\n            if (arr[0] == arr[1]) {\n                return -1;\n            } else {\n                return arr[0];\n            }\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(mid, arr.Count - mid));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 2, arr.Count - mid - 2));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 1) {\n                mid--;\n            }\n            if (arr[mid] == arr[mid + 1]) {\n                left = mid + 2;\n            } else {\n                right = mid;\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        // TODO: Implement this function\n        return 0;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                if ((mid - left) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        int n = arr.Count;\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (mid == 0 || mid == n - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 2;\n                }\n                else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        int n = arr.Count;\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (mid == 0 || mid == n - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int low = 1;\n        int high = arr.Count - 2;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = arr.Count - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[mid];\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        // TODO: Implement this function\n        // return the element that appears only once\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        // TODO: Implement this function\n        return 0;",
    "        // Binary search\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                return Search(arr.GetRange((int)mid + 1, (int)arr.Count - (int)mid - 1));\n            } else {\n                return Search(arr.GetRange(0, (int)mid));\n            }\n        } else {\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                return Search(arr.GetRange(0, (int)mid - 1));\n            } else {\n                return Search(arr.GetRange((int)mid + 1, (int)arr.Count - (int)mid - 1));\n            }\n        }",
    "        // TODO: Implement this function\n        return 0;",
    "        if (arr.Count == 1) return arr[0];\n        long mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[(int)mid] == arr[(int)mid - 1]) return Search(arr.GetRange((int)mid + 1, (int)mid - 1));\n            else if (arr[(int)mid] == arr[(int)mid + 1]) return Search(arr.GetRange(0, (int)mid - 1));\n            else return arr[(int)mid];\n        } else {\n            if (arr[(int)mid] == arr[(int)mid - 1]) return Search(arr.GetRange(0, (int)mid - 1));\n            else if (arr[(int)mid] == arr[(int)mid + 1]) return Search(arr.GetRange((int)mid + 2, (int)mid - 1));\n            else return arr[(int)mid];\n        }",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        // TODO: Implement this function.\n        return 0;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        if (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int start = 0;\n        int end = arr.Count - 1;\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        long mid = 0;\n        while (lo < hi) {\n            mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        // TODO: Implement your solution here\n        return 0;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low < high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr.Count == 2) {\n            if (arr[0] == arr[1]) {\n                return -1;\n            }\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n            return Search(arr.GetRange(0, mid - 1));\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        }\n        return arr[mid];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long min = 0;\n        long max = arr.Count - 1;\n        while (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - min) % 2 == 0) {\n                    max = mid - 2;\n                } else {\n                    min = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((max - mid) % 2 == 0) {\n                    min = mid + 2;\n                } else {\n                    max = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[min];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        // TODO: Implement this function\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];"
  ]
}