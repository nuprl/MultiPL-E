{
  "name": "mbpp_119_search",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long start = 0;\n        long end = arr.Count - 1;\n        while (start < end) {\n            long mid = (start + end) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr[start];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 2, arr.Count - mid - 2));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            return arr[mid];\n        }",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[(int)mid] == arr[(int)mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;",
    "        // TODO: Implement this function\n        return 0;",
    "        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];",
    "        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 1) {\n                mid--;\n            }\n            if (arr[mid] == arr[mid + 1]) {\n                lo = mid + 2;\n            } else {\n                hi = mid;\n            }\n        }\n        return arr[lo];",
    "        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];"
  ]
}